// <auto-generated />
using System;
using HaveASeat.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HaveASeat.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250720154244_gift_card")]
    partial class gift_card
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HaveASeat.Models.Abbonamento", b =>
                {
                    b.Property<Guid>("AbbonamentoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descrizione")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Durata")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Prezzo")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("AbbonamentoId");

                    b.ToTable("Abbonamento");
                });

            modelBuilder.Entity("HaveASeat.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("AcceptNewsletter")
                        .HasColumnType("bit");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("CAP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Città")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodiceFiscale")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cognome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DataRegistrazione")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ImmagineUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Indirizzo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Provincia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("HaveASeat.Models.Appuntamento", b =>
                {
                    b.Property<Guid>("AppuntamentoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DipendenteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SaloneId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ServizioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SlotId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Stato")
                        .HasColumnType("int");

                    b.HasKey("AppuntamentoId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("DipendenteId");

                    b.HasIndex("SaloneId");

                    b.HasIndex("ServizioId");

                    b.HasIndex("SlotId");

                    b.ToTable("Appuntamento");
                });

            modelBuilder.Entity("HaveASeat.Models.Categoria", b =>
                {
                    b.Property<Guid>("CategoriaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoriaId");

                    b.ToTable("Categoria");
                });

            modelBuilder.Entity("HaveASeat.Models.Dipendente", b =>
                {
                    b.Property<Guid>("DipendenteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DataCreazione")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SaloneId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DipendenteId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("SaloneId");

                    b.ToTable("Dipendente");
                });

            modelBuilder.Entity("HaveASeat.Models.DipendenteServizio", b =>
                {
                    b.Property<Guid>("DipendenteServizioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DipendenteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServizioId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DipendenteServizioId");

                    b.HasIndex("DipendenteId");

                    b.HasIndex("ServizioId");

                    b.ToTable("DipendenteServizio");
                });

            modelBuilder.Entity("HaveASeat.Models.GiftCard", b =>
                {
                    b.Property<Guid>("GiftCardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsUsed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Message")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("RecipientEmail")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("RecipientName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("SaloneId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SenderEmail")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("SenderName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UsedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UsedByUserId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("GiftCardId");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("IX_GiftCard_Code");

                    b.HasIndex("ExpiryDate")
                        .HasDatabaseName("IX_GiftCard_ExpiryDate");

                    b.HasIndex("IsUsed")
                        .HasDatabaseName("IX_GiftCard_IsUsed");

                    b.HasIndex("RecipientEmail")
                        .HasDatabaseName("IX_GiftCard_RecipientEmail");

                    b.HasIndex("SaloneId");

                    b.HasIndex("UsedByUserId");

                    b.ToTable("GiftCard");
                });

            modelBuilder.Entity("HaveASeat.Models.Immagine", b =>
                {
                    b.Property<Guid>("ImmagineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCreazione")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCover")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsLogo")
                        .HasColumnType("bit");

                    b.Property<string>("Percorso")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SaloneId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ImmagineId");

                    b.HasIndex("SaloneId");

                    b.ToTable("Immagine");
                });

            modelBuilder.Entity("HaveASeat.Models.Orario", b =>
                {
                    b.Property<Guid>("OrarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("Apertura")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("Chiusura")
                        .HasColumnType("time");

                    b.Property<int>("Giorno")
                        .HasColumnType("int");

                    b.Property<bool>("IsDayOff")
                        .HasColumnType("bit");

                    b.Property<Guid>("SaloneId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SaloneId1")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OrarioId");

                    b.HasIndex("SaloneId");

                    b.HasIndex("SaloneId1");

                    b.ToTable("Orario");
                });

            modelBuilder.Entity("HaveASeat.Models.OrarioDipendente", b =>
                {
                    b.Property<Guid>("OrarioDipendenteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("Apertura")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("Chiusura")
                        .HasColumnType("time");

                    b.Property<DateTime>("DataCreazione")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DipendenteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("FineFerie")
                        .HasColumnType("datetime2");

                    b.Property<int>("Giorno")
                        .HasColumnType("int");

                    b.Property<DateTime>("InizioFerie")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDayOff")
                        .HasColumnType("bit");

                    b.HasKey("OrarioDipendenteId");

                    b.HasIndex("DipendenteId");

                    b.ToTable("OrarioDipendente");
                });

            modelBuilder.Entity("HaveASeat.Models.PianoSelezionato", b =>
                {
                    b.Property<Guid>("PianoSelezionatoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AbbonamentoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Confermato")
                        .HasColumnType("bit");

                    b.HasKey("PianoSelezionatoId");

                    b.ToTable("PianoSelezionato");
                });

            modelBuilder.Entity("HaveASeat.Models.Recensione", b =>
                {
                    b.Property<Guid>("RecensioneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Commento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DataCreazione")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DipendenteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SaloneId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Voto")
                        .HasColumnType("int");

                    b.HasKey("RecensioneId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("DipendenteId");

                    b.HasIndex("SaloneId");

                    b.ToTable("Recensione");
                });

            modelBuilder.Entity("HaveASeat.Models.Salone", b =>
                {
                    b.Property<Guid>("SaloneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CAP")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Citta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DataCreazione")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Indirizzo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PartitaIVA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Provincia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RagioneSociale")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Regione")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SDI")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SitoWeb")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Stato")
                        .HasColumnType("int");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SaloneId");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Salone");
                });

            modelBuilder.Entity("HaveASeat.Models.SaloneAbbonamento", b =>
                {
                    b.Property<Guid>("SaloneAbbonamentoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AbbonamentoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataFine")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataInizio")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsTrial")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SaloneId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Stato")
                        .HasColumnType("int");

                    b.Property<string>("StripeCustomerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StripeSubscriptionId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SaloneAbbonamentoId");

                    b.HasIndex("AbbonamentoId");

                    b.HasIndex("SaloneId");

                    b.ToTable("SaloneAbbonamento");
                });

            modelBuilder.Entity("HaveASeat.Models.SaloneCategoria", b =>
                {
                    b.Property<Guid>("SaloneCategoriaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoriaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SaloneId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SaloneCategoriaId");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("SaloneId");

                    b.ToTable("SaloneCategoria");
                });

            modelBuilder.Entity("HaveASeat.Models.SalonePersonalizzazione", b =>
                {
                    b.Property<Guid>("SalonePersonalizzazioneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ColoreAccento")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<string>("ColorePrimario")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<string>("ColoreSecondario")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<DateTime>("DataCreazione")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataUltimaModifica")
                        .HasColumnType("datetime2");

                    b.Property<string>("FacebookUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("InstagramUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("LayoutTipo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LogoUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("MostraContatti")
                        .HasColumnType("bit");

                    b.Property<bool>("MostraGalleria")
                        .HasColumnType("bit");

                    b.Property<bool>("MostraRecensioni")
                        .HasColumnType("bit");

                    b.Property<bool>("MostraServizi")
                        .HasColumnType("bit");

                    b.Property<bool>("MostraTeam")
                        .HasColumnType("bit");

                    b.Property<Guid>("SaloneId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Slogan")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("TemaColore")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TiktokUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("SalonePersonalizzazioneId");

                    b.HasIndex("SaloneId")
                        .IsUnique();

                    b.ToTable("SalonePersonalizzazione");
                });

            modelBuilder.Entity("HaveASeat.Models.Servizio", b =>
                {
                    b.Property<Guid>("ServizioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataFinePromozione")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataInizioPromozione")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descrizione")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Durata")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<bool>("IsPromotion")
                        .HasColumnType("bit");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Prezzo")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("PrezzoPromozione")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("SaloneId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ServizioId");

                    b.HasIndex("SaloneId");

                    b.ToTable("Servizio");
                });

            modelBuilder.Entity("HaveASeat.Models.Slot", b =>
                {
                    b.Property<Guid>("SlotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Capacita")
                        .HasColumnType("int");

                    b.Property<string>("GiorniSettimana")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAttivo")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("OraFine")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("OraInizio")
                        .HasColumnType("time");

                    b.Property<Guid>("SaloneId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SlotId");

                    b.HasIndex("SaloneId");

                    b.ToTable("Slot");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HaveASeat.Models.Appuntamento", b =>
                {
                    b.HasOne("HaveASeat.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Appuntamenti")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HaveASeat.Models.Dipendente", "Dipendente")
                        .WithMany("Appuntamenti")
                        .HasForeignKey("DipendenteId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("HaveASeat.Models.Salone", "Salone")
                        .WithMany("Appuntamenti")
                        .HasForeignKey("SaloneId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HaveASeat.Models.Servizio", "Servizio")
                        .WithMany()
                        .HasForeignKey("ServizioId");

                    b.HasOne("HaveASeat.Models.Slot", "Slot")
                        .WithMany("Appuntamenti")
                        .HasForeignKey("SlotId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Dipendente");

                    b.Navigation("Salone");

                    b.Navigation("Servizio");

                    b.Navigation("Slot");
                });

            modelBuilder.Entity("HaveASeat.Models.Dipendente", b =>
                {
                    b.HasOne("HaveASeat.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HaveASeat.Models.Salone", "Salone")
                        .WithMany("Dipendenti")
                        .HasForeignKey("SaloneId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Salone");
                });

            modelBuilder.Entity("HaveASeat.Models.DipendenteServizio", b =>
                {
                    b.HasOne("HaveASeat.Models.Dipendente", "Dipendente")
                        .WithMany("ServiziOfferti")
                        .HasForeignKey("DipendenteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HaveASeat.Models.Servizio", "Servizio")
                        .WithMany("DipendenteServizi")
                        .HasForeignKey("ServizioId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Dipendente");

                    b.Navigation("Servizio");
                });

            modelBuilder.Entity("HaveASeat.Models.GiftCard", b =>
                {
                    b.HasOne("HaveASeat.Models.Salone", "Salone")
                        .WithMany()
                        .HasForeignKey("SaloneId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("HaveASeat.Models.ApplicationUser", "UsedByUser")
                        .WithMany()
                        .HasForeignKey("UsedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Salone");

                    b.Navigation("UsedByUser");
                });

            modelBuilder.Entity("HaveASeat.Models.Immagine", b =>
                {
                    b.HasOne("HaveASeat.Models.Salone", "Salone")
                        .WithMany("Immagini")
                        .HasForeignKey("SaloneId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Salone");
                });

            modelBuilder.Entity("HaveASeat.Models.Orario", b =>
                {
                    b.HasOne("HaveASeat.Models.Salone", "Salone")
                        .WithMany()
                        .HasForeignKey("SaloneId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HaveASeat.Models.Salone", null)
                        .WithMany("Orari")
                        .HasForeignKey("SaloneId1");

                    b.Navigation("Salone");
                });

            modelBuilder.Entity("HaveASeat.Models.OrarioDipendente", b =>
                {
                    b.HasOne("HaveASeat.Models.Dipendente", "Dipendente")
                        .WithMany("Orari")
                        .HasForeignKey("DipendenteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Dipendente");
                });

            modelBuilder.Entity("HaveASeat.Models.Recensione", b =>
                {
                    b.HasOne("HaveASeat.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Recensioni")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HaveASeat.Models.Dipendente", "Dipendente")
                        .WithMany("Recensioni")
                        .HasForeignKey("DipendenteId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("HaveASeat.Models.Salone", "Salone")
                        .WithMany("Recensioni")
                        .HasForeignKey("SaloneId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Dipendente");

                    b.Navigation("Salone");
                });

            modelBuilder.Entity("HaveASeat.Models.Salone", b =>
                {
                    b.HasOne("HaveASeat.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Saloni")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("HaveASeat.Models.SaloneAbbonamento", b =>
                {
                    b.HasOne("HaveASeat.Models.Abbonamento", "Abbonamento")
                        .WithMany()
                        .HasForeignKey("AbbonamentoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HaveASeat.Models.Salone", "Salone")
                        .WithMany("SaloneAbbonamenti")
                        .HasForeignKey("SaloneId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Abbonamento");

                    b.Navigation("Salone");
                });

            modelBuilder.Entity("HaveASeat.Models.SaloneCategoria", b =>
                {
                    b.HasOne("HaveASeat.Models.Categoria", "Categoria")
                        .WithMany()
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HaveASeat.Models.Salone", "Salone")
                        .WithMany("SaloneCategorie")
                        .HasForeignKey("SaloneId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Categoria");

                    b.Navigation("Salone");
                });

            modelBuilder.Entity("HaveASeat.Models.SalonePersonalizzazione", b =>
                {
                    b.HasOne("HaveASeat.Models.Salone", "Salone")
                        .WithOne("SalonePersonalizzazione")
                        .HasForeignKey("HaveASeat.Models.SalonePersonalizzazione", "SaloneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Salone");
                });

            modelBuilder.Entity("HaveASeat.Models.Servizio", b =>
                {
                    b.HasOne("HaveASeat.Models.Salone", "Salone")
                        .WithMany("Servizi")
                        .HasForeignKey("SaloneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Salone");
                });

            modelBuilder.Entity("HaveASeat.Models.Slot", b =>
                {
                    b.HasOne("HaveASeat.Models.Salone", "Salone")
                        .WithMany("Slots")
                        .HasForeignKey("SaloneId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Salone");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("HaveASeat.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("HaveASeat.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HaveASeat.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("HaveASeat.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HaveASeat.Models.ApplicationUser", b =>
                {
                    b.Navigation("Appuntamenti");

                    b.Navigation("Recensioni");

                    b.Navigation("Saloni");
                });

            modelBuilder.Entity("HaveASeat.Models.Dipendente", b =>
                {
                    b.Navigation("Appuntamenti");

                    b.Navigation("Orari");

                    b.Navigation("Recensioni");

                    b.Navigation("ServiziOfferti");
                });

            modelBuilder.Entity("HaveASeat.Models.Salone", b =>
                {
                    b.Navigation("Appuntamenti");

                    b.Navigation("Dipendenti");

                    b.Navigation("Immagini");

                    b.Navigation("Orari");

                    b.Navigation("Recensioni");

                    b.Navigation("SaloneAbbonamenti");

                    b.Navigation("SaloneCategorie");

                    b.Navigation("SalonePersonalizzazione");

                    b.Navigation("Servizi");

                    b.Navigation("Slots");
                });

            modelBuilder.Entity("HaveASeat.Models.Servizio", b =>
                {
                    b.Navigation("DipendenteServizi");
                });

            modelBuilder.Entity("HaveASeat.Models.Slot", b =>
                {
                    b.Navigation("Appuntamenti");
                });
#pragma warning restore 612, 618
        }
    }
}
