@* @model HaveASeat.Models.Salone *@
 @model HaveASeat.ViewModels.DashboardViewModel
@{
    Layout = "_DashboardLayout";
    var promozioniAttive = ViewBag.PromozioniAttive as List<HaveASeat.Models.Servizio> ?? new List<HaveASeat.Models.Servizio>();
}
@section Styles{
<link href="/css/ReportDashboard.css" rel="stylesheet" />
}
<!-- Header -->
<div class="header">
    <div>
        <h1 class="text-3xl font-bold text-gray-900 dark:text-gray-100">Dashboard</h1>
        <p class="text-2xl text-gray-600 dark:text-gray-400 mt-1">Bentornato <span> <strong>@ViewBag.NomeUtente</strong></span></p>
    </div>

    <div class="header-actions">
        @if (Model.SaloniUtente.Any())
        {
            <!-- Selettore Sedi -->
            <select id="sedeSelector" class="select select-bordered sede-selector mr-4">
                @foreach (var salone in Model.SaloniUtente)
                {
                    @if (salone.SaloneId == Model.SelectedSaloneId)
                    {
                        <option value="@salone.SaloneId" selected>
                            @salone.Nome - @salone.Citta
                        </option>
                    }
                    else
                    {
                        <option value="@salone.SaloneId">
                            @salone.Nome - @salone.Citta
                        </option>
                    }
                }
            </select>
        }
        <div class="dropdown dropdown-end mr-2">
            <label tabindex="0" class="btn btn-outline">
                <i class="fas fa-download"></i> Esporta
            </label>
            <ul tabindex="0" class="dropdown-content menu p-2 shadow bg-base-100 rounded-box w-52">
                <li><a onclick="exportDashboard('csv')"><i class="fas fa-file-csv"></i> Esporta CSV</a></li>
                <li><a onclick="exportDashboard('excel')"><i class="fas fa-file-excel"></i> Esporta Excel</a></li>
                <li><a onclick="exportDashboard('pdf')"><i class="fas fa-file-pdf"></i> Esporta PDF</a></li>
            </ul>
        </div>
@* 
        <button class="btn btn-outline" id="exportBtn">
            <i class="fas fa-download"></i> Esporta
        </button> *@
        <button class="btn btn-primary" onclick="window.location.href='@Url.Action("Dipendenti", "Partner")'">
            <i class="fas fa-plus"></i> Aggiungi staff
        </button>
    </div>
</div>
@if (!Model.SaloniUtente.Any())
{
    <!-- Messaggio per utenti senza sedi -->
    <div class="alert alert-info">
        <i class="fas fa-info-circle"></i>
        <span>Non hai ancora creato nessuna sede. Crea la tua prima sede per iniziare a utilizzare la dashboard.</span>
    </div>
}
else
{
    
<!-- Stats Cards -->
    <div class="dashboard-stats" id="statsContainer">
    <div class="stat-card">
        <div class="stat-card-header">
            <div class="stat-card-title">Prenotazioni Oggi</div>
            <div class="stat-card-icon icon-appointments">
                <i class="fas fa-calendar-check"></i>
            </div>
        </div>
            <div class="stat-card-value" id="prenotazioniOggi">@Model.Stats.PrenotazioniOggi</div>
            <div class="stat-card-change @(Model.Stats.IsPrenotazioniPositive ? "change-positive" : "change-negative")">
                <i class="fas fa-arrow-@(Model.Stats.IsPrenotazioniPositive ? "up" : "down")"></i>
                <span id="percPrenotazioni">@Math.Abs(Model.Stats.PercentualePrenotazioni)%</span> rispetto a ieri
        </div>
    </div>

    <div class="stat-card">
        <div class="stat-card-header">
            <div class="stat-card-title">Nuovi Clienti</div>
            <div class="stat-card-icon icon-clients">
                <i class="fas fa-users"></i>
            </div>
        </div>
            <div class="stat-card-value" id="nuoviClienti">@Model.Stats.NuoviClienti</div>
            <div class="stat-card-change @(Model.Stats.IsNuoviClientiPositive ? "change-positive" : "change-negative")">
                <i class="fas fa-arrow-@(Model.Stats.IsNuoviClientiPositive ? "up" : "down")"></i>
                <span id="percClienti">@Math.Abs(Model.Stats.PercentualeNuoviClienti)%</span> questa settimana
            </div>
    </div>

    <div class="stat-card">
        <div class="stat-card-header">
            <div class="stat-card-title">Incasso Giornaliero</div>
            <div class="stat-card-icon icon-revenue">
                <i class="fas fa-euro-sign"></i>
            </div>
        </div>
            <div class="stat-card-value" id="incassoGiornaliero">€@Model.Stats.IncassoGiornaliero.ToString("N0")</div>
            <div class="stat-card-change @(Model.Stats.IsIncassoPositive ? "change-positive" : "change-negative")">
                <i class="fas fa-arrow-@(Model.Stats.IsIncassoPositive ? "up" : "down")"></i>
                <span id="percIncasso">@Math.Abs(Model.Stats.PercentualeIncasso)%</span> rispetto a ieri
            </div>
    </div>

    <div class="stat-card">
        <div class="stat-card-header">
            <div class="stat-card-title">Servizi Completati</div>
            <div class="stat-card-icon icon-services">
                <i class="fas fa-clipboard-check"></i>
            </div>
        </div>
            <div class="stat-card-value" id="serviziCompletati">@Model.Stats.ServiziCompletati</div>
            <div class="stat-card-change @(Model.Stats.IsServiziPositive ? "change-positive" : "change-negative")">
                <i class="fas fa-arrow-@(Model.Stats.IsServiziPositive ? "up" : "down")"></i>
                <span id="percServizi">@Math.Abs(Model.Stats.PercentualeServizi)%</span> rispetto a ieri
            </div>
    </div>
        <div class="stat-card">
            <div class="stat-card-header">
                <div class="stat-card-title">Dipendenti</div>
                <div class="stat-card-icon icon-employees">
                    <i class="fas fa-user-tie"></i>
                </div>
            </div>
            <div class="stat-card-value" id="numeroDipendenti">@Model.Stats.NumeroDipendenti</div>
            <div class="stat-card-change change-neutral">
                <i class="fas fa-users"></i>
                <span>Staff totale</span>
            </div>
        </div>
        <div class="stat-card cursor-pointer hover:shadow-lg transition-shadow" onclick="showPromozioniModal()">
            <div class="stat-card-header">
                <div class="stat-card-title">Promozioni Attive</div>
                <div class="stat-card-icon" style="background: linear-gradient(135deg, #f59e0b 0%, #dc2626 100%);">
                    <i class="fas fa-tags"></i>
                </div>
            </div>
            <div class="stat-card-value" id="promozioniAttive">@Model.Stats.PromozioniAttive</div>
            <div class="stat-card-change @(Model.Stats.IsPromozioniPositive ? "change-positive" : "change-negative")">
                <i class="fas fa-arrow-@(Model.Stats.IsPromozioniPositive ? "up" : "down")"></i>
                <span id="percPromozioni">@Math.Abs(Model.Stats.PercentualePromozioni)%</span> rispetto a ieri
            </div>
            <div class="text-xs text-gray-500 mt-2">
                <i class="fas fa-hand-pointer"></i> Clicca per dettagli
            </div>
        </div>
</div>

<!-- Charts Section -->
<div class="charts-section">
    <div class="chart-container">
        <div class="chart-header">
                <div class="chart-title">Prenotazioni e Incassi - @Model.SaloneCorrente?.Nome</div>
            <div class="chart-duration">
                    <button class="duration-btn @(Model.PeriodoSelezionato == "giorno" ? "active" : "")" data-periodo="giorno">Giorno</button>
                    <button class="duration-btn @(Model.PeriodoSelezionato == "settimana" ? "active" : "")" data-periodo="settimana">Settimana</button>
                    <button class="duration-btn @(Model.PeriodoSelezionato == "mese" ? "active" : "")" data-periodo="mese">Mese</button>
            </div>
        </div>
        <div class="canvas-container">
            <canvas id="revenueChart"></canvas>
        </div>
    </div>

    <div class="chart-container top-services">
        <div class="chart-header">
            <div class="chart-title">Servizi Più Richiesti</div>
        </div>

            <div id="topServiziContainer">
                @foreach (var servizio in Model.TopServizi)
                {
                    <div class="service-item">
                        <div class="service-info">
                            <div class="service-name">@servizio.Nome</div>
                            <div class="service-bookings">@servizio.NumeroPrenotazioni prenotazioni</div>
                        </div>
                        <div class="service-revenue">€@servizio.IncassoTotale.ToString("N0")</div>
                    </div>
                }
            </div>
        </div>
    </div>

<!-- Appointments Section -->
<div class="section">
    <div class="section-title">
        <h2>Prenotazioni di Oggi</h2>
            <a href="@Url.Action("Calendario", "Partner")">Vedi tutte</a>
    </div>

    <div class="tabs">
            <div class="tab active" data-filter="tutti">Tutti</div>
            <div class="tab" data-filter="confermati">Confermati</div>
            <div class="tab" data-filter="inAttesa">In attesa</div>
            <div class="tab" data-filter="cancellati">Cancellati</div>
    </div>

    <div class="card">
        <div class="appointment-header">
            <div class="appointment-date-filter">
                <button class="btn btn-outline">
                    <i class="fas fa-calendar"></i> Oggi
                </button>
            </div>

            <div class="appointment-search">
                <i class="fas fa-search"></i>
                    <input type="text" placeholder="Cerca cliente o servizio..." id="searchAppointments">
            </div>

            <div class="appointment-actions">
                <button class="btn btn-outline">
                    <i class="fas fa-filter"></i> Filtro
                </button>
            </div>
        </div>

        <div class="appointment-list">
                @if (Model.AppuntamentiOggi.Any())
                {
                    <table class="appointment-table">
                        <thead>
                            <tr>
                                <th>Cliente</th>
                                <th>Servizio</th>
                                <th>Operatore</th>
                                <th>Orario</th>
                                <th>Prezzo</th>
                                <th>Stato</th>
                                <th>Azioni</th>
                            </tr>
                </thead>
                        <tbody id="appointmentsTableBody">
                            @foreach (var appuntamento in Model.AppuntamentiOggi)
                            {
                                <tr data-stato="@appuntamento.Stato.ToLower()">
                                    <td>
                                        <div class="client-name">@appuntamento.NomeCliente</div>
                                        <div class="client-info">@appuntamento.TelefonoCliente</div>
                                    </td>
                                    <td>@appuntamento.NomeServizio</td>
                                    <td>@appuntamento.NomeDipendente</td>
                                    <td>@appuntamento.OrarioInizio - @appuntamento.OrarioFine</td>
                                    <td>€@appuntamento.Prezzo</td>
                                    <td><span class="status @appuntamento.ClasseStato">@appuntamento.Stato</span></td>
                                    <td>
                                        <div class="appointment-actions-cell">
                                            <button class="action-btn" onclick="editAppointment('@appuntamento.AppuntamentoId')">
                                                <i class="fas fa-edit"></i>
                                            </button>
                                            <button class="action-btn" onclick="sendMessage('@appuntamento.AppuntamentoId')">
                                                <i class="fas fa-comment"></i>
                                            </button>
                                            <button class="action-btn" onclick="showAppointmentMenu('@appuntamento.AppuntamentoId')">
                                                <i class="fas fa-ellipsis-v"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
                else
                {
                    <div class="no-data-message">
                        <i class="fas fa-calendar-times fa-3x mb-3"></i>
                        <p>Nessun appuntamento programmato per oggi</p>
                    </div>
                }
        </div>
    </div>
</div>
}


    <!-- Modal - Visible only when TempData is not null -->
    @if (TempData["SelectedPianoId"] != null)
    {
        <div x-data="{ open: true }">
            <div class="modal modal-open" x-show="open">
            <div class="modal-box w-11/12 max-w-4xl bg-white/90 backdrop-blur-sm shadow-2xl border border-white/20 dark:bg-gray-800">
                <!-- Modal Header -->
                <div class="flex items-center justify-between mb-6 pb-4 border-b border-gradient-to-r from-purple-200 to-indigo-200">
                    <div class="flex items-center">
                        <div class="w-12 h-12 bg-gradient-to-br from-purple-600 to-indigo-600 rounded-xl flex items-center justify-center mr-4">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-4m-5 0H3m2 0h3M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4" />
                            </svg>
                        </div>
                        <div>
                            <h2 class="text-2xl font-bold bg-gradient-to-r from-purple-600 to-indigo-600 bg-clip-text text-transparent">Crea il tuo Salone</h2>
                            <p class="text-gray-600 dark:text-neutral-50">Configura i dettagli del tuo centro benessere</p>
                        </div>
                    </div>
                   
                        <button type="submit" name="ClearTempData" class="btn btn-sm btn-circle btn-ghost" x-on:click ="open = false">
                            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                            </svg>
                        </button>
                    </div>

                <!-- Stepper -->
                <ul class="steps mb-6">
                <li class="step step-primary px-3 dark:text-neutral-50" id="step1-indicator">Dati generali</li>
                <li class="step dark:text-neutral-50" id="step2-indicator">Dati fiscali</li>
                <li class="step dark:text-neutral-50" id="step3-indicator">Indirizzo</li>
                </ul>

                <!-- Modal Body -->
                <form method="post" action="/Partner/CreateSede" id="saloneForm" class="space-y-6">
                    <!-- STEP 1: Dati generali -->
                    <div id="step1">
                    <h3 class="text-lg font-semibold mb-4 dark:text-neutral-50">Informazioni Generali</h3>
                        <div class="form-control mb-3">
                        <label class="label dark:text-neutral-50">Nome Salone *</label>
                        <input asp-for="NuovoSalone.Nome" class="input input-bordered w-full"
                                   placeholder="Es. Beauty Center Roma" required />
                        </div>
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-3">
                            <div class="form-control">
                            <label class="label dark:text-neutral-50">Telefono *</label>
                                <input asp-for="NuovoSalone.Telefono" class="input input-bordered w-full"
                                       placeholder="Es. 3331234567" required />
                            </div>
                            <div class="form-control">
                            <label class="label dark:text-neutral-50">Email *</label>
                                <input asp-for="NuovoSalone.Email" class="input input-bordered w-full"
                                       placeholder="Es. info@beautycenter.it" required />
                            </div>
                        </div>
                        <div class="form-control mb-3">
                        <label class="label dark:text-neutral-50">Sito Web</label>
                            <input asp-for="NuovoSalone.SitoWeb" class="input input-bordered w-full"
                                   placeholder="Es. www.beautycenter.it" />
                        </div>
                        <div class="flex justify-end">
                            <button type="button"
                                    class="btn text-white bg-gradient-to-br from-purple-600 to-indigo-600"
                                    onclick="goToStep(2)">
                                Avanti
                            </button>
                        </div>
                    </div>

                    <!-- STEP 2: Dati fiscali -->
                    <div id="step2" class="hidden">
                    <h3 class="text-lg font-semibold mb-4 dark:text-neutral-50">Dati Fiscali</h3>
                        <div class="form-control mb-3">
                        <label class="label dark:text-neutral-50">Ragione Sociale *</label>
                            <input asp-for="NuovoSalone.RagioneSociale" class="input input-bordered w-full"
                                   placeholder="Es. Beauty Center Srl" required/>
                        </div>
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-3">
                            <div class="form-control">
                            <label class="label dark:text-neutral-50">Partita IVA *</label>
                                <input asp-for="NuovoSalone.PartitaIVA" class="input input-bordered w-full"
                                       placeholder="Es. 12345678901" required/>
                            </div>
                            <div class="form-control">
                            <label class="label dark:text-neutral-50">Codice SDI *</label>
                                <input asp-for="NuovoSalone.SDI" class="input input-bordered w-full"
                                       placeholder="Es. ABCDEF1" required/>
                            </div>
                        </div>
                        <div class="flex justify-between">
                            <button type="button"
                                    class="btn btn-outline text-purple-600 border border-purple-600 hover:text-white hover:bg-purple-600"
                                    onclick="goToStep(1)">
                                Indietro
                            </button>
                            <button type="button"
                                    class="btn text-white bg-gradient-to-br from-purple-600 to-indigo-600"
                                    onclick="goToStep(3)">
                                Avanti
                            </button>
                        </div>
                    </div>

                    <!-- STEP 3: Indirizzo -->
                    <div id="step3" class="hidden">
                    <h3 class="text-lg font-semibold mb-4 dark:text-neutral-50">Indirizzo Salone</h3>
                        <div class="form-control mb-3">
                        <label class="label dark:text-neutral-50">Indirizzo *</label>
                            <input asp-for="NuovoSalone.Indirizzo" class="input input-bordered w-full"
                                   placeholder="Es. Via Roma, 10" required />
                        </div>
                        <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-3">
                            <div class="form-control">
                            <label class="label dark:text-neutral-50">Città *</label>
                                <input asp-for="NuovoSalone.Citta" class="input input-bordered w-full"
                                       placeholder="Es. Roma" required />
                            </div>
                            <div class="form-control">
                            <label class="label dark:text-neutral-50">CAP *</label>
                                <input asp-for="NuovoSalone.CAP" class="input input-bordered w-full"
                                       placeholder="Es. 00100" required />
                            </div>
                            <div class="form-control">
                            <label class="label dark:text-neutral-50">Provincia *</label>
                                <input asp-for="NuovoSalone.Provincia" class="input input-bordered w-full"
                                       placeholder="Es. RM" required />
                            </div>
                        </div>
                        <div class="form-control mb-3">
                        <label class="label dark:text-neutral-50">Regione *</label>
                            <select asp-for="NuovoSalone.Regione" class="select select-bordered w-full dark:text-neutral-50" required>
                                <option value="">Seleziona Regione</option>
                                <option value="Abruzzo">Abruzzo</option>
                                <option value="Basilicata">Basilicata</option>
                                <option value="Calabria">Calabria</option>
                                <option value="Campania">Campania</option>
                                <option value="Emilia-Romagna">Emilia-Romagna</option>
                                <option value="Friuli-Venezia Giulia">Friuli-Venezia Giulia</option>
                                <option value="Lazio">Lazio</option>
                                <option value="Liguria">Liguria</option>
                                <option value="Lombardia">Lombardia</option>
                                <option value="Marche">Marche</option>
                                <option value="Molise">Molise</option>
                                <option value="Piemonte">Piemonte</option>
                                <option value="Puglia">Puglia</option>
                                <option value="Sardegna">Sardegna</option>
                                <option value="Sicilia">Sicilia</option>
                                <option value="Toscana">Toscana</option>
                                <option value="Trentino-Alto Adige">Trentino-Alto Adige</option>
                                <option value="Umbria">Umbria</option>
                                <option value="Valle d'Aosta">Valle d'Aosta</option>
                                <option value="Veneto">Veneto</option>
                            </select>
                        </div>
                        <div class="flex justify-between">
                            <button type="button"
                                    class="btn btn-outline text-purple-600 border border-purple-600 hover:text-white hover:bg-purple-600"                                 
                                    onclick="goToStep(2)">
                                Indietro
                            </button>
                            <button type="submit"
                                    class="btn text-white bg-gradient-to-br from-purple-600 to-indigo-600">
                                Crea Salone
                            </button>
                        </div>
                    </div>
                </form>
            </div>
        </div>
        </div>
    }
<!-- Modal Promozioni -->
<div id="promozioniModal" class="modal">
    <div class="modal-box w-11/12 max-w-3xl">
        <div class="flex items-center justify-between mb-4">
            <h3 class="font-bold text-xl flex items-center">
                <i class="fas fa-tags text-orange-500 mr-2"></i>
                Promozioni Attive
            </h3>
            <button class="btn btn-sm btn-circle btn-ghost" onclick="closePromozioniModal()">✕</button>
        </div>

        <div id="promozioniContent" class="space-y-3">
            <!-- Il contenuto verrà caricato dinamicamente -->
            <div class="flex justify-center items-center h-32">
                <span class="loading loading-spinner loading-lg"></span>
            </div>
        </div>

        <div class="modal-action">
            <button class="btn btn-outline" onclick="closePromozioniModal()">Chiudi</button>
            <button class="btn btn-primary" onclick="window.location.href='@Url.Action("Index", "Promotions")'">
                <i class="fas fa-plus mr-2"></i>Gestisci Promozioni
            </button>
        </div>
    </div>
    <form method="dialog" class="modal-backdrop">
        <button onclick="closePromozioniModal()">close</button>
    </form>
</div>

<!-- Template per le card delle promozioni -->
<template id="promozioneCardTemplate">
    <div class="card bg-base-100 shadow-lg border border-base-200">
        <div class="card-body">
            <div class="flex justify-between items-start">
                <div class="flex-1">
                    <h4 class="card-title text-lg"></h4>
                    <p class="text-sm text-gray-600 mt-1"></p>
                    <div class="flex gap-4 mt-3">
                        <div class="text-sm">
                            <span class="text-gray-500">Prezzo originale:</span>
                            <span class="line-through text-gray-400"></span>
                        </div>
                        <div class="text-sm">
                            <span class="text-gray-500">Prezzo promo:</span>
                            <span class="font-bold text-success"></span>
                        </div>
                        <div class="text-sm">
                            <span class="text-gray-500">Risparmio:</span>
                            <span class="font-bold text-primary"></span>
                        </div>
                    </div>
                </div>
                <div class="text-right">
                    <div class="badge badge-lg"></div>
                    <div class="text-xs mt-2 text-gray-500">
                        <i class="far fa-clock mr-1"></i>
                        <span></span>
                    </div>
                </div>
            </div>
        </div>
    </div>
</template>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="//unpkg.com/alpinejs" defer></script>
<script defer>
    function validateStep(stepNumber) {
        const currentStep = document.getElementById('step' + stepNumber);
        const requiredFields = currentStep.querySelectorAll('input[required], select[required]');

        // Usa la validazione nativa del browser
        for (let field of requiredFields) {
            if (!field.checkValidity()) {
                field.reportValidity(); // Mostra il tooltip nativo del browser
                return false;
            }
        }

        return true;
    }

    function goToStep(step) {
        // Se stiamo andando avanti (step > currentStep), valida prima
        const currentStepElement = document.querySelector('#saloneForm > div:not(.hidden)[id^="step"]');
        const currentStepNumber = currentStepElement ? parseInt(currentStepElement.id.replace('step', '')) : 1;

        if (step > currentStepNumber) {
            // Valida lo step corrente prima di procedere
            if (!validateStep(currentStepNumber)) {
                return; // Non procedere se la validazione fallisce
            }
        }

        // Nasconde tutti gli step
        document.querySelectorAll('#saloneForm > div[id^="step"]').forEach(div => div.classList.add('hidden'));
        // Mostra lo step desiderato
        document.getElementById('step' + step).classList.remove('hidden');
        // Aggiorna lo stepper DaisyUI
        document.querySelectorAll('.steps .step').forEach((li, idx) => {
            if (idx < step) li.classList.add('step-primary');
            else li.classList.remove('step-primary');
        });
    }

    // Validazione finale del form prima del submit
    function validateForm() {
        // Usa la validazione nativa del form
        const form = document.getElementById('saloneForm');
        return form.checkValidity();
    }

    // Inizializzazione
    document.addEventListener('DOMContentLoaded', function() {
        // Mostra lo step 1 all'avvio
        goToStep(1);

        // Aggiungi validazione al form submit
        const form = document.getElementById('saloneForm');
        if (form) {
            form.addEventListener('submit', function(e) {
                if (!validateForm()) {
                    e.preventDefault();
                    return false;
                }
            });
        }
    });
</script>

<script>
    let revenueChart;
    let currentSaloneId = '@Model.SelectedSaloneId';
    let currentPeriodo = '@Model.PeriodoSelezionato';

    // Inizializzazione
    document.addEventListener('DOMContentLoaded', function () {
        // Inizializza il grafico
        initializeChart();
         if (currentSaloneId) {
        checkPromozioniInScadenza();
    }

        // Event listener per il cambio sede
        document.getElementById('sedeSelector')?.addEventListener('change', function() {
            currentSaloneId = this.value;
            loadDashboardData();
        });

        // Event listener per il cambio periodo
        document.querySelectorAll('.duration-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                document.querySelectorAll('.duration-btn').forEach(b => b.classList.remove('active'));
                this.classList.add('active');
                currentPeriodo = this.dataset.periodo;
                loadDashboardData();
            });
        });

        // Event listener per i filtri appuntamenti
        document.querySelectorAll('.tab[data-filter]').forEach(tab => {
            tab.addEventListener('click', function() {
                document.querySelectorAll('.tab').forEach(t => t.classList.remove('active'));
                this.classList.add('active');
                filterAppointments(this.dataset.filter);
            });
        });

        // Event listener per la ricerca
        document.getElementById('searchAppointments')?.addEventListener('input', function() {
            searchAppointments(this.value);
        });

        // Event listener per export
        document.getElementById('exportBtn')?.addEventListener('click', function() {
            exportDashboard();
        });
    });

    function initializeChart() {
        const ctx = document.getElementById('revenueChart');
        if (!ctx) return;

        const chartData = @Html.Raw(Json.Serialize(Model.ChartData))

        revenueChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: chartData.labels,
                datasets: [{
                    label: 'Incassi (€)',
                    data: chartData.incassi,
                    borderColor: 'rgb(99, 102, 241)',
                    backgroundColor: 'rgba(99, 102, 241, 0.1)',
                    yAxisID: 'y-incassi',
                    tension: 0.4
                }, {
                    label: 'Prenotazioni',
                    data: chartData.prenotazioni,
                    borderColor: 'rgb(34, 197, 94)',
                    backgroundColor: 'rgba(34, 197, 94, 0.1)',
                    yAxisID: 'y-prenotazioni',
                    tension: 0.4
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                interaction: {
                    mode: 'index',
                    intersect: false,
                },
                scales: {
                    'y-incassi': {
                        type: 'linear',
                        display: true,
                        position: 'left',
                        ticks: {
                            callback: function(value) {
                                return '€' + value;
                            }
                        }
                    },
                    'y-prenotazioni': {
                        type: 'linear',
                        display: true,
                        position: 'right',
                        grid: {
                            drawOnChartArea: false,
                        }
                    }
                }
            }
        });
    }

    function loadDashboardData() {
        // Mostra loading
        showLoading();

        fetch(`/Partner/GetDashboardData?saloneId=${currentSaloneId}&periodo=${currentPeriodo}`)
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    updateStats(data.stats);
                    updateChart(data.chartData);
                    updateTopServizi(data.topServizi);
                    updateAppointments(data.appuntamenti);
                }
                hideLoading();
            })
            .catch(error => {
                console.error('Errore nel caricamento dei dati:', error);
                hideLoading();
            });
    }

     function updateStats(stats) {
        // Aggiorna prenotazioni
        document.getElementById('prenotazioniOggi').textContent = stats.prenotazioniOggi;
        document.getElementById('percPrenotazioni').textContent = Math.abs(stats.percentualePrenotazioni) + '%';
        updateStatChange('prenotazioni', stats.isPrenotazioniPositive);

        // Aggiorna clienti
        document.getElementById('nuoviClienti').textContent = stats.nuoviClienti;
        document.getElementById('percClienti').textContent = Math.abs(stats.percentualeNuoviClienti) + '%';
        updateStatChange('clienti', stats.isNuoviClientiPositive);

        // Aggiorna incasso
        document.getElementById('incassoGiornaliero').textContent = '€' + stats.incassoGiornaliero.toLocaleString('it-IT');
        document.getElementById('percIncasso').textContent = Math.abs(stats.percentualeIncasso) + '%';
        updateStatChange('incasso', stats.isIncassoPositive);

        // Aggiorna servizi
        document.getElementById('serviziCompletati').textContent = stats.serviziCompletati;
        document.getElementById('percServizi').textContent = Math.abs(stats.percentualeServizi) + '%';
        updateStatChange('servizi', stats.isServiziPositive);

        document.getElementById('numeroDipendenti').textContent = stats.numeroDipendenti;
        // // Aggiorna promozioni
         document.getElementById('promozioniAttive').textContent = stats.promozioniAttive;
         document.getElementById('percPromozioni').textContent = Math.abs(stats.percentualePromozioni) + '%';
         updateStatChange('promozioni', stats.isPromozioniPositive);

    }
    
    function updateStatChange(type, isPositive) {
        const elements = {
            'prenotazioni': document.querySelector('#prenotazioniOggi').closest('.stat-card').querySelector('.stat-card-change'),
            'clienti': document.querySelector('#nuoviClienti').closest('.stat-card').querySelector('.stat-card-change'),
            'incasso': document.querySelector('#incassoGiornaliero').closest('.stat-card').querySelector('.stat-card-change'),
            'servizi': document.querySelector('#serviziCompletati').closest('.stat-card').querySelector('.stat-card-change'),
            'promozioni': document.querySelector('#promozioniAttive').closest('.stat-card').querySelector('.stat-card-change')
        };

        const element = elements[type];
        if (element) {
            element.classList.remove('change-positive', 'change-negative');
            element.classList.add(isPositive ? 'change-positive' : 'change-negative');
            const icon = element.querySelector('i');
            icon.className = 'fas fa-arrow-' + (isPositive ? 'up' : 'down');
        }
    }

    function updateChart(chartData) {
        if (revenueChart) {
            revenueChart.data.labels = chartData.labels;
            revenueChart.data.datasets[0].data = chartData.incassi;
            revenueChart.data.datasets[1].data = chartData.prenotazioni;
            revenueChart.update();
        }
    }

    function updateTopServizi(servizi) {
        const container = document.getElementById('topServiziContainer');
        container.innerHTML = '';

        servizi.forEach(servizio => {
            container.innerHTML += `
                <div class="service-item">
                    <div class="service-info">
                        <div class="service-name">${servizio.nome}</div>
                        <div class="service-bookings">${servizio.numeroPrenotazioni} prenotazioni</div>
                    </div>
                    <div class="service-revenue">€${servizio.incassoTotale.toLocaleString('it-IT')}</div>
                </div>
            `;
        });
    }

    function updateAppointments(appuntamenti) {
        const tbody = document.getElementById('appointmentsTableBody');
        if (!tbody) return;

        if (appuntamenti.length === 0) {
            tbody.closest('.appointment-list').innerHTML = `
                <div class="no-data-message">
                    <i class="fas fa-calendar-times fa-3x mb-3"></i>
                    <p>Nessun appuntamento programmato per oggi</p>
                </div>
            `;
            return;
        }

        tbody.innerHTML = '';
        appuntamenti.forEach(app => {
            tbody.innerHTML += `
                <tr data-stato="${app.stato.toLowerCase()}">
                    <td>
                        <div class="client-name">${app.nomeCliente}</div>
                        <div class="client-info">${app.telefonoCliente}</div>
                    </td>
                    <td>${app.nomeServizio}</td>
                    <td>${app.nomeDipendente}</td>
                    <td>${app.orarioInizio} - ${app.orarioFine}</td>
                    <td>€${app.prezzo}</td>
                    <td><span class="status ${app.classeStato}">${app.stato}</span></td>
                    <td>
                        <div class="appointment-actions-cell">
                            <button class="action-btn" onclick="editAppointment('${app.appuntamentoId}')">
                                <i class="fas fa-edit"></i>
                            </button>
                            <button class="action-btn" onclick="sendMessage('${app.appuntamentoId}')">
                                <i class="fas fa-comment"></i>
                            </button>
                            <button class="action-btn" onclick="showAppointmentMenu('${app.appuntamentoId}')">
                                <i class="fas fa-ellipsis-v"></i>
                            </button>
                        </div>
                    </td>
                </tr>
            `;
        });
    }

    function filterAppointments(filter) {
        const rows = document.querySelectorAll('#appointmentsTableBody tr');
        rows.forEach(row => {
            if (filter === 'tutti') {
                row.style.display = '';
            } else {
                const stato = row.dataset.stato;
                row.style.display = stato === filter.toLowerCase() ? '' : 'none';
            }
        });
    }

    function searchAppointments(searchTerm) {
        const rows = document.querySelectorAll('#appointmentsTableBody tr');
        const term = searchTerm.toLowerCase();

        rows.forEach(row => {
            const text = row.textContent.toLowerCase();
            row.style.display = text.includes(term) ? '' : 'none';
        });
    }

    function showLoading() {
        document.querySelectorAll('.stat-card-value').forEach(el => {
            el.classList.add('stats-loading');
        });
    }

    function hideLoading() {
        document.querySelectorAll('.stat-card-value').forEach(el => {
            el.classList.remove('stats-loading');
        });
    }

     function exportDashboard(formato) {
        window.location.href = `/Partner/ExportDashboard?saloneId=${currentSaloneId}&periodo=${currentPeriodo}&formato=${formato}`;
    }

    // Funzioni placeholder per le azioni degli appuntamenti
    function editAppointment(id) {
        window.location.href = `/Partner/EditAppuntamento/${id}`;
    }

    function sendMessage(id) {
        // Implementare invio messaggio
        console.log('Invia messaggio per appuntamento:', id);
    }

    function showAppointmentMenu(id) {
        // Implementare menu contestuale
        console.log('Mostra menu per appuntamento:', id);
    }
</script>
<script>
    function showPromozioniModal() {
        const modal = document.getElementById('promozioniModal');
        modal.classList.add('modal-open');

        // Carica le promozioni
        loadPromozioniAttive();
    }

    function closePromozioniModal() {
        const modal = document.getElementById('promozioniModal');
        modal.classList.remove('modal-open');
    }

    function loadPromozioniAttive() {
        const content = document.getElementById('promozioniContent');

        // Mostra loading
        content.innerHTML = `
            <div class="flex justify-center items-center h-32">
                <span class="loading loading-spinner loading-lg"></span>
            </div>
        `;

        fetch(`/Partner/GetPromozioniAttive?saloneId=${currentSaloneId}`)
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    displayPromozioni(data);
                } else {
                    content.innerHTML = '<div class="alert alert-error">Errore nel caricamento delle promozioni</div>';
                }
            })
            .catch(error => {
                console.error('Errore:', error);
                content.innerHTML = '<div class="alert alert-error">Errore di connessione</div>';
            });
    }

    function displayPromozioni(data) {
        const content = document.getElementById('promozioniContent');

        if (data.promozioni.length === 0) {
            content.innerHTML = `
                <div class="text-center py-8">
                    <i class="fas fa-tags text-gray-300 text-5xl mb-4"></i>
                    <p class="text-gray-500">Nessuna promozione attiva al momento</p>
                </div>
            `;
            return;
        }

        // Header con riepilogo
        let html = `
            <div class="alert ${data.promozioniInScadenza > 0 ? 'alert-warning' : 'alert-info'} mb-4">
                <i class="fas ${data.promozioniInScadenza > 0 ? 'fa-exclamation-triangle' : 'fa-info-circle'}"></i>
                <div>
                    <h3>${data.totalePromozioni} promozioni attive</h3>
                    ${data.promozioniInScadenza > 0 ?
                        `<p class="text-sm">${data.promozioniInScadenza} in scadenza nei prossimi 3 giorni!</p>` :
                        ''}
                </div>
            </div>
        `;

        // Lista promozioni
        html += '<div class="space-y-3">';

        data.promozioni.forEach(promo => {
            const badgeClass = promo.inScadenza ? 'badge-warning' :
                              promo.giorniRimanenti <= 7 ? 'badge-info' : 'badge-success';
            const badgeIcon = promo.inScadenza ? 'fa-exclamation-triangle' : 'fa-clock';

            html += `
                <div class="card bg-base-100 shadow-lg border ${promo.inScadenza ? 'border-warning' : 'border-base-200'}">
                    <div class="card-body">
                        <div class="flex justify-between items-start">
                            <div class="flex-1">
                                <h4 class="card-title text-lg">${promo.nome}</h4>
                                <p class="text-sm text-gray-600 mt-1">${promo.descrizione || 'Nessuna descrizione'}</p>
                                <div class="flex gap-4 mt-3">
                                    <div class="text-sm">
                                        <span class="text-gray-500">Prezzo originale:</span>
                                        <span class="line-through text-gray-400">€${promo.prezzo.toFixed(2)}</span>
                                    </div>
                                    <div class="text-sm">
                                        <span class="text-gray-500">Prezzo promo:</span>
                                        <span class="font-bold text-success">€${promo.prezzoPromozione.toFixed(2)}</span>
                                    </div>
                                    <div class="text-sm">
                                        <span class="text-gray-500">Risparmio:</span>
                                        <span class="font-bold text-primary">€${promo.risparmio.toFixed(2)} (-${promo.percentualeSconto}%)</span>
                                    </div>
                                </div>
                                <div class="text-xs text-gray-500 mt-2">
                                    <i class="far fa-calendar mr-1"></i>
                                    Valida dal ${formatDate(promo.dataInizioPromozione)} al ${formatDate(promo.dataFinePromozione)}
                                </div>
                            </div>
                            <div class="text-right">
                                <div class="badge ${badgeClass} badge-lg">
                                    <i class="fas ${badgeIcon} mr-1"></i>
                                    ${promo.giorniRimanenti} giorni
                                </div>
                                ${promo.inScadenza ?
                                    '<div class="text-xs mt-2 text-warning font-semibold animate-pulse">In scadenza!</div>' :
                                    ''}
                            </div>
                        </div>
                    </div>
                </div>
            `;
        });

        html += '</div>';
        content.innerHTML = html;
    }

    function formatDate(dateString) {
        const date = new Date(dateString);
        return date.toLocaleDateString('it-IT', { day: '2-digit', month: '2-digit', year: 'numeric' });
    }

    // Funzione per verificare promozioni in scadenza all'avvio
    function checkPromozioniInScadenza() {
        fetch(`/Partner/GetPromozioniAttive?saloneId=${currentSaloneId}`)
            .then(response => response.json())
            .then(data => {
                if (data.success && data.promozioniInScadenza > 0) {
                    // Mostra una notifica toast
                    showNotificaScadenza(data.promozioniInScadenza);
                }
            });
    }

    function showNotificaScadenza(numero) {
        // Crea un toast notification
        const toast = document.createElement('div');
        toast.className = 'toast toast-top toast-end';
        toast.innerHTML = `
            <div class="alert alert-warning shadow-lg">
                <div>
                    <i class="fas fa-exclamation-triangle"></i>
                    <span>${numero} promozioni in scadenza!</span>
                </div>
                <button class="btn btn-sm btn-ghost" onclick="showPromozioniModal(); this.parentElement.parentElement.remove();">
                    Visualizza
                </button>
            </div>
        `;

        document.body.appendChild(toast);

        // Rimuovi dopo 5 secondi
        setTimeout(() => {
            toast.remove();
        }, 5000);
    }
</script>
