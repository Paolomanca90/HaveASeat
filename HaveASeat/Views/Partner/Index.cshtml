@model HaveASeat.ViewModels.DashboardViewModel
@{
    Layout = "_DashboardLayout";
    var promozioniAttive = ViewBag.PromozioniAttive as List<HaveASeat.Models.Servizio> ?? new List<HaveASeat.Models.Servizio>();
    var saloni = ViewBag.Saloni as List<HaveASeat.Models.Salone>;
    var hasMultipleSedi = ViewBag.HasMultipleSedi as bool? ?? false;
}
@section Styles{
<link href="/css/ReportDashboard.css" rel="stylesheet" />
}
<!-- Header -->
<div class="header">
    <div>
        <h1 class="text-3xl font-bold text-gray-900 dark:text-gray-100">Dashboard</h1>
        <p class="text-2xl text-gray-600 dark:text-gray-400 mt-1">Bentornato <span class="dark:text-gray-300"> <strong>@ViewBag.NomeUtente</strong></span></p>
        @if (ViewBag.HasMultipleSedi != null)
        {
            <div class="mt-2">
                <span class="inline-flex items-center px-2 py-1 rounded-full text-sm font-medium bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-400">
                    <i class="fas fa-info-circle mr-1"></i>
                    Hai @saloni?.Count sedi - Seleziona quella cui vuoi visionare i report
                </span>
            </div>
        }
    </div>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <div class="header-actions">
        @if (Model.SaloniUtente.Any())
        {
            <!-- Selettore Sedi -->
            <select id="sedeSelector" class="select select-bordered sede-selector mr-4 text-purple-100 bg-purple-600 dark:text-gray-300 bg-gray-800">
                @foreach (var salone in Model.SaloniUtente)
                {
                    @if (salone.SaloneId == Model.SelectedSaloneId)
                    {
                        <option value="@salone.SaloneId" data-nome="@salone.Nome" data-citta="@salone.Citta" selected>
                            @salone.Nome - @salone.Citta
                        </option>
                    }
                    else
                    {
                        <option value="@salone.SaloneId" data-nome="@salone.Nome" data-citta="@salone.Citta">
                            @salone.Nome - @salone.Citta
                        </option>
                    }
                }
            </select>
        }
        <div class="flex items-center space-x-3">
            <button onclick="exportData()" class="inline-flex items-center px-4 py-2 border border-gray-300 dark:border-gray-600 text-sm font-medium rounded-lg text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-800 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors">
                <i class="fas fa-download mr-2"></i>
                Esporta Dati
            </button>
        </div>
@* 
        <button class="btn btn-outline" id="exportBtn">
            <i class="fas fa-download"></i> Esporta
        </button> 
        <button class="btn btn-primary" onclick="window.location.href='@Url.Action("Dipendenti", "Partner")'">
            <i class="fas fa-plus"></i> Aggiungi staff
        </button> *@
    </div>
</div>
@if (!Model.SaloniUtente.Any())
{
    <!-- Messaggio per utenti senza sedi -->
    <div class="alert alert-info">
        <i class="fas fa-info-circle"></i>
        <span>Non hai ancora creato nessuna sede. Crea la tua prima sede per iniziare a utilizzare la dashboard.</span>
    </div>
}
else
{
    
<!-- Stats Cards -->
    <div class="dashboard-stats" id="statsContainer">
        <div class="stat-card dark:bg-gray-800">
        <div class="stat-card-header">
            <div class="stat-card-title text-sm font-medium text-gray-600 dark:text-gray-400">Prenotazioni Oggi</div>
                <div class="w-12 h-12 bg-sky-100 dark:bg-sky-900/30 rounded-lg flex items-center justify-center">
                    <i class="fas fa-calendar-check text-sky-600 dark:text-sky-400"></i>
                </div>
        </div>
            <div class="stat-card-value text-3xl font-bold text-gray-900 dark:text-gray-100" id="prenotazioniOggi">@Model.Stats.PrenotazioniOggi</div>
            <div class="stat-card-change text-sm mt-2 @(Model.Stats.IsPrenotazioniPositive ? "change-positive" : "change-negative")">
                <i class="fas fa-arrow-@(Model.Stats.IsPrenotazioniPositive ? "up" : "down")"></i>
                <span id="percPrenotazioni">@Math.Abs(Model.Stats.PercentualePrenotazioni)%</span> rispetto a ieri
        </div>
    </div>

        <div class="stat-card dark:bg-gray-800">
        <div class="stat-card-header">
                <div class="stat-card-title text-sm font-medium text-gray-600 dark:text-gray-400">Nuovi Clienti</div>
                <div class="w-12 h-12 bg-yellow-100 dark:bg-yellow-900/30 rounded-lg flex items-center justify-center">
                    <i class="fas fa-user-plus text-yellow-600 dark:text-yellow-400"></i>
                </div>
        </div>
            <div class="stat-card-value text-3xl font-bold text-gray-900 dark:text-gray-100" id="nuoviClienti">@Model.Stats.NuoviClienti</div>
            <div class="stat-card-change text-sm mt-2 @(Model.Stats.IsNuoviClientiPositive ? "change-positive" : "change-negative")">
                <i class="fas fa-arrow-@(Model.Stats.IsNuoviClientiPositive ? "up" : "down")"></i>
                <span id="percClienti">@Math.Abs(Model.Stats.PercentualeNuoviClienti)%</span> questa settimana
            </div>
    </div>

        <div class="stat-card dark:bg-gray-800">
        <div class="stat-card-header">
                <div class="stat-card-title text-sm font-medium text-gray-600 dark:text-gray-400">Incasso Giornaliero</div>
                <div class="w-12 h-12 bg-green-100 dark:bg-green-900/30 rounded-lg flex items-center justify-center">
                    <i class="fas fa-euro-sign text-green-600 dark:text-green-400"></i>
                </div>
        </div>
            <div class="stat-card-value text-3xl font-bold text-gray-900 dark:text-gray-100" id="incassoGiornaliero">€@Model.Stats.IncassoGiornaliero.ToString("N0")</div>
            <div class="stat-card-change text-sm mt-2 @(Model.Stats.IsIncassoPositive ? "change-positive" : "change-negative")">
                <i class="fas fa-arrow-@(Model.Stats.IsIncassoPositive ? "up" : "down")"></i>
                <span id="percIncasso">@Math.Abs(Model.Stats.PercentualeIncasso)%</span> rispetto a ieri
            </div>
    </div>

        <div class="stat-card dark:bg-gray-800">
        <div class="stat-card-header">
                <div class="stat-card-title text-sm font-medium text-gray-600 dark:text-gray-400">Servizi Completati</div>
                <div class="w-12 h-12 bg-teal-100 dark:bg-teal-900/30 rounded-lg flex items-center justify-center">
                    <i class="fas fa-clipboard-check text-teal-600 dark:text-teal-400"></i>
                </div>
        </div>
            <div class="stat-card-value text-3xl font-bold text-gray-900 dark:text-gray-100" id="serviziCompletati">@Model.Stats.ServiziCompletati</div>
            <div class="stat-card-change text-sm mt-2 @(Model.Stats.IsServiziPositive ? "change-positive" : "change-negative")">
                <i class="fas fa-arrow-@(Model.Stats.IsServiziPositive ? "up" : "down")"></i>
                <span id="percServizi">@Math.Abs(Model.Stats.PercentualeServizi)%</span> rispetto a ieri
            </div>
    </div>
        <div class="stat-card dark:bg-gray-800">
            <div class="stat-card-header">
                <div class="stat-card-title text-sm font-medium text-gray-600 dark:text-gray-400">Dipendenti</div>
                <div class="w-12 h-12 bg-blue-100 dark:bg-blue-900/30 rounded-lg flex items-center justify-center">
                    <i class="fas fa-users text-blue-600 dark:text-blue-400"></i>
                </div>
              
            </div>
            <div class="stat-card-value text-3xl font-bold text-gray-900 dark:text-gray-100" id="numeroDipendenti">@Model.Stats.NumeroDipendenti</div>
            <div class="stat-card-change change-neutral">

                <span class="text-sm text-gray-500 dark:text-gray-400 mt-2">Staff totale</span>
            </div>
        </div>
        <div class="stat-card dark:bg-gray-800 cursor-pointer hover:shadow-lg transition-shadow" onclick="showServiziModal()">
            <div class="stat-card-header">
                <div class="stat-card-title text-sm font-medium text-gray-600 dark:text-gray-400">Servizi</div>
                <div class="w-12 h-12 bg-purple-100 dark:bg-purple-900/30 rounded-lg flex items-center justify-center">
                    <i class="fas fa-cut text-purple-600 dark:text-purple-400"></i>
                </div>
            </div>
            <div class="stat-card-value text-3xl font-bold text-gray-900 dark:text-gray-100" id="numeroServizi">@Model.Stats.NumeroServizi</div>
            <div class="stat-card-change change-neutral">
                <span class="text-sm text-gray-500 dark:text-gray-400 mt-2">Servizi totali attivi</span>
            </div>
            <div class="text-sm text-gray-500 dark:text-gray-400 mt-2">
                <i class="fas fa-hand-pointer"></i> Clicca per dettagli
            </div>
        </div>
        <!---->
        <!-- Aggiungi questo modale dopo il modale delle promozioni -->
        <div id="serviziModal" class="modal">
            <div class="modal-box w-11/12 max-w-4xl">
                <div class="flex items-center justify-between mb-4">
                    <h3 class="font-bold text-xl flex items-center dark:text-neutral-50">
                        <i class="fas fa-cut text-purple-500 mr-2"></i>
                        Servizi Disponibili
                    </h3>
                    <button class="btn btn-sm btn-circle btn-ghost dark:text-neutral-50" onclick="closeServiziModal()">✕</button>
                </div>

                <!-- Riepilogo statistiche -->
                <div id="serviziStats" class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
                    <!-- Verrà popolato dinamicamente -->
                </div>

                <!-- Filtri -->
                <div class="flex flex-wrap gap-2 mb-4">
                    <button class="btn btn-sm btn-outline" onclick="filterServizi('tutti')">
                        <i class="fas fa-list mr-1"></i> Tutti
                    </button>
                    <button class="btn btn-sm btn-outline" onclick="filterServizi('promo')">
                        <i class="fas fa-tags mr-1"></i> In Promozione
                    </button>
                    <button class="btn btn-sm btn-outline" onclick="filterServizi('no-staff')">
                        <i class="fas fa-user-slash mr-1"></i> Senza Staff
                    </button>
                </div>

                <div id="serviziContent" class="space-y-3 max-h-96 overflow-y-auto">
                    <!-- Il contenuto verrà caricato dinamicamente -->
                    <div class="flex justify-center items-center h-32">
                        <span class="loading loading-spinner loading-lg"></span>
                    </div>
                </div>

                <div class="modal-action">
                    <button class="btn btn-outline dark:text-gray-400" onclick="closeServiziModal()">Chiudi</button>
                    <button class="btn btn-primary bg-purple-600" onclick="window.location.href='@Url.Action("Index", "Servizio")'">
                        <i class="fas fa-plus mr-2"></i>Gestisci Servizi
                    </button>
                </div>
            </div>
            <form method="dialog" class="modal-backdrop">
                <button onclick="closeServiziModal()">close</button>
            </form>
        </div>
        <!---->
        <div class="stat-card dark:bg-gray-800 cursor-pointer hover:shadow-lg transition-shadow" onclick="showPromozioniModal()">
            <div class="stat-card-header">
                <div class="stat-card-title text-sm font-medium text-gray-600 dark:text-gray-400">Promozioni Attive</div>
                <div class="w-12 h-12 bg-orange-100 dark:bg-orange-900/30 rounded-lg flex items-center justify-center">
                    <i class="fas fa-tags text-orange-600 dark:text-orange-400"></i>
                </div>
            </div>
            <div class="stat-card-value text-3xl font-bold text-gray-900 dark:text-gray-100" id="promozioniAttive">@Model.Stats.PromozioniAttive</div>
            <div class="stat-card-change text-sm mt-2 @(Model.Stats.IsPromozioniPositive ? "change-positive" : "change-negative")">
                <i class="fas fa-arrow-@(Model.Stats.IsPromozioniPositive ? "up" : "down")"></i>
                <span id="percPromozioni">@Math.Abs(Model.Stats.PercentualePromozioni)%</span> rispetto a ieri
            </div>
            <div class="text-sm text-gray-500 dark:text-gray-400 mt-2">
                <i class="fas fa-hand-pointer"></i> Clicca per dettagli
            </div>
        </div>
</div>

<!-- Charts Section -->
    <div class="charts-section">
        <div class="chart-container dark:bg-gray-800">
        <div class="chart-header grafico">
                <div class="chart-title dark:text-neutral-50 datiGrafico">Prenotazioni e Incassi</div>
            <div class="chart-duration">
                    <button class="duration-btn dark:text-neutral-50 @(Model.PeriodoSelezionato == "giorno" ? "active" : "")" data-periodo="giorno">Giorno</button>
                    <button class="duration-btn dark:text-neutral-50 @(Model.PeriodoSelezionato == "settimana" ? "active" : "")" data-periodo="settimana">Settimana</button>
                    <button class="duration-btn dark:text-neutral-50 @(Model.PeriodoSelezionato == "mese" ? "active" : "")" data-periodo="mese">Mese</button>
            </div>
        </div>
        <div class="canvas-container">
            <canvas id="revenueChart"></canvas>
        </div>
    </div>

        <div class="chart-container top-services dark:bg-gray-800">
        <div class="chart-header">
            <div class="chart-title dark:text-neutral-50">Servizi Più Richiesti</div>
        </div>

            <div id="topServiziContainer">
                @foreach (var servizio in Model.TopServizi)
                {
                    <div class="service-item">
                        <div class="service-info">
                            <div class="service-name dark:text-gray-300">@servizio.Nome</div>
                            <div class="service-bookings dark:text-gray-400">@servizio.NumeroPrenotazioni prenotazioni</div>
                        </div>
                        <div class="service-revenue dark:text-gray-300">€@servizio.IncassoTotale.ToString("N0")</div>
                    </div>
                }
            </div>
        </div>
    </div>

<!-- Appointments Section -->
    <div class="section dark:bg-gray-800">
        <div class="section-title">
            <h2 class="dark:text-neutral-50">Gestione Appuntamenti</h2>
            <div class="flex gap-2">
                <button class="btn btn-sm btn-outline" onclick="showCalendarModal()">
                    <i class="fas fa-calendar-alt"></i> Vista Calendario
                </button>
                <a class="dark:text-neutral-50" href="@Url.Action("Calendario", "Partner")">Vedi tutte</a>
            </div>
        </div>

        <!-- Filtri Data Rapidi -->
        <div class="flex flex-wrap gap-2 mb-4">
            <button class="btn btn-sm btn-primary" onclick="filterByDate('oggi')" id="btnOggi">
                Oggi
            </button>
            <button class="btn btn-sm btn-outline" onclick="filterByDate('domani')" id="btnDomani">
                Domani
            </button>
            <button class="btn btn-sm btn-outline" onclick="filterByDate('settimana')" id="btnSettimana">
                Questa Settimana
            </button>
            <input type="date" id="customDate" class="input input-sm input-bordered dark:bg-gray-700"
                   value="@DateTime.Today.ToString("yyyy-MM-dd")" onchange="filterByCustomDate(this.value)">
        </div>

        <div class="tabs">
            <div class="tab active" data-filter="tutti">Tutti <span class="badge badge-sm ml-1" id="countTutti">0</span></div>
            <div class="tab" data-filter="prenotato">Confermati <span class="badge badge-sm badge-success ml-1" id="countConfermati">0</span></div>
            <div class="tab" data-filter="inAttesa">In attesa <span class="badge badge-sm badge-warning ml-1" id="countAttesa">0</span></div>
            <div class="tab" data-filter="annullato">Cancellati <span class="badge badge-sm badge-error ml-1" id="countCancellati">0</span></div>
        </div>

        <div class="card dark:bg-gray-800">
            <div class="appointment-header">
                <div class="appointment-date-filter">
                    <span class="text-sm text-gray-600 dark:text-gray-400" id="currentDateLabel">
                        Appuntamenti di oggi
                    </span>
                </div>

                <div class="appointment-search dark:text-gray-200">
                    <i class="fas fa-search"></i>
                    <input type="text" placeholder="Cerca cliente, servizio o dipendente..." id="searchAppointments">
                </div>

                <div class="appointment-actions">
                    <button class="btn btn-outline dark:text-gray-500" onclick="toggleFilters()">
                        <i class="fas fa-filter"></i> Filtri Avanzati
                    </button>
                    <button class="btn btn-outline dark:text-gray-500" onclick="exportAppointments()">
                        <i class="fas fa-download"></i> Esporta
                    </button>
                </div>
            </div>

            <!-- Filtri Avanzati (nascosti di default) -->
            <div id="advancedFilters" class="hidden p-4 bg-gray-50 dark:bg-gray-700 rounded-lg mb-4">
                <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <div class="form-control">
                        <label class="label text-sm">
                            <span class="label-text dark:text-gray-300">Servizio</span>
                        </label>
                        <select id="filterServizio" class="select select-sm select-bordered dark:bg-gray-600" onchange="applyFilters()">
                            <option value="">Tutti i servizi</option>
                            <!-- Popolato dinamicamente -->
                        </select>
                    </div>
                    <div class="form-control">
                        <label class="label text-sm">
                            <span class="label-text dark:text-gray-300">Dipendente</span>
                        </label>
                        <select id="filterDipendente" class="select select-sm select-bordered dark:bg-gray-600" onchange="applyFilters()">
                            <option value="">Tutti i dipendenti</option>
                            <!-- Popolato dinamicamente -->
                        </select>
                    </div>
                    <div class="form-control">
                        <label class="label text-sm">
                            <span class="label-text dark:text-gray-300">Orario</span>
                        </label>
                        <select id="filterOrario" class="select select-sm select-bordered dark:bg-gray-600" onchange="applyFilters()">
                            <option value="">Tutti gli orari</option>
                            <option value="mattina">Mattina (8-12)</option>
                            <option value="pomeriggio">Pomeriggio (12-17)</option>
                            <option value="sera">Sera (17-20)</option>
                        </select>
                    </div>
                </div>
            </div>

            <div class="appointment-list">
                <div id="appointmentsContainer">
                    <!-- Contenuto dinamico -->
                </div>
            </div>
        </div>
    </div>

    <!-- Modal Vista Calendario -->
    <dialog id="calendarModal" class="modal">
        <div class="modal-box w-11/12 max-w-4xl">
            <h3 class="font-bold text-lg mb-4">Vista Calendario Appuntamenti</h3>
            <div id="calendarView">
                <!-- Calendar view sarà popolato dinamicamente -->
            </div>
            <div class="modal-action">
                <button class="btn" onclick="document.getElementById('calendarModal').close()">Chiudi</button>
            </div>
        </div>
        <form method="dialog" class="modal-backdrop">
            <button>close</button>
        </form>
    </dialog>
}


    <!-- Modal - Visible only when TempData is not null -->
    @if (TempData["SelectedPianoId"] != null)
    {
        <div x-data="{ open: true }">
            <div class="modal modal-open" x-show="open">
            <div class="modal-box w-11/12 max-w-4xl bg-white/90 backdrop-blur-sm shadow-2xl border border-white/20 dark:bg-gray-800">
                <!-- Modal Header -->
                <div class="flex items-center justify-between mb-6 pb-4 border-b border-gradient-to-r from-purple-200 to-indigo-200">
                    <div class="flex items-center">
                        <div class="w-12 h-12 bg-gradient-to-br from-purple-600 to-indigo-600 rounded-xl flex items-center justify-center mr-4">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-4m-5 0H3m2 0h3M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4" />
                            </svg>
                        </div>
                        <div>
                            <h2 class="text-2xl font-bold bg-gradient-to-r from-purple-600 to-indigo-600 bg-clip-text text-transparent">Crea il tuo Salone</h2>
                            <p class="text-gray-600 dark:text-neutral-50">Configura i dettagli del tuo centro benessere</p>
                        </div>
                    </div>
                   
                        <button type="submit" name="ClearTempData" class="btn btn-sm btn-circle btn-ghost" x-on:click ="open = false">
                            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                            </svg>
                        </button>
                    </div>

                <!-- Stepper -->
                <ul class="steps mb-6">
                <li class="step step-primary px-3 dark:text-neutral-50" id="step1-indicator">Dati generali</li>
                <li class="step dark:text-neutral-50" id="step2-indicator">Dati fiscali</li>
                <li class="step dark:text-neutral-50" id="step3-indicator">Indirizzo</li>
                </ul>

                <!-- Modal Body -->
                <form method="post" action="/Partner/CreateSedePrefix" id="saloneForm" class="space-y-6">
                    <!-- STEP 1: Dati generali -->
                    <div id="step1">
                    <h3 class="text-lg font-semibold mb-4 dark:text-neutral-50">Informazioni Generali</h3>
                        <div class="form-control mb-3">
                        <label class="label dark:text-neutral-50">Nome Salone *</label>
                        <input asp-for="NuovoSalone.Nome" class="input input-bordered w-full"
                                   placeholder="Es. Beauty Center Roma" required />
                        </div>
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-3">
                            <div class="form-control">
                            <label class="label dark:text-neutral-50">Telefono *</label>
                                <input asp-for="NuovoSalone.Telefono" class="input input-bordered w-full"
                                       placeholder="Es. 3331234567" required />
                            </div>
                            <div class="form-control">
                            <label class="label dark:text-neutral-50">Email *</label>
                                <input asp-for="NuovoSalone.Email" class="input input-bordered w-full"
                                       placeholder="Es. info@beautycenter.it" required />
                            </div>
                        </div>
                        <div class="form-control mb-3">
                        <label class="label dark:text-neutral-50">Sito Web</label>
                            <input asp-for="NuovoSalone.SitoWeb" class="input input-bordered w-full"
                                   placeholder="Es. www.beautycenter.it" />
                        </div>
                        <div class="flex justify-end">
                            <button type="button"
                                    class="btn text-white bg-gradient-to-br from-purple-600 to-indigo-600"
                                    onclick="goToStep(2)">
                                Avanti
                            </button>
                        </div>
                    </div>

                    <!-- STEP 2: Dati fiscali -->
                    <div id="step2" class="hidden">
                    <h3 class="text-lg font-semibold mb-4 dark:text-neutral-50">Dati Fiscali</h3>
                        <div class="form-control mb-3">
                        <label class="label dark:text-neutral-50">Ragione Sociale *</label>
                            <input asp-for="NuovoSalone.RagioneSociale" class="input input-bordered w-full"
                                   placeholder="Es. Beauty Center Srl" required/>
                        </div>
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-3">
                            <div class="form-control">
                            <label class="label dark:text-neutral-50">Partita IVA *</label>
                                <input asp-for="NuovoSalone.PartitaIVA" class="input input-bordered w-full"
                                       placeholder="Es. 12345678901" required/>
                            </div>
                            <div class="form-control">
                            <label class="label dark:text-neutral-50">Codice SDI *</label>
                                <input asp-for="NuovoSalone.SDI" class="input input-bordered w-full"
                                       placeholder="Es. ABCDEF1" required/>
                            </div>
                        </div>
                        <div class="flex justify-between">
                            <button type="button"
                                    class="btn btn-outline text-purple-600 border border-purple-600 hover:text-white hover:bg-purple-600"
                                    onclick="goToStep(1)">
                                Indietro
                            </button>
                            <button type="button"
                                    class="btn text-white bg-gradient-to-br from-purple-600 to-indigo-600"
                                    onclick="goToStep(3)">
                                Avanti
                            </button>
                        </div>
                    </div>

                    <!-- STEP 3: Indirizzo -->
                    <div id="step3" class="hidden">
                    <h3 class="text-lg font-semibold mb-4 dark:text-neutral-50">Indirizzo Salone</h3>
                        <div class="form-control mb-3">
                        <label class="label dark:text-neutral-50">Indirizzo *</label>
                            <input asp-for="NuovoSalone.Indirizzo" class="input input-bordered w-full"
                                   placeholder="Es. Via Roma, 10" required />
                        </div>
                        <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-3">
                            <div class="form-control">
                            <label class="label dark:text-neutral-50">Città *</label>
                                <input asp-for="NuovoSalone.Citta" class="input input-bordered w-full"
                                       placeholder="Es. Roma" required />
                            </div>
                            <div class="form-control">
                            <label class="label dark:text-neutral-50">CAP *</label>
                                <input asp-for="NuovoSalone.CAP" class="input input-bordered w-full"
                                       placeholder="Es. 00100" required />
                            </div>
                            <div class="form-control">
                            <label class="label dark:text-neutral-50">Provincia *</label>
                                <input asp-for="NuovoSalone.Provincia" class="input input-bordered w-full"
                                       placeholder="Es. RM" required />
                            </div>
                        </div>
                        <div class="form-control mb-3">
                        <label class="label dark:text-neutral-50">Regione *</label>
                            <select asp-for="NuovoSalone.Regione" class="select select-bordered w-full dark:text-neutral-50" required>
                                <option value="">Seleziona Regione</option>
                                <option value="Abruzzo">Abruzzo</option>
                                <option value="Basilicata">Basilicata</option>
                                <option value="Calabria">Calabria</option>
                                <option value="Campania">Campania</option>
                                <option value="Emilia-Romagna">Emilia-Romagna</option>
                                <option value="Friuli-Venezia Giulia">Friuli-Venezia Giulia</option>
                                <option value="Lazio">Lazio</option>
                                <option value="Liguria">Liguria</option>
                                <option value="Lombardia">Lombardia</option>
                                <option value="Marche">Marche</option>
                                <option value="Molise">Molise</option>
                                <option value="Piemonte">Piemonte</option>
                                <option value="Puglia">Puglia</option>
                                <option value="Sardegna">Sardegna</option>
                                <option value="Sicilia">Sicilia</option>
                                <option value="Toscana">Toscana</option>
                                <option value="Trentino-Alto Adige">Trentino-Alto Adige</option>
                                <option value="Umbria">Umbria</option>
                                <option value="Valle d'Aosta">Valle d'Aosta</option>
                                <option value="Veneto">Veneto</option>
                            </select>
                        </div>
                        <div class="flex justify-between">
                            <button type="button"
                                    class="btn btn-outline text-purple-600 border border-purple-600 hover:text-white hover:bg-purple-600"                                 
                                    onclick="goToStep(2)">
                                Indietro
                            </button>
                            <button type="submit"
                                    class="btn text-white bg-gradient-to-br from-purple-600 to-indigo-600">
                                Crea Salone
                            </button>
                        </div>
                    </div>
                </form>
            </div>
        </div>
        </div>
    }
<!-- Modal Promozioni -->
<div id="promozioniModal" class="modal">
    <div class="modal-box w-11/12 max-w-3xl">
        <div class="flex items-center justify-between mb-4">
            <h3 class="font-bold text-xl flex items-center dark:text-neutral-50">
                <i class="fas fa-tags text-orange-500 mr-2"></i>
                Promozioni Attive
            </h3>
            <button class="btn btn-sm btn-circle btn-ghost dark:text-neutral-50" onclick="closePromozioniModal()">✕</button>
        </div>

        <div id="promozioniContent" class="space-y-3">
            <!-- Il contenuto verrà caricato dinamicamente -->
            <div class="flex justify-center items-center h-32">
                <span class="loading loading-spinner loading-lg"></span>
            </div>
        </div>

        <div class="modal-action">
            <button class="btn btn-outline dark:text-gray-400" onclick="closePromozioniModal()">Chiudi</button>
            <button class="btn btn-primary bg-orange-500 dark:bg-orange-500" onclick="window.location.href='@Url.Action("Index", "Promotions")'">
                <i class="fas fa-plus mr-2"></i>Gestisci Promozioni
            </button>
        </div>
    </div>
    <form method="dialog" class="modal-backdrop">
        <button onclick="closePromozioniModal()">close</button>
    </form>
</div>

<!-- Template per le card delle promozioni -->
<template id="promozioneCardTemplate">
    <div class="card bg-base-100 shadow-lg border border-base-200">
        <div class="card-body">
            <div class="flex justify-between items-start">
                <div class="flex-1">
                    <h4 class="card-title text-lg"></h4>
                    <p class="text-sm text-gray-600 mt-1"></p>
                    <div class="flex gap-4 mt-3">
                        <div class="text-sm">
                            <span class="text-gray-500">Prezzo originale:</span>
                            <span class="line-through text-gray-400"></span>
                        </div>
                        <div class="text-sm">
                            <span class="text-gray-500">Prezzo promo:</span>
                            <span class="font-bold text-success"></span>
                        </div>
                        <div class="text-sm">
                            <span class="text-gray-500">Risparmio:</span>
                            <span class="font-bold text-primary"></span>
                        </div>
                    </div>
                </div>
                <div class="text-right">
                    <div class="badge badge-lg"></div>
                    <div class="text-xs mt-2 text-gray-500">
                        <i class="far fa-clock mr-1"></i>
                        <span></span>
                    </div>
                </div>
            </div>
        </div>
    </div>
</template>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="//unpkg.com/alpinejs" defer></script>
<script defer>
    function validateStep(stepNumber) {
        const currentStep = document.getElementById('step' + stepNumber);
        const requiredFields = currentStep.querySelectorAll('input[required], select[required]');

        // Usa la validazione nativa del browser
        for (let field of requiredFields) {
            if (!field.checkValidity()) {
                field.reportValidity(); // Mostra il tooltip nativo del browser
                return false;
            }
        }

        return true;
    }

    function goToStep(step) {
        // Se stiamo andando avanti (step > currentStep), valida prima
        const currentStepElement = document.querySelector('#saloneForm > div:not(.hidden)[id^="step"]');
        const currentStepNumber = currentStepElement ? parseInt(currentStepElement.id.replace('step', '')) : 1;

        if (step > currentStepNumber) {
            // Valida lo step corrente prima di procedere
            if (!validateStep(currentStepNumber)) {
                return; // Non procedere se la validazione fallisce
            }
        }

        // Nasconde tutti gli step
        document.querySelectorAll('#saloneForm > div[id^="step"]').forEach(div => div.classList.add('hidden'));
        // Mostra lo step desiderato
        document.getElementById('step' + step).classList.remove('hidden');
        // Aggiorna lo stepper DaisyUI
        document.querySelectorAll('.steps .step').forEach((li, idx) => {
            if (idx < step) li.classList.add('step-primary');
            else li.classList.remove('step-primary');
        });
    }

    // Validazione finale del form prima del submit
    function validateForm() {
        // Usa la validazione nativa del form
        const form = document.getElementById('saloneForm');
        return form.checkValidity();
    }

    // Inizializzazione
    document.addEventListener('DOMContentLoaded', function() {
        // Mostra lo step 1 all'avvio
        goToStep(1);

        // Aggiungi validazione al form submit
        const form = document.getElementById('saloneForm');
        if (form) {
            form.addEventListener('submit', function(e) {
                if (!validateForm()) {
                    e.preventDefault();
                    return false;
                }
            });
        }
    });
</script>

<script>
    let revenueChart;
    let currentSaloneId = '@Model.SelectedSaloneId';
    let currentPeriodo = '@Model.PeriodoSelezionato';

    // Inizializzazione
    document.addEventListener('DOMContentLoaded', function () {
        // Inizializza il grafico
        initializeChart();
         if (currentSaloneId) {
        checkPromozioniInScadenza();
            checkServiziSenzaStaff();
    }

        // Event listener per il cambio sede
        document.getElementById('sedeSelector')?.addEventListener('change', function() {
            currentSaloneId = this.value;
            updateSaloneBadgeAndTitle();
            loadDashboardData();
        });

        // Event listener per il cambio periodo
        document.querySelectorAll('.duration-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                document.querySelectorAll('.duration-btn').forEach(b => b.classList.remove('active'));
                this.classList.add('active');
                currentPeriodo = this.dataset.periodo;
                loadDashboardData();
            });
        });

        // Event listener per i filtri appuntamenti
        document.querySelectorAll('.tab[data-filter]').forEach(tab => {
            tab.addEventListener('click', function() {
                document.querySelectorAll('.tab').forEach(t => t.classList.remove('active'));
                this.classList.add('active');
                filterAppointments(this.dataset.filter);
            });
        });

        // Event listener per la ricerca
        document.getElementById('searchAppointments')?.addEventListener('input', function() {
            searchAppointments(this.value);
        });

    
    });

       

      function updateSaloneBadgeAndTitle() {
        const selector = document.getElementById('sedeSelector');
        if (!selector) return;

        const selectedOption = selector.options[selector.selectedIndex];
        const nomeSalone = selectedOption.getAttribute('data-nome');
        const cittaSalone = selectedOption.getAttribute('data-citta');

        // Aggiorna il badge sotto il messaggio di benvenuto
        const badgeContainer = document.querySelector('.header > div > div.mt-2');
        const badgeCharter = document.querySelector('.grafico > .datiGrafico');
         if (badgeCharter) {
            badgeCharter.innerHTML = `
                <span class="inline-flex items-center rounded-md bg-purple-50 px-2 py-1 text-sm font-medium text-purple-700 ring-1 ring-purple-700/10 ring-inset">
                    <i class="fas fa-store mr-2"></i>
                    Prenotazioni e Incassi di - ${nomeSalone} - ${cittaSalone}
                </span>
            `;
        }
        if (badgeContainer) {
            badgeContainer.innerHTML = `
                <span class="inline-flex items-center rounded-md bg-sky-100 dark:bg-sky-900/30 px-2 py-1 text-sm font-medium text-sky-600 dark:text-sky-400 ring-1 ring-blue-700/10 ring-inset">
                    <i class="fas fa-store mr-2"></i>
                    Stai visionando i report di: ${nomeSalone} - ${cittaSalone}
                </span>
            `;
        }

        // Aggiorna il titolo del grafico
        const chartTitle = document.getElementById('chartTitle');
        if (chartTitle) {
            chartTitle.textContent = `Prenotazioni e Incassi - ${nomeSalone}`;
        }
    }

    function initializeChart() {
        const ctx = document.getElementById('revenueChart');
        if (!ctx) return;

        const chartData = @Html.Raw(Json.Serialize(Model.ChartData))

        revenueChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: chartData.labels,
                datasets: [{
                    label: 'Incassi (€)',
                    data: chartData.incassi,
                    borderColor: 'rgb(99, 102, 241)',
                    backgroundColor: 'rgba(99, 102, 241, 0.1)',
                    yAxisID: 'y-incassi',
                    tension: 0.4
                }, {
                    label: 'Prenotazioni',
                    data: chartData.prenotazioni,
                    borderColor: 'rgb(34, 197, 94)',
                    backgroundColor: 'rgba(34, 197, 94, 0.1)',
                    yAxisID: 'y-prenotazioni',
                    tension: 0.4
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                interaction: {
                    mode: 'index',
                    intersect: false,
                },
                scales: {
                    'y-incassi': {
                        type: 'linear',
                        display: true,
                        position: 'left',
                        ticks: {
                            callback: function(value) {
                                return '€' + value;
                            }
                        }
                    },
                    'y-prenotazioni': {
                        type: 'linear',
                        display: true,
                        position: 'right',
                        grid: {
                            drawOnChartArea: false,
                        }
                    }
                }
            }
        });
    }

    function loadDashboardData() {
        // Mostra loading
        showLoading();

        fetch(`/Partner/GetDashboardData?saloneId=${currentSaloneId}&periodo=${currentPeriodo}`)
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    updateStats(data.stats);
                    updateChart(data.chartData);
                    updateTopServizi(data.topServizi);
                    updateAppointments(data.appuntamenti);
                }
                hideLoading();
            })
            .catch(error => {
                console.error('Errore nel caricamento dei dati:', error);
                hideLoading();
            });
    }

     function updateStats(stats) {
        // Aggiorna prenotazioni
        document.getElementById('prenotazioniOggi').textContent = stats.prenotazioniOggi;
        document.getElementById('percPrenotazioni').textContent = Math.abs(stats.percentualePrenotazioni) + '%';
        updateStatChange('prenotazioni', stats.isPrenotazioniPositive);

        // Aggiorna clienti
        document.getElementById('nuoviClienti').textContent = stats.nuoviClienti;
        document.getElementById('percClienti').textContent = Math.abs(stats.percentualeNuoviClienti) + '%';
        updateStatChange('clienti', stats.isNuoviClientiPositive);

        // Aggiorna incasso
        document.getElementById('incassoGiornaliero').textContent = '€' + stats.incassoGiornaliero.toLocaleString('it-IT');
        document.getElementById('percIncasso').textContent = Math.abs(stats.percentualeIncasso) + '%';
        updateStatChange('incasso', stats.isIncassoPositive);

        // Aggiorna servizi
        document.getElementById('serviziCompletati').textContent = stats.serviziCompletati;
        document.getElementById('percServizi').textContent = Math.abs(stats.percentualeServizi) + '%';
        updateStatChange('servizi', stats.isServiziPositive);

        document.getElementById('numeroDipendenti').textContent = stats.numeroDipendenti;
        document.getElementById('numeroServizi').textContent = stats.numeroServizi;
        // // Aggiorna promozioni
         document.getElementById('promozioniAttive').textContent = stats.promozioniAttive;
         document.getElementById('percPromozioni').textContent = Math.abs(stats.percentualePromozioni) + '%';
         updateStatChange('promozioni', stats.isPromozioniPositive);

    }
    
    function updateStatChange(type, isPositive) {
        const elements = {
            'prenotazioni': document.querySelector('#prenotazioniOggi').closest('.stat-card').querySelector('.stat-card-change'),
            'clienti': document.querySelector('#nuoviClienti').closest('.stat-card').querySelector('.stat-card-change'),
            'incasso': document.querySelector('#incassoGiornaliero').closest('.stat-card').querySelector('.stat-card-change'),
            'servizi': document.querySelector('#serviziCompletati').closest('.stat-card').querySelector('.stat-card-change'),
            'promozioni': document.querySelector('#promozioniAttive').closest('.stat-card').querySelector('.stat-card-change')
        };

        const element = elements[type];
        if (element) {
            element.classList.remove('change-positive', 'change-negative');
            element.classList.add(isPositive ? 'change-positive' : 'change-negative');
            const icon = element.querySelector('i');
            icon.className = 'fas fa-arrow-' + (isPositive ? 'up' : 'down');
        }
    }

    function updateChart(chartData) {
        if (revenueChart) {
            revenueChart.data.labels = chartData.labels;
            revenueChart.data.datasets[0].data = chartData.incassi;
            revenueChart.data.datasets[1].data = chartData.prenotazioni;
            revenueChart.update();
        }
    }

    function updateTopServizi(servizi) {
        const container = document.getElementById('topServiziContainer');
        container.innerHTML = '';

        servizi.forEach(servizio => {
            container.innerHTML += `
                <div class="service-item">
                    <div class="service-info">
                        <div class="service-name">${servizio.nome}</div>
                        <div class="service-bookings">${servizio.numeroPrenotazioni} prenotazioni</div>
                    </div>
                    <div class="service-revenue">€${servizio.incassoTotale.toLocaleString('it-IT')}</div>
                </div>
            `;
        });
    }

    // function updateAppointments(appuntamenti) {
    //     const tbody = document.getElementById('appointmentsTableBody');
    //     if (!tbody) return;

    //     if (appuntamenti.length === 0) {
    //         tbody.closest('.appointment-list').innerHTML = `
    //             <div class="no-data-message">
    //                 <i class="fas fa-calendar-times fa-3x mb-3"></i>
    //                 <p>Nessun appuntamento programmato per oggi</p>
    //             </div>
    //         `;
    //         return;
    //     }

    //     tbody.innerHTML = '';
    //     appuntamenti.forEach(app => {
    //         tbody.innerHTML += `
    //             <tr data-stato="${app.stato.toLowerCase()}">
    //                 <td>
    //                     <div class="client-name">${app.nomeCliente}</div>
    //                     <div class="client-info">${app.telefonoCliente}</div>
    //                 </td>
    //                 <td>${app.nomeServizio}</td>
    //                 <td>${app.nomeDipendente}</td>
    //                 <td>${app.orarioInizio} - ${app.orarioFine}</td>
    //                 <td>€${app.prezzo}</td>
    //                 <td><span class="status ${app.classeStato}">${app.stato}</span></td>
    //                 <td>
    //                     <div class="appointment-actions-cell">
    //                         <button class="action-btn" onclick="editAppointment('${app.appuntamentoId}')">
    //                             <i class="fas fa-edit"></i>
    //                         </button>
    //                         <button class="action-btn" onclick="sendMessage('${app.appuntamentoId}')">
    //                             <i class="fas fa-comment"></i>
    //                         </button>
    //                         <button class="action-btn" onclick="showAppointmentMenu('${app.appuntamentoId}')">
    //                             <i class="fas fa-ellipsis-v"></i>
    //                         </button>
    //                     </div>
    //                 </td>
    //             </tr>
    //         `;
    //     });
    // }

    // function filterAppointments(filter) {
    //     const rows = document.querySelectorAll('#appointmentsTableBody tr');
    //     rows.forEach(row => {
    //         if (filter === 'tutti') {
    //             row.style.display = '';
    //         } else {
    //             const stato = row.dataset.stato;
    //             row.style.display = stato === filter.toLowerCase() ? '' : 'none';
    //         }
    //     });
    // }

    // function searchAppointments(searchTerm) {
    //     const rows = document.querySelectorAll('#appointmentsTableBody tr');
    //     const term = searchTerm.toLowerCase();

    //     rows.forEach(row => {
    //         const text = row.textContent.toLowerCase();
    //         row.style.display = text.includes(term) ? '' : 'none';
    //     });
    // }

    function showLoading() {
        document.querySelectorAll('.stat-card-value').forEach(el => {
            el.classList.add('stats-loading');
        });
    }

    function hideLoading() {
        document.querySelectorAll('.stat-card-value').forEach(el => {
            el.classList.remove('stats-loading');
        });
    }

   
        function exportDashboard(formato) {
        const saloneId = currentSaloneId || '@Model.SelectedSaloneId';
        const periodo = currentPeriodo || '@Model.PeriodoSelezionato';

        // Crea un link temporaneo per il download
        const link = document.createElement('a');
        link.href = `/Partner/ExportDashboard?saloneId=${saloneId}&periodo=${periodo}&formato=${formato}`;
        link.style.display = 'none';
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    }
       function exportData() {
        Swal.fire({
            title: '📊 Esporta Dati Dashboard',
            html: `
                <div class="text-left space-y-4">
                    <p class="text-gray-600 dark:text-gray-400 mb-4">Seleziona il formato di esportazione:</p>
                    <div class="space-y-3">
                        <label class="flex items-center space-x-3 cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-700 p-3 rounded-lg transition-colors">
                            <input type="radio" name="exportFormat" value="excel" class="text-purple-600 focus:ring-purple-500" checked>
                            <span class="text-sm font-medium">📊 Excel (.xlsx)</span>
                            <span class="text-xs text-gray-500 ml-auto">Consigliato per analisi</span>
                        </label>
                        <label class="flex items-center space-x-3 cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-700 p-3 rounded-lg transition-colors">
                            <input type="radio" name="exportFormat" value="pdf" class="text-purple-600 focus:ring-purple-500">
                            <span class="text-sm font-medium">📑 PDF (.pdf)</span>
                            <span class="text-xs text-gray-500 ml-auto">Per stampa e condivisione</span>
                        </label>
                        <label class="flex items-center space-x-3 cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-700 p-3 rounded-lg transition-colors">
                            <input type="radio" name="exportFormat" value="csv" class="text-purple-600 focus:ring-purple-500">
                            <span class="text-sm font-medium">📄 CSV (.csv)</span>
                            <span class="text-xs text-gray-500 ml-auto">Per importazione dati</span>
                        </label>
                    </div>
                </div>
            `,
            showCancelButton: true,
            confirmButtonText: '<i class="fas fa-download mr-2"></i>Esporta',
            cancelButtonText: 'Annulla',
            confirmButtonColor: '#7c3aed',
            cancelButtonColor: '#6b7280',
            customClass: {
                popup: 'rounded-2xl',
                confirmButton: 'rounded-lg',
                cancelButton: 'rounded-lg'
            },
            showLoaderOnConfirm: true,
            preConfirm: () => {
                const selectedFormat = document.querySelector('input[name="exportFormat"]:checked').value;
                return selectedFormat;
            },
            allowOutsideClick: () => !Swal.isLoading()
        }).then((result) => {
            if (result.isConfirmed) {
                const format = result.value;

                // Mostra loading
                Swal.fire({
                    title: 'Generazione in corso...',
                    html: 'Il file è in preparazione',
                    allowOutsideClick: false,
                    didOpen: () => {
                        Swal.showLoading();
                    }
                });

                // Chiama la funzione di export esistente
                exportDashboard(format);

                // Simula il completamento dopo un breve delay
                setTimeout(() => {
                    Swal.fire({
                        icon: 'success',
                        title: '✅ Export Completato!',
                        text: 'Il file è stato scaricato con successo',
                        confirmButtonColor: '#7c3aed',
                        timer: 3000,
                        timerProgressBar: true
                    });
                }, 1500);
            }
        });
    }

        function exportDashboard(formato) {
        const saloneId = currentSaloneId || '@Model.SelectedSaloneId';
        const periodo = currentPeriodo || '@Model.PeriodoSelezionato';

        // Crea un link temporaneo per il download
        const link = document.createElement('a');
        link.href = `/Partner/ExportDashboard?saloneId=${saloneId}&periodo=${periodo}&formato=${formato}`;
        link.style.display = 'none';
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    }

    // Funzioni placeholder per le azioni degli appuntamenti
    function editAppointment(id) {
        window.location.href = `/Partner/EditAppuntamento/${id}`;
    }

    function sendMessage(id) {
        // Implementare invio messaggio
        console.log('Invia messaggio per appuntamento:', id);
    }

    function showAppointmentMenu(id) {
        // Implementare menu contestuale
        console.log('Mostra menu per appuntamento:', id);
    }
</script>
<script>
    function showPromozioniModal() {
        const modal = document.getElementById('promozioniModal');
        modal.classList.add('modal-open');

        // Carica le promozioni
        loadPromozioniAttive();
    }

    function closePromozioniModal() {
        const modal = document.getElementById('promozioniModal');
        modal.classList.remove('modal-open');
    }

    function loadPromozioniAttive() {
        const content = document.getElementById('promozioniContent');

        // Mostra loading
        content.innerHTML = `
            <div class="flex justify-center items-center h-32">
                <span class="loading loading-spinner loading-lg"></span>
            </div>
        `;

        fetch(`/Partner/GetPromozioniAttive?saloneId=${currentSaloneId}`)
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    displayPromozioni(data);
                } else {
                    content.innerHTML = '<div class="alert alert-error">Errore nel caricamento delle promozioni</div>';
                }
            })
            .catch(error => {
                console.error('Errore:', error);
                content.innerHTML = '<div class="alert alert-error">Errore di connessione</div>';
            });
    }

    function displayPromozioni(data) {
        const content = document.getElementById('promozioniContent');

        if (data.promozioni.length === 0) {
            content.innerHTML = `
                <div class="text-center py-8">
                    <i class="fas fa-tags text-orange-500 text-5xl mb-4"></i>
                    <p class="text-gray-500 text-lg">Nessuna promozione attiva al momento</p>
                </div>
            `;
            return;
        }

        // Header con riepilogo
        let html = `
            <div class="alert ${data.promozioniInScadenza > 0 ? 'alert-warning' : 'alert-info'} mb-4">
                <i class="fas ${data.promozioniInScadenza > 0 ? 'fa-exclamation-triangle' : 'fa-info-circle'}"></i>
                <div>
                    <h3>${data.totalePromozioni} promozioni attive</h3>
                    ${data.promozioniInScadenza > 0 ?
                        `<p class="text-sm">${data.promozioniInScadenza} in scadenza nei prossimi 3 giorni!</p>` :
                        ''}
                </div>
            </div>
        `;

        // Lista promozioni
        html += '<div class="space-y-3">';

        data.promozioni.forEach(promo => {
            const badgeClass = promo.inScadenza ? 'badge-warning' :
                              promo.giorniRimanenti <= 7 ? 'badge-info' : 'badge-success';
            const badgeIcon = promo.inScadenza ? 'fa-exclamation-triangle' : 'fa-clock';

            html += `
                <div class="card bg-base-100 shadow-lg border ${promo.inScadenza ? 'border-warning' : 'border-base-200'}">
                    <div class="card-body">
                        <div class="flex justify-between items-start">
                            <div class="flex-1">
                                <h4 class="card-title text-lg">${promo.nome}</h4>
                                <p class="text-sm text-gray-600 mt-1">${promo.descrizione || 'Nessuna descrizione'}</p>
                                <div class="flex gap-4 mt-3">
                                    <div class="text-sm">
                                        <span class="text-gray-500">Prezzo originale:</span>
                                        <span class="line-through text-gray-400">€${promo.prezzo.toFixed(2)}</span>
                                    </div>
                                    <div class="text-sm">
                                        <span class="text-gray-500">Prezzo promo:</span>
                                        <span class="font-bold text-success">€${promo.prezzoPromozione.toFixed(2)}</span>
                                    </div>
                                    <div class="text-sm">
                                        <span class="text-gray-500">Risparmio:</span>
                                        <span class="font-bold text-primary">€${promo.risparmio.toFixed(2)} (-${promo.percentualeSconto}%)</span>
                                    </div>
                                </div>
                                <div class="text-xs text-gray-500 mt-2">
                                    <i class="far fa-calendar mr-1"></i>
                                    Valida dal ${formatDate(promo.dataInizioPromozione)} al ${formatDate(promo.dataFinePromozione)}
                                </div>
                            </div>
                            <div class="text-right">
                                <div class="badge ${badgeClass} badge-lg">
                                    <i class="fas ${badgeIcon} mr-1"></i>
                                    ${promo.giorniRimanenti} giorni
                                </div>
                                ${promo.inScadenza ?
                                    '<div class="text-xs mt-2 text-warning font-semibold animate-pulse">In scadenza!</div>' :
                                    ''}
                            </div>
                        </div>
                    </div>
                </div>
            `;
        });

        html += '</div>';
        content.innerHTML = html;
    }

    function formatDate(dateString) {
        const date = new Date(dateString);
        return date.toLocaleDateString('it-IT', { day: '2-digit', month: '2-digit', year: 'numeric' });
    }

    // Funzione per verificare promozioni in scadenza all'avvio
    function checkPromozioniInScadenza() {
        fetch(`/Partner/GetPromozioniAttive?saloneId=${currentSaloneId}`)
            .then(response => response.json())
            .then(data => {
                if (data.success && data.promozioniInScadenza > 0) {
                    // Mostra una notifica toast
                    showNotificaScadenza(data.promozioniInScadenza);
                }
            });
    }

    function showNotificaScadenza(numero) {
        // Crea un toast notification
        const toast = document.createElement('div');
        toast.className = 'toast toast-top toast-end';
        toast.innerHTML = `
            <div class="alert alert-warning shadow-lg">
                <div>
                    <i class="fas fa-exclamation-triangle"></i>
                    <span>${numero} promozioni in scadenza!</span>
                </div>
                <button class="btn btn-sm btn-ghost" onclick="showPromozioniModal(); this.parentElement.parentElement.remove();">
                    Visualizza
                </button>
            </div>
        `;

        document.body.appendChild(toast);

        // Rimuovi dopo 5 secondi
        setTimeout(() => {
            toast.remove();
        }, 5000);
    }
</script>
<script>
    let serviziData = null;

      function showServiziModal() {
          const modal = document.getElementById('serviziModal');
          modal.classList.add('modal-open');

          // Carica i servizi
          loadServiziAttivi();
      }

      function closeServiziModal() {
          const modal = document.getElementById('serviziModal');
          modal.classList.remove('modal-open');
      }

      function loadServiziAttivi() {
          const content = document.getElementById('serviziContent');
          const stats = document.getElementById('serviziStats');

          // Mostra loading
          content.innerHTML = `
              <div class="flex justify-center items-center h-32">
                  <span class="loading loading-spinner loading-lg"></span>
              </div>
          `;
          stats.innerHTML = '';

          fetch(`/Partner/GetServiziAttivi?saloneId=${currentSaloneId}`)
              .then(response => response.json())
              .then(data => {
                  if (data.success) {
                      serviziData = data;
                      displayServiziStats(data);
                      displayServizi(data.servizi);
                  } else {
                      content.innerHTML = '<div class="alert alert-error">Errore nel caricamento dei servizi</div>';
                  }
              })
              .catch(error => {
                  console.error('Errore:', error);
                  content.innerHTML = '<div class="alert alert-error">Errore di connessione</div>';
              });
      }

      function displayServiziStats(data) {
          const stats = document.getElementById('serviziStats');

          stats.innerHTML = `
              <div class="stat bg-base-100 shadow rounded-lg">
                  <div class="stat-figure text-purple-600">
                      <i class="fas fa-list text-2xl"></i>
                  </div>
                  <div class="stat-title">Totale Servizi</div>
                  <div class="stat-value text-purple-600">${data.totaleServizi}</div>
              </div>
              <div class="stat bg-base-100 shadow rounded-lg">
                  <div class="stat-figure text-orange-600">
                      <i class="fas fa-tags text-2xl"></i>
                  </div>
                  <div class="stat-title">In Promozione</div>
                  <div class="stat-value text-orange-600">${data.serviziInPromozione}</div>
              </div>
              <div class="stat bg-base-100 shadow rounded-lg">
                  <div class="stat-figure text-green-600">
                      <i class="fas fa-euro-sign text-2xl"></i>
                  </div>
                  <div class="stat-title">Prezzo Medio</div>
                  <div class="stat-value text-green-600">€${data.prezzoMedio}</div>
              </div>
          `;
      }

      function displayServizi(servizi, filter = 'tutti') {
          const content = document.getElementById('serviziContent');

          if (servizi.length === 0) {
              content.innerHTML = `
                  <div class="text-center py-8">
                      <i class="fas fa-cut text-purple-500 text-5xl mb-4"></i>
                      <p class="text-gray-500 text-lg">Nessun servizio disponibile</p>
                  </div>
              `;
              return;
          }

          // Filtra i servizi se necessario
          let serviziFiltrati = servizi;
          if (filter === 'promo') {
              serviziFiltrati = servizi.filter(s => s.isPromotion);
          } else if (filter === 'no-staff') {
              serviziFiltrati = servizi.filter(s => s.numeroDipendenti === 0);
          }

          if (serviziFiltrati.length === 0) {
              content.innerHTML = `
                  <div class="text-center py-8">
                      <i class="fas fa-search text-gray-400 text-4xl mb-4"></i>
                      <p class="text-gray-500">Nessun servizio trovato per questo filtro</p>
                  </div>
              `;
              return;
          }

          let html = '<div class="space-y-3">';

          serviziFiltrati.forEach(servizio => {
              const hasStaff = servizio.numeroDipendenti > 0;
              const staffNames = servizio.dipendentiAssegnati
                  .map(d => `${d.nome} ${d.cognome}`)
                  .join(', ');

              html += `
                  <div class="card bg-base-100 shadow-lg border border-base-200 hover:shadow-xl transition-shadow">
                      <div class="card-body">
                          <div class="flex justify-between items-start">
                              <div class="flex-1">
                                  <div class="flex items-center gap-2 mb-2">
                                      <h4 class="card-title text-lg">${servizio.nome}</h4>
                                      ${servizio.isPromotion ?
                                          '<span class="badge badge-warning badge-sm"><i class="fas fa-tag mr-1"></i>Promo</span>' :
                                          ''}
                                      ${!hasStaff ?
                                          '<span class="badge badge-error badge-sm"><i class="fas fa-user-slash mr-1"></i>No Staff</span>' :
                                          ''}
                                  </div>

                                  <p class="text-sm text-gray-600 dark:text-gray-400 mb-2">
                                      ${servizio.descrizione || 'Nessuna descrizione disponibile'}
                                  </p>

                                  <div class="flex flex-wrap gap-4 text-sm">
                                      <div>
                                          <span class="text-gray-500">Durata:</span>
                                          <span class="font-medium">${servizio.durata} min</span>
                                      </div>
                                      <div>
                                          <span class="text-gray-500">Prezzo:</span>
                                          ${servizio.isPromotion ?
                                              `<span class="line-through text-gray-400">€${servizio.prezzo.toFixed(2)}</span>
                                               <span class="font-bold text-success ml-1">€${servizio.prezzoEffettivo.toFixed(2)}</span>
                                               <span class="badge badge-success badge-sm ml-1">-${servizio.percentualeSconto}%</span>` :
                                              `<span class="font-medium">€${servizio.prezzo.toFixed(2)}</span>`
                                          }
                                      </div>
                                  </div>

                                  ${hasStaff ? `
                                      <div class="mt-3 pt-3 border-t border-base-200">
                                          <div class="flex items-center text-sm">
                                              <i class="fas fa-users text-gray-500 mr-2"></i>
                                              <span class="text-gray-500">Staff assegnato:</span>
                                              <span class="ml-2 font-medium">${staffNames}</span>
                                              <span class="badge badge-info badge-sm ml-2">${servizio.numeroDipendenti}</span>
                                          </div>
                                      </div>
                                  ` : `
                                      <div class="mt-3 pt-3 border-t border-base-200">
                                          <div class="alert alert-warning py-2">
                                              <i class="fas fa-exclamation-triangle text-sm"></i>
                                              <span class="text-sm">Nessun dipendente assegnato a questo servizio</span>
                                          </div>
                                      </div>
                                  `}
                              </div>

                              <div class="flex flex-col gap-2">
                                  <button class="btn btn-sm btn-ghost" onclick="editServizio('${servizio.servizioId}')">
                                      <i class="fas fa-edit"></i>
                                  </button>
                                  <button class="btn btn-sm btn-ghost text-error" onclick="deleteServizio('${servizio.servizioId}')">
                                      <i class="fas fa-trash"></i>
                                  </button>
                              </div>
                          </div>
                      </div>
                  </div>
              `;
          });

          html += '</div>';
          content.innerHTML = html;
      }

      function filterServizi(filter) {
          if (serviziData && serviziData.servizi) {
              displayServizi(serviziData.servizi, filter);

              // Aggiorna stile bottoni
              document.querySelectorAll('#serviziModal .btn-outline').forEach(btn => {
                  btn.classList.remove('btn-active');
              });
              event.target.classList.add('btn-active');
          }
      }

      function editServizio(id) {
          window.location.href = `/Partner/EditServizio/${id}`;
      }

      function deleteServizio(id) {
          // Implementa la logica di cancellazione
          console.log('Elimina servizio:', id);
      }

      // Aggiungi anche un controllo all'avvio per i servizi senza staff
      function checkServiziSenzaStaff() {
          fetch(`/Partner/GetServiziAttivi?saloneId=${currentSaloneId}`)
              .then(response => response.json())
              .then(data => {
                  if (data.success) {
                      const serviziSenzaStaff = data.servizi.filter(s => s.numeroDipendenti === 0).length;
                      if (serviziSenzaStaff > 0) {
                          // Mostra una notifica toast
                          showNotificaServiziSenzaStaff(serviziSenzaStaff);
                      }
                  }
              });
      }

      function showNotificaServiziSenzaStaff(numero) {
          const toast = document.createElement('div');
          toast.className = 'toast toast-top toast-end';
          toast.innerHTML = `
              <div class="alert alert-info shadow-lg">
                  <div>
                      <i class="fas fa-info-circle"></i>
                      <span>${numero} servizi senza staff assegnato</span>
                  </div>
                  <button class="btn btn-sm btn-ghost" onclick="showServiziModal(); this.parentElement.parentElement.remove();">
                      Visualizza
                  </button>
              </div>
          `;

          document.body.appendChild(toast);

          setTimeout(() => {
              toast.remove();
          }, 5000);
      }</script>
<script>
    // Aggiungi queste funzioni al tuo script esistente

    let allAppointments = [];
    let currentDateFilter = 'oggi';
    let currentDate = new Date();

    // Funzione per caricare gli appuntamenti con filtro data
    async function loadAppointmentsByDate(dateFilter = 'oggi', customDate = null) {
        const saloneId = currentSaloneId || '@Model.SelectedSaloneId';

        // Calcola le date in base al filtro
        let startDate, endDate;
        const today = new Date();
        today.setHours(0, 0, 0, 0);

        switch(dateFilter) {
            case 'oggi':
                startDate = endDate = today;
                document.getElementById('currentDateLabel').textContent = 'Appuntamenti di oggi';
                break;
            case 'domani':
                startDate = endDate = new Date(today);
                startDate.setDate(startDate.getDate() + 1);
                document.getElementById('currentDateLabel').textContent = 'Appuntamenti di domani';
                break;
            case 'settimana':
                startDate = new Date(today);
                startDate.setDate(startDate.getDate() - startDate.getDay() + 1); // Lunedì
                endDate = new Date(startDate);
                endDate.setDate(endDate.getDate() + 6); // Domenica
                document.getElementById('currentDateLabel').textContent = 'Appuntamenti della settimana';
                break;
            case 'custom':
                startDate = endDate = new Date(customDate);
                document.getElementById('currentDateLabel').textContent = `Appuntamenti del ${startDate.toLocaleDateString('it-IT')}`;
                break;
        }

        try {
            const response = await fetch(`/Partner/GetAppuntamentiByDateRange?saloneId=${saloneId}&startDate=${startDate.toISOString()}&endDate=${endDate.toISOString()}`);
            const data = await response.json();

            if (data.success) {
                allAppointments = data.appuntamenti;
                populateFilters(data);
                updateAppointmentsList(allAppointments);
                updateCounts();
            }
        } catch (error) {
            console.error('Errore nel caricamento:', error);
        }
    }

    function filterByDate(type) {
        currentDateFilter = type;

        // Aggiorna stile bottoni
        document.querySelectorAll('.btn[id^="btn"]').forEach(btn => {
            btn.classList.remove('btn-primary');
            btn.classList.add('btn-outline');
        });

        if (type !== 'custom') {
            document.getElementById('btn' + type.charAt(0).toUpperCase() + type.slice(1)).classList.remove('btn-outline');
            document.getElementById('btn' + type.charAt(0).toUpperCase() + type.slice(1)).classList.add('btn-primary');
        }

        loadAppointmentsByDate(type);
    }

    function filterByCustomDate(date) {
        currentDateFilter = 'custom';
        document.querySelectorAll('.btn[id^="btn"]').forEach(btn => {
            btn.classList.remove('btn-primary');
            btn.classList.add('btn-outline');
        });
        loadAppointmentsByDate('custom', date);
    }

    function populateFilters(data) {
        // Popola filtro servizi
        const servizioSelect = document.getElementById('filterServizio');
        if (servizioSelect && data.servizi) {
            servizioSelect.innerHTML = '<option value="">Tutti i servizi</option>';
            data.servizi.forEach(servizio => {
                servizioSelect.innerHTML += `<option value="${servizio.id}">${servizio.nome}</option>`;
            });
        }

        // Popola filtro dipendenti
        const dipendenteSelect = document.getElementById('filterDipendente');
        if (dipendenteSelect && data.dipendenti) {
            dipendenteSelect.innerHTML = '<option value="">Tutti i dipendenti</option>';
            data.dipendenti.forEach(dipendente => {
                dipendenteSelect.innerHTML += `<option value="${dipendente.id}">${dipendente.nome}</option>`;
            });
        }
    }

    function updateAppointmentsList(appointments) {
        const container = document.getElementById('appointmentsContainer');

        if (!appointments || appointments.length === 0) {
            container.innerHTML = `
                <div class="no-data-message">
                    <i class="fas fa-calendar-times fa-3x mb-3"></i>
                    <p>Nessun appuntamento trovato per questa data</p>
                </div>
            `;
            return;
        }

        // Raggruppa per ora per una visualizzazione migliore
        const appointmentsByHour = {};
        appointments.forEach(app => {
            const hour = app.orarioInizio.split(':')[0];
            if (!appointmentsByHour[hour]) {
                appointmentsByHour[hour] = [];
            }
            appointmentsByHour[hour].push(app);
        });

        let html = '<div class="space-y-4">';

        Object.keys(appointmentsByHour).sort().forEach(hour => {
            html += `
                <div class="hour-group">
                    <h4 class="text-sm font-semibold text-gray-600 dark:text-gray-400 mb-2">
                        <i class="far fa-clock mr-1"></i>${hour}:00
                    </h4>
                    <div class="space-y-2">
            `;

            appointmentsByHour[hour].forEach(app => {
                html += createAppointmentCard(app);
            });

            html += '</div></div>';
        });

        html += '</div>';
        container.innerHTML = html;
    }

    function createAppointmentCard(app) {
        const statusClass = getStatusClass(app.stato);
        const statusLabel = getStatusLabel(app.stato);

        return `
            <div class="appointment-item bg-white dark:bg-gray-700 rounded-lg p-4 shadow-sm hover:shadow-md transition-shadow"
                 data-stato="${app.stato.toLowerCase()}"
                 data-servizio="${app.servizioId || ''}"
                 data-dipendente="${app.dipendenteId || ''}">
                <div class="flex justify-between items-start">
                    <div class="flex-1">
                        <div class="flex items-center gap-2 mb-1">
                            <span class="font-semibold text-gray-900 dark:text-gray-100">
                                ${app.orarioInizio} - ${app.orarioFine}
                            </span>
                            <span class="status-badge status-${statusClass} text-xs">
                                ${statusLabel}
                            </span>
                        </div>
                        <div class="text-sm text-gray-600 dark:text-gray-400">
                            <i class="fas fa-user mr-1"></i> ${app.nomeCliente}
                            ${app.telefonoCliente ? `<span class="ml-2"><i class="fas fa-phone mr-1"></i>${app.telefonoCliente}</span>` : ''}
                        </div>
                        <div class="text-sm text-gray-600 dark:text-gray-400 mt-1">
                            <i class="fas fa-cut mr-1"></i> ${app.nomeServizio}
                            <span class="ml-2"><i class="fas fa-euro-sign mr-1"></i>€${app.prezzo}</span>
                        </div>
                        ${app.nomeDipendente ? `
                            <div class="text-sm text-gray-600 dark:text-gray-400 mt-1">
                                <i class="fas fa-user-tie mr-1"></i> ${app.nomeDipendente}
                            </div>
                        ` : ''}
                        ${app.note ? `
                            <div class="text-sm text-gray-500 dark:text-gray-400 mt-2 italic">
                                <i class="fas fa-sticky-note mr-1"></i> ${app.note}
                            </div>
                        ` : ''}
                    </div>
                    <div class="flex gap-1">
                        <button class="btn btn-xs btn-ghost" onclick="viewAppointmentDetails('${app.appuntamentoId}')">
                            <i class="fas fa-eye"></i>
                        </button>
                        <button class="btn btn-xs btn-ghost" onclick="editAppointment('${app.appuntamentoId}')">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button class="btn btn-xs btn-ghost" onclick="sendMessage('${app.appuntamentoId}')">
                            <i class="fas fa-comment"></i>
                        </button>
                    </div>
                </div>
            </div>
        `;
    }

    function toggleFilters() {
        const filtersDiv = document.getElementById('advancedFilters');
        filtersDiv.classList.toggle('hidden');
    }

    function applyFilters() {
        const servizioFilter = document.getElementById('filterServizio').value;
        const dipendenteFilter = document.getElementById('filterDipendente').value;
        const orarioFilter = document.getElementById('filterOrario').value;
        const searchTerm = document.getElementById('searchAppointments').value.toLowerCase();
        const statoFilter = document.querySelector('.tab.active').dataset.filter;

        let filteredAppointments = allAppointments;

        // Applica filtri
        if (servizioFilter) {
            filteredAppointments = filteredAppointments.filter(app => app.servizioId === servizioFilter);
        }

        if (dipendenteFilter) {
            filteredAppointments = filteredAppointments.filter(app => app.dipendenteId === dipendenteFilter);
        }

        if (orarioFilter) {
            filteredAppointments = filteredAppointments.filter(app => {
                const hour = parseInt(app.orarioInizio.split(':')[0]);
                switch(orarioFilter) {
                    case 'mattina': return hour >= 8 && hour < 12;
                    case 'pomeriggio': return hour >= 12 && hour < 17;
                    case 'sera': return hour >= 17 && hour <= 20;
                    default: return true;
                }
            });
        }

        if (searchTerm) {
            filteredAppointments = filteredAppointments.filter(app =>
                app.nomeCliente.toLowerCase().includes(searchTerm) ||
                app.nomeServizio.toLowerCase().includes(searchTerm) ||
                (app.nomeDipendente && app.nomeDipendente.toLowerCase().includes(searchTerm)) ||
                (app.telefonoCliente && app.telefonoCliente.includes(searchTerm))
            );
        }

        if (statoFilter !== 'tutti') {
            filteredAppointments = filteredAppointments.filter(app =>
                app.stato.toLowerCase() === statoFilter.toLowerCase()
            );
        }

        updateAppointmentsList(filteredAppointments);
    }

    function updateCounts() {
        const counts = {
            tutti: allAppointments.length,
            confermati: allAppointments.filter(a => a.stato === 'Prenotato').length,
            attesa: allAppointments.filter(a => a.stato === 'InAttesa').length,
            cancellati: allAppointments.filter(a => a.stato === 'Annullato').length
        };

        document.getElementById('countTutti').textContent = counts.tutti;
        document.getElementById('countConfermati').textContent = counts.confermati;
        document.getElementById('countAttesa').textContent = counts.attesa;
        document.getElementById('countCancellati').textContent = counts.cancellati;
    }

    function getStatusClass(stato) {
        switch(stato) {
            case 'Prenotato': return 'completed';
            case 'InAttesa': return 'pending';
            case 'Annullato': return 'cancelled';
            default: return 'pending';
        }
    }

    function getStatusLabel(stato) {
        switch(stato) {
            case 'Prenotato': return 'Confermato';
            case 'InAttesa': return 'In Attesa';
            case 'Annullato': return 'Cancellato';
            default: return stato;
        }
    }

    function showCalendarModal() {
        const modal = document.getElementById('calendarModal');
        // Qui puoi integrare una libreria calendario come FullCalendar
        modal.showModal();
    }

    async function exportAppointments() {
        Swal.fire({
            title: 'Esporta Appuntamenti',
            html: `
                <div class="text-left">
                    <p class="mb-3">Esporta gli appuntamenti del periodo selezionato</p>
                    <select class="select select-bordered w-full" id="exportFormat">
                        <option value="excel">Excel (.xlsx)</option>
                        <option value="pdf">PDF</option>
                        <option value="csv">CSV</option>
                    </select>
                </div>
            `,
            showCancelButton: true,
            confirmButtonText: 'Esporta',
            cancelButtonText: 'Annulla',
            preConfirm: () => {
                const format = document.getElementById('exportFormat').value;
                return format;
            }
        }).then((result) => {
            if (result.isConfirmed) {
                const format = result.value;
                const params = new URLSearchParams({
                    saloneId: currentSaloneId,
                    formato: format,
                    periodo: currentDateFilter,
                    data: document.getElementById('customDate').value
                });

                window.location.href = `/Partner/ExportAppuntamentiGiornalieri?${params}`;
            }
        });
    }
        // Aggiungi event listeners
    document.addEventListener('DOMContentLoaded', function() {
        // Carica appuntamenti di oggi all'avvio
        loadAppointmentsByDate('oggi');

        // Event listener per la ricerca
        document.getElementById('searchAppointments').addEventListener('input', function() {
            applyFilters();
        });

        // Event listener per i tab stato
        document.querySelectorAll('.tab[data-filter]').forEach(tab => {
            tab.addEventListener('click', function() {
                document.querySelectorAll('.tab').forEach(t => t.classList.remove('active'));
                this.classList.add('active');
                applyFilters();
            });
        });
    });
</script>