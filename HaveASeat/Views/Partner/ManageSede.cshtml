@model HaveASeat.Models.Salone

@{
    Layout = "_DashboardLayout";
}

<!-- Header -->
<div class="flex flex-col lg:flex-row lg:items-center justify-between mb-8 space-y-4 lg:space-y-0">
    <div class="flex items-center space-x-4">
        <a href="/Partner/Sedi" class="inline-flex items-center justify-center w-10 h-10 bg-gray-100 dark:bg-gray-700 rounded-lg hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors">
            <i class="fas fa-arrow-left text-gray-600 dark:text-gray-300"></i>
        </a>
        <div>
            <h1 class="text-3xl font-bold text-gray-900 dark:text-gray-100">Gestisci @Model.Nome</h1>
            <p class="text-gray-600 dark:text-gray-400 mt-1">Configura servizi, staff, orari e impostazioni</p>
        </div>
    </div>

    <div class="flex items-center space-x-3">
        <a href="/Partner/SedeDetails/@Model.SaloneId" class="inline-flex items-center px-4 py-2 border border-gray-300 dark:border-gray-600 text-sm font-medium rounded-lg text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-800 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors">
            <i class="fas fa-eye mr-2"></i>
            Visualizza
        </a>
        <a href="/Partner/EditSede/@Model.SaloneId" class="inline-flex items-center px-4 py-2 border border-gray-300 dark:border-gray-600 text-sm font-medium rounded-lg text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-800 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors">
            <i class="fas fa-edit mr-2"></i>
            Modifica Sede
        </a>
    </div>
</div>

<!-- Quick Stats -->
<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
    <div class="bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm border border-gray-200 dark:border-gray-700">
        <div class="flex items-center justify-between">
            <div>
                <p class="text-sm font-medium text-gray-600 dark:text-gray-400">Servizi Attivi</p>
                <p class="text-3xl font-bold text-gray-900 dark:text-gray-100">@Model.Servizi.Count</p>
            </div>
            <div class="w-12 h-12 bg-purple-100 dark:bg-purple-900/30 rounded-lg flex items-center justify-center">
                <i class="fas fa-cut text-purple-600 dark:text-purple-400"></i>
            </div>
        </div>
        <p class="text-sm text-gray-500 dark:text-gray-400 mt-2">Servizi configurati</p>
    </div>

    <div class="bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm border border-gray-200 dark:border-gray-700">
        <div class="flex items-center justify-between">
            <div>
                <p class="text-sm font-medium text-gray-600 dark:text-gray-400">Staff</p>
                <p class="text-3xl font-bold text-gray-900 dark:text-gray-100">@Model.Dipendenti.Count</p>
            </div>
            <div class="w-12 h-12 bg-blue-100 dark:bg-blue-900/30 rounded-lg flex items-center justify-center">
                <i class="fas fa-users text-blue-600 dark:text-blue-400"></i>
            </div>
        </div>
        <p class="text-sm text-gray-500 dark:text-gray-400 mt-2">Membri del team</p>
    </div>

    <div class="bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm border border-gray-200 dark:border-gray-700">
        <div class="flex items-center justify-between">
            <div>
                <p class="text-sm font-medium text-gray-600 dark:text-gray-400">Orari Configurati</p>
                <p class="text-3xl font-bold text-gray-900 dark:text-gray-100">@Model.Orari.Count</p>
            </div>
            <div class="w-12 h-12 bg-green-100 dark:bg-green-900/30 rounded-lg flex items-center justify-center">
                <i class="fas fa-clock text-green-600 dark:text-green-400"></i>
            </div>
        </div>
        <p class="text-sm text-gray-500 dark:text-gray-400 mt-2">Giorni lavorativi</p>
    </div>

    <div class="bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm border border-gray-200 dark:border-gray-700">
        <div class="flex items-center justify-between">
            <div>
                <p class="text-sm font-medium text-gray-600 dark:text-gray-400">Slot Disponibili</p>
                <p class="text-3xl font-bold text-gray-900 dark:text-gray-100">@Model.Slots.Count</p>
            </div>
            <div class="w-12 h-12 bg-orange-100 dark:bg-orange-900/30 rounded-lg flex items-center justify-center">
                <i class="fas fa-calendar-alt text-orange-600 dark:text-orange-400"></i>
            </div>
        </div>
        <p class="text-sm text-gray-500 dark:text-gray-400 mt-2">Fasce orarie</p>
    </div>
</div>

<!-- Management Sections -->
<div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
    <!-- Servizi Section -->
    <div class="bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm border border-gray-200 dark:border-gray-700">
        <div class="flex items-center justify-between mb-6 pb-4 border-b border-gray-200 dark:border-gray-700">
            <div class="flex items-center">
                <div class="w-10 h-10 bg-purple-100 dark:bg-purple-900/30 rounded-lg flex items-center justify-center mr-3">
                    <i class="fas fa-cut text-purple-600 dark:text-purple-400"></i>
                </div>
                <div>
                    <h3 class="text-xl font-bold text-gray-900 dark:text-gray-100">Servizi</h3>
                    <p class="text-sm text-gray-600 dark:text-gray-400">Gestisci i servizi offerti</p>
                </div>
            </div>
            <button onclick="addService()" class="inline-flex items-center px-4 py-2 bg-purple-600 hover:bg-purple-700 text-white text-sm font-medium rounded-lg transition-colors">
                <i class="fas fa-plus mr-2"></i>
                Aggiungi
            </button>
        </div>

        @if (Model.Servizi.Any())
        {
            <div class="space-y-4 max-h-96 overflow-y-auto">
                @foreach (var servizio in Model.Servizi.Take(5))
                {
                    <div class="flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-700/50 rounded-lg border border-gray-200 dark:border-gray-600">
                        <div class="flex-1">
                            <div class="font-semibold text-gray-900 dark:text-gray-100">@servizio.Nome</div>
                            <div class="text-sm text-gray-500 dark:text-gray-400">@servizio.Descrizione</div>
                            <div class="flex items-center space-x-4 mt-2">
                                <span class="text-xs bg-purple-100 text-purple-800 dark:bg-purple-900/20 dark:text-purple-400 px-2 py-1 rounded-full">@servizio.Durata min</span>
                                <span class="text-lg font-bold text-green-600 dark:text-green-400">€@servizio.Prezzo.ToString("F2")</span>
                            </div>
                        </div>
                        <div class="flex items-center space-x-2">
                            <button onclick="editService('@servizio.ServizioId')" class="p-2 text-blue-600 hover:bg-blue-100 dark:hover:bg-blue-900/20 rounded-lg transition-colors">
                                <i class="fas fa-edit"></i>
                            </button>
                            <button onclick="deleteService('@servizio.ServizioId')" class="p-2 text-red-600 hover:bg-red-100 dark:hover:bg-red-900/20 rounded-lg transition-colors">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </div>
                }
            </div>
            @if (Model.Servizi.Count > 5)
            {
                <div class="mt-4 text-center">
                    <a href="/Partner/Servizi?saloneId=@Model.SaloneId" class="text-purple-600 hover:text-purple-700 text-sm font-medium">
                        Vedi tutti i @Model.Servizi.Count servizi <i class="fas fa-arrow-right ml-1"></i>
                    </a>
                </div>
            }
        }
        else
        {
            <div class="text-center py-8">
                <i class="fas fa-cut text-4xl text-gray-400 dark:text-gray-600 mb-4"></i>
                <p class="text-gray-500 dark:text-gray-400 mb-4">Nessun servizio configurato</p>
                <button onclick="addService()" class="inline-flex items-center px-4 py-2 bg-purple-600 hover:bg-purple-700 text-white text-sm font-medium rounded-lg transition-colors">
                    <i class="fas fa-plus mr-2"></i>
                    Aggiungi Primo Servizio
                </button>
            </div>
        }
    </div>

    <!-- Staff Section -->
    <div class="bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm border border-gray-200 dark:border-gray-700">
        <div class="flex items-center justify-between mb-6 pb-4 border-b border-gray-200 dark:border-gray-700">
            <div class="flex items-center">
                <div class="w-10 h-10 bg-blue-100 dark:bg-blue-900/30 rounded-lg flex items-center justify-center mr-3">
                    <i class="fas fa-users text-blue-600 dark:text-blue-400"></i>
                </div>
                <div>
                    <h3 class="text-xl font-bold text-gray-900 dark:text-gray-100">Staff</h3>
                    <p class="text-sm text-gray-600 dark:text-gray-400">Gestisci il tuo team</p>
                </div>
            </div>
            <button onclick="addStaff()" class="inline-flex items-center px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white text-sm font-medium rounded-lg transition-colors @(Model.Servizi.Any() ? "" : "opacity-50 cursor-not-allowed")
                    @(Model.Servizi.Any() ? "" : "tabindex='-1' aria-disabled='true'")">
                <i class="fas fa-user-plus mr-2"></i>
                Aggiungi
            </button>
        </div>

        @if (Model.Dipendenti.Any())
        {
            <div class="space-y-4 max-h-96 overflow-y-auto">
                @foreach (var dipendente in Model.Dipendenti.Take(5))
                {
                    <div class="flex items-center p-4 bg-gray-50 dark:bg-gray-700/50 rounded-lg border border-gray-200 dark:border-gray-600">
                        <div class="w-12 h-12 bg-gradient-to-br from-blue-500 to-purple-500 rounded-full flex items-center justify-center mr-4">
                            <i class="fas fa-user text-white"></i>
                        </div>
                        <div class="flex-1">
                            <div class="font-semibold text-gray-900 dark:text-gray-100">@dipendente.ApplicationUser.Nome @dipendente.ApplicationUser.Cognome</div>
                            <div class="text-sm text-gray-500 dark:text-gray-400">@dipendente.ApplicationUser.Email</div>
                            <div class="text-xs text-blue-600 dark:text-blue-400 font-medium">@dipendente.ServiziOfferti.Count servizi assegnati</div>
                        </div>
                        <div class="flex items-center space-x-2">
                            <button onclick="editStaff('@dipendente.DipendenteId')" class="p-2 text-blue-600 hover:bg-blue-100 dark:hover:bg-blue-900/20 rounded-lg transition-colors">
                                <i class="fas fa-edit"></i>
                            </button>
                            <button onclick="deleteStaff('@dipendente.DipendenteId')" class="p-2 text-red-600 hover:bg-red-100 dark:hover:bg-red-900/20 rounded-lg transition-colors">
                                <i class="fas fa-user-times"></i>
                            </button>
                        </div>
                    </div>
                }
            </div>
            @if (Model.Dipendenti.Count > 5)
            {
                <div class="mt-4 text-center">
                    <a href="/Partner/Staff?saloneId=@Model.SaloneId" class="text-blue-600 hover:text-blue-700 text-sm font-medium">
                        Vedi tutto lo staff <i class="fas fa-arrow-right ml-1"></i>
                    </a>
                </div>
            }
        }
        else
        {
            <div class="text-center py-8">
                <i class="fas fa-user-slash text-4xl text-gray-400 dark:text-gray-600 mb-4"></i>
                <p class="text-gray-500 dark:text-gray-400 mb-4">Nessun membro dello staff</p>
                <button onclick="addStaff()" class="inline-flex items-center px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white text-sm font-medium rounded-lg transition-colors @(Model.Servizi.Any() ? "" : "opacity-50 cursor-not-allowed")
                    @(Model.Servizi.Any() ? "" : "tabindex='-1' aria-disabled='true'")">
                    <i class="fas fa-user-plus mr-2"></i>
                    Aggiungi Primo Membro
                </button>
            </div>
            @if (!Model.Servizi.Any())
            {
                <div class="bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg p-4 w-1/2 mx-auto">
                    <div class="flex items-start space-x-3">
                        <i class="fas fa-exclamation-triangle text-yellow-500 mt-0.5"></i>
                        <div class="text-center">
                            <p class="text-yellow-800 dark:text-yellow-200 text-sm font-medium">Prima configura i servizi</p>
                            <p class="text-yellow-700 dark:text-yellow-300 text-xs mt-1">
                                Per aggiungere staff devi prima configurare almeno un servizio per questo salone.
                            </p>
                        </div>
                    </div>
                </div>
            }
        }
    </div>

    <!-- Orari Section -->
    <div class="bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm border border-gray-200 dark:border-gray-700">
        <div class="flex items-center justify-between mb-6 pb-4 border-b border-gray-200 dark:border-gray-700">
            <div class="flex items-center">
                <div class="w-10 h-10 bg-green-100 dark:bg-green-900/30 rounded-lg flex items-center justify-center mr-3">
                    <i class="fas fa-clock text-green-600 dark:text-green-400"></i>
                </div>
                <div>
                    <h3 class="text-xl font-bold text-gray-900 dark:text-gray-100">Orari di Apertura</h3>
                    <p class="text-sm text-gray-600 dark:text-gray-400">Configura gli orari di lavoro</p>
                </div>
            </div>
            <button onclick="editSchedule()" class="inline-flex items-center px-4 py-2 bg-green-600 hover:bg-green-700 text-white text-sm font-medium rounded-lg transition-colors">
                <i class="fas fa-edit mr-2"></i>
                Modifica
            </button>
        </div>

        @if (Model.Orari.Any())
        {
            <div class="space-y-3">
                @{
                    var giorni = new[] { "Lunedì", "Martedì", "Mercoledì", "Giovedì", "Venerdì", "Sabato", "Domenica" };
                }
                @for (int i = 0; i < 7; i++)
                {
                    var orario = Model.Orari.FirstOrDefault(o => (int)o.Giorno == i);
                    <div class="flex items-center justify-between py-2 border-b border-gray-100 dark:border-gray-700 last:border-b-0">
                        <span class="font-medium text-gray-700 dark:text-gray-300">@giorni[i]</span>
                        @if (orario != null)
                        {
                            <span class="text-sm text-gray-600 dark:text-gray-400">
                                @orario.Apertura.ToString(@"hh\:mm") - @orario.Chiusura.ToString(@"hh\:mm")
                            </span>
                        }
                        else
                        {
                            <span class="text-sm text-red-500">Chiuso</span>
                        }
                    </div>
                }
            </div>
        }
        else
        {
            <div class="text-center py-8">
                <i class="fas fa-clock text-4xl text-gray-400 dark:text-gray-600 mb-4"></i>
                <p class="text-gray-500 dark:text-gray-400 mb-4">Orari non configurati</p>
                <button onclick="editSchedule()" class="inline-flex items-center px-4 py-2 bg-green-600 hover:bg-green-700 text-white text-sm font-medium rounded-lg transition-colors">
                    <i class="fas fa-clock mr-2"></i>
                    Configura Orari
                </button>
            </div>
        }
    </div>

    <!-- Slot Section -->
    <div class="bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm border border-gray-200 dark:border-gray-700">
        <div class="flex items-center justify-between mb-6 pb-4 border-b border-gray-200 dark:border-gray-700">
            <div class="flex items-center">
                <div class="w-10 h-10 bg-orange-100 dark:bg-orange-900/30 rounded-lg flex items-center justify-center mr-3">
                    <i class="fas fa-calendar-alt text-orange-600 dark:text-orange-400"></i>
                </div>
                <div>
                    <h3 class="text-xl font-bold text-gray-900 dark:text-gray-100">Slot Prenotazioni</h3>
                    <p class="text-sm text-gray-600 dark:text-gray-400">Gestisci fasce orarie disponibili</p>
                </div>
            </div>
            <button onclick="addSlot()" class="inline-flex items-center px-4 py-2 bg-orange-600 hover:bg-orange-700 text-white text-sm font-medium rounded-lg transition-colors @(Model.Dipendenti.Any() ? "" : "opacity-50 cursor-not-allowed")
                    @(Model.Dipendenti.Any() ? "" : "tabindex='-1' aria-disabled='true'")">
                <i class="fas fa-plus mr-2"></i>
                Aggiungi
            </button>
        </div>

        @if (Model.Slots.Any())
        {
            <div class="space-y-4 max-h-96 overflow-y-auto">
                @foreach (var slot in Model.Slots.Where(s => s.IsAttivo).Take(5))
                {
                    <div class="flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-700/50 rounded-lg border border-gray-200 dark:border-gray-600">
                        <div class="flex-1">
                            <div class="font-semibold text-gray-900 dark:text-gray-100">
                                @slot.OraInizio.ToString(@"hh\:mm") - @slot.OraFine.ToString(@"hh\:mm")
                            </div>
                            <div class="text-sm text-gray-500 dark:text-gray-400">
                                Capacità: @slot.Capacita persone
                            </div>
                            <div class="text-xs text-orange-600 dark:text-orange-400 font-medium">
                                @(string.IsNullOrEmpty(slot.Note) ? "Slot generico" : slot.Note)
                            </div>
                        </div>
                        <div class="flex items-center space-x-2">
                            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium @(slot.IsAttivo ? "bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400" : "bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-400")">
                                @(slot.IsAttivo ? "Attivo" : "Non Attivo")
                            </span>
                            <button onclick="editSlot('@slot.SlotId')" class="p-2 text-orange-600 hover:bg-orange-100 dark:hover:bg-orange-900/20 rounded-lg transition-colors">
                                <i class="fas fa-edit"></i>
                            </button>
                            <button onclick="deleteSlot('@slot.SlotId')" class="p-2 text-red-600 hover:bg-red-100 dark:hover:bg-red-900/20 rounded-lg transition-colors">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="text-center py-8">
                <i class="fas fa-calendar-times text-4xl text-gray-400 dark:text-gray-600 mb-4"></i>
                <p class="text-gray-500 dark:text-gray-400 mb-4">Nessun slot configurato</p>
                <button onclick="addSlot()" class="inline-flex items-center px-4 py-2 bg-orange-600 hover:bg-orange-700 text-white text-sm font-medium rounded-lg transition-colors @(Model.Dipendenti.Any() ? "" : "opacity-50 cursor-not-allowed")
                    @(Model.Dipendenti.Any() ? "" : "tabindex='-1' aria-disabled='true'")">
                    <i class="fas fa-calendar-plus mr-2"></i>
                    Aggiungi Primo Slot
                </button>
            </div>
            @if (!Model.Dipendenti.Any())
            {
                <div class="bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg p-4 w-1/2 mx-auto">
                    <div class="flex items-start space-x-3">
                        <i class="fas fa-exclamation-triangle text-yellow-500 mt-0.5"></i>
                        <div class="text-center">
                            <p class="text-yellow-800 dark:text-yellow-200 text-sm font-medium">Prima configura i dipendenti</p>
                            <p class="text-yellow-700 dark:text-yellow-300 text-xs mt-1">
                                Per aggiungere slot devi prima configurare almeno un dipendente per questo salone.
                            </p>
                        </div>
                    </div>
                </div>
            }
        }
    </div>
</div>

<script>
    // Service management functions
    function addService() {
        Swal.fire({
            title: '✂️ Aggiungi Nuovo Servizio',
            html: `
                <div class="text-left space-y-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Nome Servizio *</label>
                        <input type="text" id="serviceName" class="w-full px-3 py-2 border border-gray-300 rounded-md" placeholder="Es. Taglio e Piega">
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Descrizione</label>
                        <textarea id="serviceDescription" class="w-full px-3 py-2 border border-gray-300 rounded-md" rows="3" placeholder="Descrizione del servizio"></textarea>
                    </div>
                    <div class="grid grid-cols-2 gap-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Prezzo (€) *</label>
                            <input type="number" id="servicePrice" class="w-full px-3 py-2 border border-gray-300 rounded-md" placeholder="25.00" step="0.01">
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Durata (min) *</label>
                            <input type="number" id="serviceDuration" class="w-full px-3 py-2 border border-gray-300 rounded-md" placeholder="60">
                        </div>
                    </div>
                </div>
            `,
            showCancelButton: true,
            confirmButtonText: '<i class="fas fa-save mr-2"></i>Salva',
            cancelButtonText: 'Annulla',
            confirmButtonColor: '#7c3aed',
            preConfirm: () => {
                const name = document.getElementById('serviceName').value;
                const price = document.getElementById('servicePrice').value;
                const duration = document.getElementById('serviceDuration').value;

                if (!name || !price || !duration) {
                    Swal.showValidationMessage('Compila tutti i campi obbligatori');
                    return false;
                }
                return { name, price, duration };
            }
        }).then((result) => {
            if (result.isConfirmed) {
                Swal.fire('✅ Servizio Aggiunto!', 'Il servizio è stato creato con successo', 'success');
            }
        });
    }

    function editService(serviceId) {
        Swal.fire({
            title: '✏️ Modifica Servizio',
            text: 'Reindirizzamento alla pagina di modifica servizio...',
            icon: 'info',
            confirmButtonColor: '#7c3aed'
        });
    }

    function deleteService(serviceId) {
        Swal.fire({
            title: '🗑️ Eliminare il servizio?',
            text: 'Questa azione non può essere annullata',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Elimina',
            cancelButtonText: 'Annulla',
            confirmButtonColor: '#ef4444'
        }).then((result) => {
            if (result.isConfirmed) {
                Swal.fire('✅ Servizio Eliminato!', 'Il servizio è stato rimosso', 'success');
            }
        });
    }

    // Staff management functions
    async function addStaff() {
        // Prima recupera i servizi disponibili per questo salone
        let servizi = [];
        try {
            const servicesResponse = await fetch(`/Staff/GetServizi?saloneId=${currentSaloneId}`);
            if (servicesResponse.ok) {
                servizi = await servicesResponse.json();
            }
        } catch (error) {
            console.error('Errore nel recupero servizi:', error);
        }

        // Genera HTML per i servizi
        const serviziHtml = `
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">Servizi Assegnati</label>
                <div class="max-h-32 overflow-y-auto border border-gray-300 rounded-md p-2 space-y-2">
                    ${servizi.map(servizio => `
                        <label class="flex items-center space-x-2 text-sm">
                            <input type="checkbox" name="serviziIds" value="${servizio.servizioId}" class="rounded">
                            <span>${servizio.nome} - €${servizio.prezzo} (${servizio.durata} min)</span>
                        </label>
                    `).join('')}
                </div>
                <small class="text-gray-500">I servizi possono essere modificati successivamente</small>
            </div>
        ` ;

        const { value: formValues } = await Swal.fire({
            title: '👤 Aggiungi Membro Staff',
            html: `
                <form id="staffForm" class="text-left space-y-4">
                    <div class="grid grid-cols-2 gap-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Nome *</label>
                            <input type="text"
                                   name="nome"
                                   class="w-full px-3 py-2 border border-gray-300 rounded-md"
                                   placeholder="Mario"
                                   required
                                   minlength="2"
                                   maxlength="50">
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Cognome *</label>
                            <input type="text"
                                   name="cognome"
                                   class="w-full px-3 py-2 border border-gray-300 rounded-md"
                                   placeholder="Rossi"
                                   required
                                   minlength="2"
                                   maxlength="50">
                        </div>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Email *</label>
                        <input type="email"
                               name="email"
                               class="w-full px-3 py-2 border border-gray-300 rounded-md"
                               placeholder="mario.rossi@esempio.com"
                               required
                               maxlength="100">
                        <small class="text-gray-500">Se l'utente non esiste, verrà creato automaticamente</small>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Telefono</label>
                        <input type="tel"
                               name="telefono"
                               class="w-full px-3 py-2 border border-gray-300 rounded-md"
                               placeholder="+39 333 123 4567"
                               pattern="[\+]?[0-9\s\-\(\)]+"
                               maxlength="20">
                    </div>
                    ${serviziHtml}
                </form>
            `,
            showCancelButton: true,
            confirmButtonText: '<i class="fas fa-user-plus mr-2"></i>Aggiungi',
            cancelButtonText: 'Annulla',
            confirmButtonColor: '#3b82f6',
            focusConfirm: false,
            width: '600px',
            preConfirm: () => {
                const form = document.getElementById('staffForm');

                // Validazione nativa del browser
                if (!form.checkValidity()) {
                    form.reportValidity();
                    return false;
                }

                // Raccolta dati con FormData
                const formData = new FormData(form);

                // Gestione servizi selezionati
                const serviziIds = [];
                const checkboxes = form.querySelectorAll('input[name="serviziIds"]:checked');
                checkboxes.forEach(cb => serviziIds.push(cb.value));

                return {
                    nome: formData.get('nome'),
                    cognome: formData.get('cognome'),
                    email: formData.get('email'),
                    telefono: formData.get('telefono') || '',
                    serviziIds: serviziIds
                };
            }
        });

        if (formValues) {
            try {
                // Mostra loading
                Swal.fire({
                    title: 'Aggiunta in corso...',
                    text: 'Creazione del nuovo membro staff',
                    allowOutsideClick: false,
                    allowEscapeKey: false,
                    showConfirmButton: false,
                    didOpen: () => {
                        Swal.showLoading();
                    }
                });

                // Prepara FormData per invio come form POST
                const formData = new FormData();
                formData.append('nome', formValues.nome);
                formData.append('cognome', formValues.cognome);
                formData.append('email', formValues.email);
                formData.append('telefono', formValues.telefono);

                // Aggiungi servizi
                formValues.serviziIds.forEach(id => {
                    formData.append('serviziIds', id);
                });

                // Aggiungi token CSRF
                const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
                formData.append('__RequestVerificationToken', token);

                // Chiamata API
                const response = await fetch(`/Staff/Create?saloneId=${currentSaloneId}`, {
                    method: 'POST',
                    body: formData
                });

                if (response.ok) {
                    // Controlla se la risposta è un redirect (successo)
                    if (response.redirected || response.url.includes('/Staff/Index')) {
                        // Successo - il controller ha fatto redirect
                        await Swal.fire({
                            icon: 'success',
                            title: '✅ Staff Aggiunto!',
                            text: 'Il membro dello staff è stato aggiunto con successo',
                            confirmButtonColor: '#10b981',
                            timer: 3000,
                            timerProgressBar: true
                        });

                        // Ricarica la pagina o aggiorna la lista
                        if (typeof loadStaffList === 'function') {
                            loadStaffList();
                        } else {
                            location.reload();
                        }
                    } else {
                        // Probabilmente ci sono errori di validazione
                        const text = await response.text();
                        if (text.includes('ModelState') || text.includes('error')) {
                            await Swal.fire({
                                icon: 'error',
                                title: 'Errori di Validazione',
                                text: 'Controlla i dati inseriti e riprova',
                                confirmButtonColor: '#ef4444'
                            });
                        }
                    }
                } else {
                    // Errore HTTP
                    await Swal.fire({
                        icon: 'error',
                        title: 'Errore Server',
                        text: `Errore ${response.status}: ${response.statusText}`,
                        confirmButtonColor: '#ef4444'
                    });
                }

            } catch (error) {
                console.error('Errore durante l\'aggiunta dello staff:', error);

                await Swal.fire({
                    icon: 'error',
                    title: 'Errore di Connessione',
                    text: 'Impossibile completare l\'operazione. Controlla la connessione e riprova.',
                    confirmButtonColor: '#ef4444'
                });
            }
        }
    }

    // Funzione di utilità per recuperare servizi (opzionale - se preferisci endpoint separato)
    async function getServiziForSalone(saloneId) {
        try {
            const response = await fetch(`/Staff/GetServizi?saloneId=${saloneId}`);
            if (response.ok) {
                return await response.json();
            }
        } catch (error) {
            console.error('Errore nel recupero servizi:', error);
        }
        return [];
    }

    function editStaff(staffId) {
        Swal.fire({
            title: '✏️ Modifica Staff',
            text: 'Reindirizzamento alla pagina di modifica staff...',
            icon: 'info',
            confirmButtonColor: '#3b82f6'
        });
    }

    function deleteStaff(staffId) {
        Swal.fire({
            title: '🗑️ Rimuovere dal team?',
            text: 'Il membro non potrà più accedere alla gestione della sede',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Rimuovi',
            cancelButtonText: 'Annulla',
            confirmButtonColor: '#ef4444'
        });
    }

    // Schedule management
    function editSchedule() {
        Swal.fire({
            title: '🕐 Modifica Orari',
            text: 'Reindirizzamento alla configurazione orari...',
            icon: 'info',
            confirmButtonColor: '#10b981'
        });
    }

    // Slot management functions
    function addSlot() {
        Swal.fire({
            title: '📅 Aggiungi Slot Prenotazione',
            html: `
                <div class="text-left space-y-4">
                    <div class="grid grid-cols-2 gap-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Ora Inizio *</label>
                            <input type="time" id="slotStartTime" class="w-full px-3 py-2 border border-gray-300 rounded-md">
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Ora Fine *</label>
                            <input type="time" id="slotEndTime" class="w-full px-3 py-2 border border-gray-300 rounded-md">
                        </div>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Capacità *</label>
                        <input type="number" id="slotCapacity" class="w-full px-3 py-2 border border-gray-300 rounded-md" placeholder="1" min="1">
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Note</label>
                        <input type="text" id="slotNotes" class="w-full px-3 py-2 border border-gray-300 rounded-md" placeholder="Es. Solo per trattamenti speciali">
                    </div>
                    <div>
                        <label class="flex items-center">
                            <input type="checkbox" id="slotActive" class="mr-2" checked>
                            <span class="text-sm text-gray-700">Slot attivo</span>
                        </label>
                    </div>
                </div>
            `,
            showCancelButton: true,
            confirmButtonText: '<i class="fas fa-save mr-2"></i>Salva',
            cancelButtonText: 'Annulla',
            confirmButtonColor: '#f59e0b',
            preConfirm: () => {
                const startTime = document.getElementById('slotStartTime').value;
                const endTime = document.getElementById('slotEndTime').value;
                const capacity = document.getElementById('slotCapacity').value;

                if (!startTime || !endTime || !capacity) {
                    Swal.showValidationMessage('Compila tutti i campi obbligatori');
                    return false;
                }
                return { startTime, endTime, capacity };
            }
        }).then((result) => {
            if (result.isConfirmed) {
                Swal.fire('✅ Slot Aggiunto!', 'Il nuovo slot è disponibile per le prenotazioni', 'success');
            }
        });
    }

    function editSlot(slotId) {
        Swal.fire({
            title: '✏️ Modifica Slot',
            text: 'Reindirizzamento alla modifica slot...',
            icon: 'info',
            confirmButtonColor: '#f59e0b'
        });
    }

    function deleteSlot(slotId) {
        Swal.fire({
            title: '🗑️ Eliminare lo slot?',
            text: 'Le prenotazioni esistenti per questo slot rimarranno valide',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Elimina',
            cancelButtonText: 'Annulla',
            confirmButtonColor: '#ef4444'
        }).then((result) => {
            if (result.isConfirmed) {
                Swal.fire('✅ Slot Eliminato!', 'Lo slot non è più disponibile', 'success');
            }
        });
    }
</script>