@model HaveASeat.Models.Salone

@{
    Layout = "_DashboardLayout";
    var hasBasicPlan = ViewBag.Basic != null;
    var saloni = ViewBag.Saloni as List<HaveASeat.Models.Salone>;
    var saloneCorrente = ViewBag.SaloneCorrente as HaveASeat.Models.Salone;
    var hasMultipleSedi = ViewBag.HasMultipleSedi as bool? ?? false;
}

@if (hasBasicPlan)
{
    <!-- Upgrade Required Section for Basic Plan -->
    <div class="min-h-screen flex items-center justify-center p-2">
        <div class="max-w-4xl w-full">
            <!-- Salon Selector Header (anche per Basic) -->
            @if (hasMultipleSedi)
            {
                <div class="mb-6">
                    <div class="bg-white dark:bg-gray-800 rounded-xl p-4 shadow-sm border border-gray-200 dark:border-gray-700">
                        <div class="flex flex-col sm:flex-row sm:items-center justify-between space-y-3 sm:space-y-0">
                            <div class="flex items-center space-x-3">
                                <i class="fas fa-store text-purple-600 dark:text-purple-400"></i>
                                <div>
                                    <h3 class="font-semibold text-gray-900 dark:text-gray-100">@saloneCorrente.Nome</h3>
                                    <p class="text-sm text-gray-600 dark:text-gray-400">@saloneCorrente.Citta, @saloneCorrente.Provincia</p>
                                </div>
                            </div>
                            <div class="dropdown dropdown-bottom dropdown-end">
                                <div tabindex="0" role="button" class="btn btn-outline border-gray-300 dark:border-gray-600 min-w-[200px] dark:text-gray-200 hover:text-black dark:hover:text-gray-700">
                                    <i class="fas fa-store mr-2"></i>
                                    <span class="truncate">@saloneCorrente?.Nome</span>
                                    <i class="fas fa-chevron-down ml-2"></i>
                                </div>
                                <ul tabindex="0" class="dropdown-content menu bg-base-100 dark:bg-gray-800 rounded-box z-[1] w-64 p-2 shadow-xl border border-gray-200 dark:border-gray-700 max-h-60 overflow-y-auto">
                                    @foreach (var s in saloni)
                                    {
                                        <li>
                                            <a href="@Url.Action("Personalizza", new { id = s.SaloneId })"
                                               class="@(s.SaloneId == saloneCorrente?.SaloneId ? "active bg-purple-50 dark:bg-purple-900/20" : "") transition-colors">
                                                <i class="fas fa-store mr-2 dark:text-gray-200 @(s.SaloneId == saloneCorrente?.SaloneId ? "text-purple-600 dark:text-purple-600" : "")"></i>
                                                <div class="flex-1">
                                                    <div class="font-medium dark:text-gray-200">@s.Nome</div>
                                                    <div class="text-xs text-gray-500 dark:text-gray-100">@s.Citta, @s.Provincia</div>
                                                </div>
                                                @if (s.SaloneId == saloneCorrente?.SaloneId)
                                                {
                                                    <i class="fas fa-check ml-auto text-green-500"></i>
                                                }
                                            </a>
                                        </li>
                                    }
                                </ul>
                            </div>
                        </div>
                        <div class="mt-3">
                            <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-400">
                                <i class="fas fa-info-circle mr-2"></i>
                                Personalizzazione non disponibile con piano Standard
                            </span>
                        </div>
                    </div>
                </div>
            }

            <!-- Resto del contenuto Basic Plan esistente... -->
            <!-- [Mantenere tutto il contenuto esistente per il piano Basic] -->
        </div>
    </div>
}
else
{
    <!-- Full Customization Section for Pro/Business Plans -->
    <div>
        <!-- Header -->
        <div class="flex flex-col lg:flex-row lg:items-center justify-between mb-8 space-y-4 lg:space-y-0">
            <div>
                <h1 class="text-3xl font-bold text-gray-900 dark:text-gray-100">Personalizza Salone</h1>
                <p class="text-gray-600 dark:text-gray-400 mt-1">
                    @if (hasMultipleSedi)
                    {
                        <span>Personalizzando <strong>@saloneCorrente?.Nome</strong></span>
                    }
                    else
                    {
                        <span>Personalizza lo stile del tuo salone</span>
                    }
                </p>
                @if (hasMultipleSedi)
                {
                    <div class="mt-2">
                        <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-400">
                            <i class="fas fa-info-circle mr-1"></i>
                            Hai @saloni?.Count sedi - Seleziona quella da gestire
                        </span>
                    </div>
                }
            </div>

            <div class="flex items-center space-x-3">
                <!-- Selector Salone - Solo se ha più sedi -->
                @if (hasMultipleSedi && saloni != null && saloni.Count > 1)
                {
                    <div class="dropdown dropdown-bottom dropdown-end">
                        <div tabindex="0" role="button" class="btn btn-outline border-gray-300 dark:border-gray-600 min-w-[200px] dark:text-gray-200 hover:text-black dark:hover:text-gray-700">
                            <i class="fas fa-store mr-2"></i>
                            <span class="truncate">@saloneCorrente?.Nome</span>
                            <i class="fas fa-chevron-down ml-2"></i>
                        </div>
                        <ul tabindex="0" class="dropdown-content menu bg-base-100 dark:bg-gray-800 rounded-box z-[1] w-64 p-2 shadow-xl border border-gray-200 dark:border-gray-700 max-h-60 overflow-y-auto">
                            @foreach (var s in saloni)
                            {
                                <li>
                                    <a href="@Url.Action("Personalizza", new { id = s.SaloneId })"
                                       class="@(s.SaloneId == saloneCorrente?.SaloneId ? "active bg-purple-50 dark:bg-purple-900/20" : "") transition-colors">
                                        <i class="fas fa-store mr-2 dark:text-gray-200 @(s.SaloneId == saloneCorrente?.SaloneId ? "text-purple-600 dark:text-purple-600" : "")"></i>
                                        <div class="flex-1">
                                            <div class="font-medium dark:text-gray-200">@s.Nome</div>
                                            <div class="text-xs text-gray-500 dark:text-gray-100">@s.Citta, @s.Provincia</div>
                                        </div>
                                        @if (s.SaloneId == saloneCorrente?.SaloneId)
                                        {
                                            <i class="fas fa-check ml-auto text-green-500"></i>
                                        }
                                    </a>
                                </li>
                            }
                        </ul>
                    </div>
                }

                @if (saloneCorrente != null)
                {
                    <a href="@Url.Action("Preview", "Personalizzazione", new { saloneId = saloneCorrente.SaloneId })" target="_blank" class="inline-flex items-center px-4 py-2 border border-purple-600 dark:border-purple-400 text-purple-600 dark:text-purple-400 hover:bg-purple-700 hover:text-white dark:hover:text-white dark:hover:border-purple-700 text-sm font-medium rounded-lg transition-colors duration-200">
                        <i class="fas fa-eye mr-2"></i>
                        Anteprima
                    </a>
                    <button onclick="saveAllCustomization()" class="inline-flex items-center px-4 py-2 bg-purple-600 hover:bg-purple-700 text-white text-sm font-medium rounded-lg transition-colors">
                        <i class="fas fa-save mr-2"></i>
                        Salva Modifiche
                    </button>
                }
            </div>
        </div>

        <!-- Customization Tabs -->
        <div class="mb-6">
            <div class="border-b border-gray-200 dark:border-gray-700">
                <nav class="-mb-px flex space-x-8">
                    <button onclick="switchTab('photos')" class="tab-btn py-2 px-1 border-b-2 border-purple-500 font-medium text-sm text-purple-600 dark:text-purple-400" data-tab="photos">
                        <i class="fas fa-images mr-2"></i>
                        Foto e Galleria
                    </button>
                    <button onclick="switchTab('colors')" class="tab-btn py-2 px-1 border-b-2 border-transparent font-medium text-sm text-gray-500 hover:text-gray-700 hover:border-gray-300 dark:text-gray-400 dark:hover:text-gray-300" data-tab="colors">
                        <i class="fas fa-palette mr-2"></i>
                        Colori e Temi
                    </button>
                    <button onclick="switchTab('layout')" class="tab-btn py-2 px-1 border-b-2 border-transparent font-medium text-sm text-gray-500 hover:text-gray-700 hover:border-gray-300 dark:text-gray-400 dark:hover:text-gray-300" data-tab="layout">
                        <i class="fas fa-th-large mr-2"></i>
                        Layout
                    </button>
                    <button onclick="switchTab('branding')" class="tab-btn py-2 px-1 border-b-2 border-transparent font-medium text-sm text-gray-500 hover:text-gray-700 hover:border-gray-300 dark:text-gray-400 dark:hover:text-gray-300" data-tab="branding">
                        <i class="fas fa-certificate mr-2"></i>
                        Branding
                    </button>
                </nav>
            </div>
        </div>

        <!-- Tab Content -->
        <div class="space-y-6">
            <!-- Photos Tab -->
            <div id="photos-tab" class="tab-content">
                <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                    <!-- Cover Photo -->
                    <div class="bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm border border-gray-200 dark:border-gray-700">
                        <div class="flex items-center justify-between mb-6">
                            <h3 class="text-lg font-semibold text-gray-900 dark:text-gray-100">Foto di Copertina</h3>
                            <span class="text-xs bg-purple-100 text-purple-800 dark:bg-purple-900/20 dark:text-purple-400 px-2 py-1 rounded-full">Principale</span>
                        </div>

                        <div class="space-y-4">
                            <!-- Current Cover -->
                            <div class="relative" id="cover-preview">
                                <div class="aspect-video bg-gradient-to-br from-purple-100 to-pink-100 dark:from-purple-900/30 dark:to-pink-900/30 rounded-lg border-2 border-dashed border-purple-300 dark:border-purple-700 flex items-center justify-center" id="cover-placeholder">
                                    <div class="text-center">
                                        <i class="fas fa-image text-4xl text-purple-400 dark:text-purple-600 mb-2"></i>
                                        <p class="text-sm text-gray-600 dark:text-gray-400">Nessuna foto di copertina</p>
                                    </div>
                                </div>
                            </div>

                            <!-- Upload Button for Cover -->
                            <div class="flex items-center justify-center w-full">
                                <label class="flex flex-col items-center justify-center w-full h-32 border-2 border-gray-300 border-dashed rounded-lg cursor-pointer bg-gray-50 dark:hover:bg-gray-800 dark:bg-gray-700 hover:bg-gray-100 dark:border-gray-600 dark:hover:border-gray-500">
                                    <div class="flex flex-col items-center justify-center pt-5 pb-6">
                                        <i class="fas fa-cloud-upload-alt text-2xl text-gray-400 mb-2"></i>
                                        <p class="text-sm text-gray-500 dark:text-gray-400"><span class="font-semibold">Clicca per caricare copertina</span></p>
                                        <p class="text-xs text-gray-500 dark:text-gray-400">PNG, JPG or JPEG (MAX. 5MB)</p>
                                    </div>
                                    <input type="file" class="hidden" accept="image/*" id="cover-upload" onchange="uploadCoverImage(this)">
                                </label>
                            </div>
                        </div>
                    </div>

                    <!-- Gallery -->
                    <div class="bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm border border-gray-200 dark:border-gray-700">
                        <div class="flex items-center justify-between mb-6">
                            <h3 class="text-lg font-semibold text-gray-900 dark:text-gray-100">Galleria Foto</h3>
                            <span class="text-xs bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400 px-2 py-1 rounded-full" id="gallery-counter">0/10</span>
                        </div>

                        <!-- Gallery Grid -->
                        <div class="grid grid-cols-2 gap-4 mb-4" id="gallery-grid">
                            <!-- Le immagini verranno caricate dinamicamente -->
                        </div>

                        <!-- Bulk Upload -->
                        <label class="w-full bg-purple-600 hover:bg-purple-700 text-white text-sm font-medium py-3 px-4 rounded-lg transition-colors cursor-pointer inline-block text-center">
                            <i class="fas fa-images mr-2"></i>
                            Carica Foto Multiple
                            <input type="file" class="hidden" accept="image/*" multiple id="gallery-upload" onchange="uploadGalleryImages(this)">
                        </label>
                    </div>
                </div>
            </div>

            <!-- Colors Tab -->
            <div id="colors-tab" class="tab-content hidden">
                <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                    <!-- Color Schemes -->
                    <div class="bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm border border-gray-200 dark:border-gray-700">
                        <h3 class="text-lg font-semibold text-gray-900 dark:text-gray-100 mb-6">Temi Predefiniti</h3>

                        <div class="grid grid-cols-1 gap-4">
                            <!-- Theme Options -->
                            <div class="theme-option border-2 border-purple-500 bg-purple-50 dark:bg-purple-900/20 rounded-lg p-4 cursor-pointer" data-theme="elegante" onclick="selectTheme('elegante')">
                                <div class="flex items-center justify-between">
                                    <div class="flex items-center space-x-4">
                                        <div class="flex space-x-1">
                                            <div class="w-6 h-6 bg-purple-500 rounded-full"></div>
                                            <div class="w-6 h-6 bg-pink-500 rounded-full"></div>
                                            <div class="w-6 h-6 bg-indigo-500 rounded-full"></div>
                                        </div>
                                        <div>
                                            <h4 class="font-medium text-gray-900 dark:text-gray-100">Elegante</h4>
                                            <p class="text-sm text-gray-600 dark:text-gray-400">Viola e rosa per un look sofisticato</p>
                                        </div>
                                    </div>
                                    <i class="fas fa-check text-purple-600 theme-check"></i>
                                </div>
                            </div>

                            <div class="theme-option border-2 border-transparent hover:border-blue-300 bg-white dark:bg-gray-700 rounded-lg p-4 cursor-pointer" data-theme="professionale" onclick="selectTheme('professionale')">
                                <div class="flex items-center justify-between">
                                    <div class="flex items-center space-x-4">
                                        <div class="flex space-x-1">
                                            <div class="w-6 h-6 bg-blue-500 rounded-full"></div>
                                            <div class="w-6 h-6 bg-cyan-500 rounded-full"></div>
                                            <div class="w-6 h-6 bg-teal-500 rounded-full"></div>
                                        </div>
                                        <div>
                                            <h4 class="font-medium text-gray-900 dark:text-gray-100">Professionale</h4>
                                            <p class="text-sm text-gray-600 dark:text-gray-400">Blu e azzurro per serietà</p>
                                        </div>
                                    </div>
                                    <i class="fas fa-check text-blue-600 theme-check hidden"></i>
                                </div>
                            </div>

                            <div class="theme-option border-2 border-transparent hover:border-green-300 bg-white dark:bg-gray-700 rounded-lg p-4 cursor-pointer" data-theme="naturale" onclick="selectTheme('naturale')">
                                <div class="flex items-center justify-between">
                                    <div class="flex items-center space-x-4">
                                        <div class="flex space-x-1">
                                            <div class="w-6 h-6 bg-green-500 rounded-full"></div>
                                            <div class="w-6 h-6 bg-emerald-500 rounded-full"></div>
                                            <div class="w-6 h-6 bg-lime-500 rounded-full"></div>
                                        </div>
                                        <div>
                                            <h4 class="font-medium text-gray-900 dark:text-gray-100">Naturale</h4>
                                            <p class="text-sm text-gray-600 dark:text-gray-400">Verde per benessere naturale</p>
                                        </div>
                                    </div>
                                    <i class="fas fa-check text-green-600 theme-check hidden"></i>
                                </div>
                            </div>

                            <div class="theme-option border-2 border-transparent hover:border-orange-300 bg-white dark:bg-gray-700 rounded-lg p-4 cursor-pointer" data-theme="energico" onclick="selectTheme('energico')">
                                <div class="flex items-center justify-between">
                                    <div class="flex items-center space-x-4">
                                        <div class="flex space-x-1">
                                            <div class="w-6 h-6 bg-orange-500 rounded-full"></div>
                                            <div class="w-6 h-6 bg-amber-500 rounded-full"></div>
                                            <div class="w-6 h-6 bg-yellow-500 rounded-full"></div>
                                        </div>
                                        <div>
                                            <h4 class="font-medium text-gray-900 dark:text-gray-100">Energico</h4>
                                            <p class="text-sm text-gray-600 dark:text-gray-400">Arancione e giallo per vitalità</p>
                                        </div>
                                    </div>
                                    <i class="fas fa-check text-orange-600 theme-check hidden"></i>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Custom Colors -->
                    <div class="bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm border border-gray-200 dark:border-gray-700">
                        <h3 class="text-lg font-semibold text-gray-900 dark:text-gray-100 mb-6">Colori Personalizzati</h3>

                        <div class="space-y-6">
                            <!-- Primary Color -->
                            <div>
                                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-3">Colore Primario</label>
                                <div class="flex items-center space-x-4">
                                    <input type="color" value="#7c3aed" id="primary-color" class="w-16 h-16 border border-gray-300 dark:border-gray-600 rounded-lg cursor-pointer" onchange="updateCustomColors()">
                                    <div class="flex-1">
                                        <input type="text" value="#7c3aed" id="primary-color-text" class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg dark:bg-gray-700 dark:text-gray-100" onchange="updateColorFromText(this, 'primary-color')">
                                        <p class="text-xs text-gray-500 dark:text-gray-400 mt-1">Colore principale del brand</p>
                                    </div>
                                </div>
                            </div>

                            <!-- Secondary Color -->
                            <div>
                                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-3">Colore Secondario</label>
                                <div class="flex items-center space-x-4">
                                    <input type="color" value="#ec4899" id="secondary-color" class="w-16 h-16 border border-gray-300 dark:border-gray-600 rounded-lg cursor-pointer" onchange="updateCustomColors()">
                                    <div class="flex-1">
                                        <input type="text" value="#ec4899" id="secondary-color-text" class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg dark:bg-gray-700 dark:text-gray-100" onchange="updateColorFromText(this, 'secondary-color')">
                                        <p class="text-xs text-gray-500 dark:text-gray-400 mt-1">Colore di supporto e accenti</p>
                                    </div>
                                </div>
                            </div>

                            <!-- Accent Color -->
                            <div>
                                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-3">Colore Accento</label>
                                <div class="flex items-center space-x-4">
                                    <input type="color" value="#f59e0b" id="accent-color" class="w-16 h-16 border border-gray-300 dark:border-gray-600 rounded-lg cursor-pointer" onchange="updateCustomColors()">
                                    <div class="flex-1">
                                        <input type="text" value="#f59e0b" id="accent-color-text" class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg dark:bg-gray-700 dark:text-gray-100" onchange="updateColorFromText(this, 'accent-color')">
                                        <p class="text-xs text-gray-500 dark:text-gray-400 mt-1">Per call-to-action e evidenziazioni</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Color Preview -->
                <div class="bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm border border-gray-200 dark:border-gray-700 mt-8">
                    <h3 class="text-lg font-semibold text-gray-900 dark:text-gray-100 mb-6">Anteprima Colori</h3>

                    <div class="bg-gray-50 dark:bg-gray-900 rounded-lg p-6">
                        <div class="max-w-md mx-auto bg-white dark:bg-gray-800 rounded-lg shadow-lg overflow-hidden" id="color-preview">
                            <!-- Mock salon page -->
                            <div class="h-32 bg-gradient-to-r from-purple-500 to-pink-500" id="preview-header"></div>
                            <div class="p-4">
                                <h4 class="text-lg font-bold text-gray-900 dark:text-gray-100 mb-2">@Model.Nome</h4>
                                <p class="text-sm text-gray-600 dark:text-gray-400 mb-4">Anteprima del tuo salone</p>
                                <button class="w-full bg-orange-500 hover:bg-orange-600 text-white py-2 px-4 rounded-lg text-sm font-medium transition-colors" id="preview-button">
                                    Prenota Ora
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Layout Tab -->
            <div id="layout-tab" class="tab-content hidden">
                <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                    <!-- Layout Options -->
                    <div class="bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm border border-gray-200 dark:border-gray-700">
                        <h3 class="text-lg font-semibold text-gray-900 dark:text-gray-100 mb-6">Stile Layout</h3>

                        <div class="space-y-4">
                            <!-- Layout Card -->
                            <div class="layout-option border-2 border-purple-500 bg-purple-50 dark:bg-purple-900/20 rounded-lg p-4 cursor-pointer" data-layout="moderno" onclick="selectLayout('moderno')">
                                <div class="flex items-center space-x-4">
                                    <div class="w-16 h-12 bg-white dark:bg-gray-700 rounded border border-gray-200 dark:border-gray-600 flex items-center justify-center">
                                        <div class="grid grid-cols-2 gap-1">
                                            <div class="w-2 h-2 bg-purple-400 rounded-sm"></div>
                                            <div class="w-2 h-1 bg-gray-300 rounded-sm"></div>
                                            <div class="w-2 h-1 bg-gray-300 rounded-sm"></div>
                                            <div class="w-2 h-1 bg-gray-300 rounded-sm"></div>
                                        </div>
                                    </div>
                                    <div class="flex-1">
                                        <h4 class="font-medium text-gray-900 dark:text-gray-100">Moderno</h4>
                                        <p class="text-sm text-gray-600 dark:text-gray-400">Layout pulito e minimalista</p>
                                    </div>
                                    <i class="fas fa-check text-purple-600 layout-check"></i>
                                </div>
                            </div>

                            <div class="layout-option border-2 border-transparent hover:border-blue-300 bg-white dark:bg-gray-700 rounded-lg p-4 cursor-pointer" data-layout="classico" onclick="selectLayout('classico')">
                                <div class="flex items-center space-x-4">
                                    <div class="w-16 h-12 bg-white dark:bg-gray-700 rounded border border-gray-200 dark:border-gray-600 flex items-center justify-center">
                                        <div class="grid grid-cols-1 gap-1">
                                            <div class="w-8 h-2 bg-blue-400 rounded-sm"></div>
                                            <div class="w-8 h-1 bg-gray-300 rounded-sm"></div>
                                            <div class="w-8 h-1 bg-gray-300 rounded-sm"></div>
                                            <div class="w-8 h-1 bg-gray-300 rounded-sm"></div>
                                        </div>
                                    </div>
                                    <div class="flex-1">
                                        <h4 class="font-medium text-gray-900 dark:text-gray-100">Classico</h4>
                                        <p class="text-sm text-gray-600 dark:text-gray-400">Layout tradizionale e strutturato</p>
                                    </div>
                                    <i class="fas fa-check text-blue-600 layout-check hidden"></i>
                                </div>
                            </div>

                            <div class="layout-option border-2 border-transparent hover:border-green-300 bg-white dark:bg-gray-700 rounded-lg p-4 cursor-pointer" data-layout="magazine" onclick="selectLayout('magazine')">
                                <div class="flex items-center space-x-4">
                                    <div class="w-16 h-12 bg-white dark:bg-gray-700 rounded border border-gray-200 dark:border-gray-600 flex items-center justify-center">
                                        <div class="grid grid-cols-3 gap-1">
                                            <div class="w-1 h-2 bg-green-400 rounded-sm"></div>
                                            <div class="w-1 h-2 bg-green-400 rounded-sm"></div>
                                            <div class="w-1 h-2 bg-green-400 rounded-sm"></div>
                                            <div class="w-1 h-1 bg-gray-300 rounded-sm"></div>
                                            <div class="w-1 h-1 bg-gray-300 rounded-sm"></div>
                                            <div class="w-1 h-1 bg-gray-300 rounded-sm"></div>
                                        </div>
                                    </div>
                                    <div class="flex-1">
                                        <h4 class="font-medium text-gray-900 dark:text-gray-100">Magazine</h4>
                                        <p class="text-sm text-gray-600 dark:text-gray-400">Layout ricco di contenuti</p>
                                    </div>
                                    <i class="fas fa-check text-green-600 layout-check hidden"></i>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Section Visibility -->
                    <div class="bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm border border-gray-200 dark:border-gray-700">
                        <h3 class="text-lg font-semibold text-gray-900 dark:text-gray-100 mb-6">Sezioni Visibili</h3>

                        <div class="space-y-4">
                            <div class="flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-700 rounded-lg">
                                <div class="flex items-center space-x-3">
                                    <i class="fas fa-images text-purple-600"></i>
                                    <div>
                                        <h4 class="font-medium text-gray-900 dark:text-gray-100">Galleria Foto</h4>
                                        <p class="text-sm text-gray-600 dark:text-gray-400">Mostra le foto del salone</p>
                                    </div>
                                </div>
                                <label class="relative inline-flex items-center cursor-pointer">
                                    <input type="checkbox" class="sr-only peer" id="show-gallery" checked onchange="updateSectionVisibility()">
                                    <div class="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-purple-300 dark:peer-focus:ring-purple-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-purple-600"></div>
                                </label>
                            </div>

                            <div class="flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-700 rounded-lg">
                                <div class="flex items-center space-x-3">
                                    <i class="fas fa-users text-blue-600"></i>
                                    <div>
                                        <h4 class="font-medium text-gray-900 dark:text-gray-100">Team</h4>
                                        <p class="text-sm text-gray-600 dark:text-gray-400">Presenta il tuo staff</p>
                                    </div>
                                </div>
                                <label class="relative inline-flex items-center cursor-pointer">
                                    <input type="checkbox" class="sr-only peer" id="show-team" checked onchange="updateSectionVisibility()">
                                    <div class="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-purple-300 dark:peer-focus:ring-purple-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-purple-600"></div>
                                </label>
                            </div>

                            <div class="flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-700 rounded-lg">
                                <div class="flex items-center space-x-3">
                                    <i class="fas fa-cut text-green-600"></i>
                                    <div>
                                        <h4 class="font-medium text-gray-900 dark:text-gray-100">Servizi</h4>
                                        <p class="text-sm text-gray-600 dark:text-gray-400">Lista dei servizi offerti</p>
                                    </div>
                                </div>
                                <label class="relative inline-flex items-center cursor-pointer">
                                    <input type="checkbox" class="sr-only peer" id="show-services" checked onchange="updateSectionVisibility()">
                                    <div class="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-purple-300 dark:peer-focus:ring-purple-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-purple-600"></div>
                                </label>
                            </div>

                            <div class="flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-700 rounded-lg">
                                <div class="flex items-center space-x-3">
                                    <i class="fas fa-star text-yellow-600"></i>
                                    <div>
                                        <h4 class="font-medium text-gray-900 dark:text-gray-100">Recensioni</h4>
                                        <p class="text-sm text-gray-600 dark:text-gray-400">Testimonianze clienti</p>
                                    </div>
                                </div>
                                <label class="relative inline-flex items-center cursor-pointer">
                                    <input type="checkbox" class="sr-only peer" id="show-reviews" checked onchange="updateSectionVisibility()">
                                    <div class="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-purple-300 dark:peer-focus:ring-purple-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-purple-600"></div>
                                </label>
                            </div>

                            <div class="flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-700 rounded-lg">
                                <div class="flex items-center space-x-3">
                                    <i class="fas fa-map-marker-alt text-red-600"></i>
                                    <div>
                                        <h4 class="font-medium text-gray-900 dark:text-gray-100">Contatti</h4>
                                        <p class="text-sm text-gray-600 dark:text-gray-400">Informazioni e mappa</p>
                                    </div>
                                </div>
                                <label class="relative inline-flex items-center cursor-pointer">
                                    <input type="checkbox" class="sr-only peer" id="show-contacts" checked onchange="updateSectionVisibility()">
                                    <div class="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-purple-300 dark:peer-focus:ring-purple-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-purple-600"></div>
                                </label>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Branding Tab -->
            <div id="branding-tab" class="tab-content hidden">
                <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                    <!-- Logo Upload -->
                    <div class="bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm border border-gray-200 dark:border-gray-700">
                        <h3 class="text-lg font-semibold text-gray-900 dark:text-gray-100 mb-6">Logo del Salone</h3>

                        <div class="space-y-6">
                            <!-- Current Logo -->
                            <div class="text-center" id="logo-preview">
                                <div class="w-32 h-32 mx-auto bg-gray-100 dark:bg-gray-700 rounded-lg border-2 border-dashed border-gray-300 dark:border-gray-600 flex items-center justify-center" id="logo-placeholder">
                                    <div class="text-center">
                                        <i class="fas fa-image text-2xl text-gray-400 mb-2"></i>
                                        <p class="text-sm text-gray-500 dark:text-gray-400">Nessun logo</p>
                                    </div>
                                </div>
                            </div>

                            <!-- Upload Area -->
                            <div class="flex items-center justify-center w-full">
                                <label class="flex flex-col items-center justify-center w-full h-32 border-2 border-gray-300 border-dashed rounded-lg cursor-pointer bg-gray-50 dark:hover:bg-gray-800 dark:bg-gray-700 hover:bg-gray-100 dark:border-gray-600 dark:hover:border-gray-500">
                                    <div class="flex flex-col items-center justify-center pt-5 pb-6">
                                        <i class="fas fa-upload text-2xl text-gray-400 mb-2"></i>
                                        <p class="text-sm text-gray-500 dark:text-gray-400"><span class="font-semibold">Carica il logo</span></p>
                                        <p class="text-xs text-gray-500 dark:text-gray-400">PNG, SVG, JPG (MAX. 2MB)</p>
                                    </div>
                                    <input type="file" class="hidden" accept=".png,.svg,.jpg,.jpeg" id="logo-upload" onchange="uploadLogo(this)">
                                </label>
                            </div>
                        </div>
                    </div>

                    <!-- Brand Settings -->
                    <div class="bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm border border-gray-200 dark:border-gray-700">
                        <h3 class="text-lg font-semibold text-gray-900 dark:text-gray-100 mb-6">Impostazioni Brand</h3>

                        <div class="space-y-6">
                            <!-- Business Name -->
                            <div>
                                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Nome del Business</label>
                                <input type="text" value="@Model.Nome" id="business-name" class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg dark:bg-gray-700 dark:text-gray-100" readonly>
                                <p class="text-xs text-gray-500 dark:text-gray-400 mt-1">Modificabile dalle impostazioni salone</p>
                            </div>

                            <!-- Tagline -->
                            <div>
                                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Slogan</label>
                                <input type="text" placeholder="Il tuo slogan..." id="business-slogan" class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg dark:bg-gray-700 dark:text-gray-100" onchange="updateBrandSettings()">
                                <p class="text-xs text-gray-500 dark:text-gray-400 mt-1">Una frase che rappresenta il tuo salone</p>
                            </div>

                            <!-- Brand Colors Display -->
                            <div>
                                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-3">Colori del Brand</label>
                                <div class="flex space-x-3" id="brand-colors-display">
                                    <div class="text-center">
                                        <div class="w-12 h-12 bg-purple-500 rounded-lg border border-gray-200 dark:border-gray-600" id="brand-primary"></div>
                                        <p class="text-xs text-gray-500 dark:text-gray-400 mt-1">Primario</p>
                                    </div>
                                    <div class="text-center">
                                        <div class="w-12 h-12 bg-pink-500 rounded-lg border border-gray-200 dark:border-gray-600" id="brand-secondary"></div>
                                        <p class="text-xs text-gray-500 dark:text-gray-400 mt-1">Secondario</p>
                                    </div>
                                    <div class="text-center">
                                        <div class="w-12 h-12 bg-orange-500 rounded-lg border border-gray-200 dark:border-gray-600" id="brand-accent"></div>
                                        <p class="text-xs text-gray-500 dark:text-gray-400 mt-1">Accento</p>
                                    </div>
                                </div>
                            </div>

                            <!-- Social Links -->
                            <div>
                                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-3">Social Media</label>
                                <div class="space-y-3">
                                    <div class="flex items-center space-x-3">
                                        <i class="fab fa-instagram text-pink-500 w-5"></i>
                                        <input type="url" placeholder="https://instagram.com/tuosalone" id="instagram-url" class="flex-1 px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg dark:bg-gray-700 dark:text-gray-100" onchange="updateBrandSettings()">
                                    </div>
                                    <div class="flex items-center space-x-3">
                                        <i class="fab fa-facebook text-blue-500 w-5"></i>
                                        <input type="url" placeholder="https://facebook.com/tuosalone" id="facebook-url" class="flex-1 px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg dark:bg-gray-700 dark:text-gray-100" onchange="updateBrandSettings()">
                                    </div>
                                    <div class="flex items-center space-x-3">
                                        <i class="fab fa-tiktok text-gray-900 dark:text-gray-100 w-5"></i>
                                        <input type="url" placeholder="https://tiktok.com/@@tuosalone" id="tiktok-url" class="flex-1 px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg dark:bg-gray-700 dark:text-gray-100" onchange="updateBrandSettings()">
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Brand Preview -->
                <div class="bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm border border-gray-200 dark:border-gray-700 mt-6">
                    <h3 class="text-lg font-semibold text-gray-900 dark:text-gray-100 mb-6">Anteprima Brand</h3>

                    <div class="bg-gray-50 dark:bg-gray-900 rounded-lg p-6">
                        <div class="max-w-sm mx-auto bg-white dark:bg-gray-800 rounded-lg shadow-lg overflow-hidden" id="brand-preview">
                            <!-- Mock business card -->
                            <div class="bg-gradient-to-r from-purple-500 to-pink-500 p-6 text-white" id="brand-preview-header">
                                <div class="flex items-center space-x-3">
                                    <div class="w-12 h-12 bg-white bg-opacity-20 rounded-lg flex items-center justify-center" id="brand-preview-logo">
                                        <i class="fas fa-cut text-white"></i>
                                    </div>
                                    <div>
                                        <h4 class="font-bold">@Model.Nome</h4>
                                        <p class="text-sm opacity-90" id="brand-preview-slogan">Il tuo slogan qui</p>
                                    </div>
                                </div>
                            </div>
                            <div class="p-4">
                                <div class="flex items-center space-x-2 text-sm text-gray-600 dark:text-gray-400 mb-2">
                                    <i class="fas fa-phone text-purple-500"></i>
                                    <span>@Model.Telefono</span>
                                </div>
                                <div class="flex items-center space-x-2 text-sm text-gray-600 dark:text-gray-400">
                                    <i class="fas fa-envelope text-purple-500"></i>
                                    <span>@Model.Email</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        function getAntiForgeryToken() {
            const tokenInput = document.querySelector('input[name="__RequestVerificationToken"]');
            return tokenInput ? tokenInput.value : '';
        }

        // Variabili globali
        let currentSaloneId = '@Html.Raw(Model.SaloneId)';
        let currentCustomization = {};

        // Inizializzazione
        document.addEventListener('DOMContentLoaded', function() {
            // Rimuovi eventuali script esterni che causano conflitti
            const existingScripts = document.querySelectorAll('script[src*="ScriptProfilePage"]');
            existingScripts.forEach(script => script.remove());

            switchTab('photos');
            loadCurrentCustomization();
            loadGalleryImages();
        });

        // Carica personalizzazione corrente
        async function loadCurrentCustomization() {
            try {
                const response = await fetch(`/Personalizzazione/GetCustomization?saloneId=${currentSaloneId}`);
                const data = await response.json();

                if (data.success) {
                    currentCustomization = data.personalizzazione;
                    applyCustomization(currentCustomization);
                }
            } catch (error) {
                console.error('Errore caricamento personalizzazione:', error);
            }
        }

        // Applica personalizzazione alla UI
        function applyCustomization(customization) {
            // Applica tema
            if (customization.temaColore) {
                selectTheme(customization.temaColore, false);
            }

            // Applica colori personalizzati
            if (customization.colorePrimario) {
                document.getElementById('primary-color').value = customization.colorePrimario;
                document.getElementById('primary-color-text').value = customization.colorePrimario;
            }
            if (customization.coloreSecondario) {
                document.getElementById('secondary-color').value = customization.coloreSecondario;
                document.getElementById('secondary-color-text').value = customization.coloreSecondario;
            }
            if (customization.coloreAccento) {
                document.getElementById('accent-color').value = customization.coloreAccento;
                document.getElementById('accent-color-text').value = customization.coloreAccento;
            }

            // Applica layout
            if (customization.layoutTipo) {
                selectLayout(customization.layoutTipo, false);
            }

            // Applica logo
            if (customization.logoUrl) {
                updateLogoPreview(customization.logoUrl);
            }

            // Applica brand settings
            if (customization.slogan) {
                document.getElementById('business-slogan').value = customization.slogan;
            }
            if (customization.instagramUrl) {
                document.getElementById('instagram-url').value = customization.instagramUrl;
            }
            if (customization.facebookUrl) {
                document.getElementById('facebook-url').value = customization.facebookUrl;
            }
            if (customization.tiktokUrl) {
                document.getElementById('tiktok-url').value = customization.tiktokUrl;
            }

            // Applica visibilità sezioni
            document.getElementById('show-gallery').checked = customization.mostraGalleria !== false;
            document.getElementById('show-team').checked = customization.mostraTeam !== false;
            document.getElementById('show-services').checked = customization.mostraServizi !== false;
            document.getElementById('show-reviews').checked = customization.mostraRecensioni !== false;
            document.getElementById('show-contacts').checked = customization.mostraContatti !== false;

            // Aggiorna preview
            updateColorPreview();
            updateBrandColorsDisplay();
            updateBrandPreview();
        }

        // Switching tabs
        function switchTab(tabName) {
            document.querySelectorAll('.tab-content').forEach(tab => {
                tab.style.display = 'none';
            });

            document.getElementById(tabName + '-tab').style.display = 'block';

            document.querySelectorAll('.tab-btn').forEach(btn => {
                btn.classList.remove('border-purple-500', 'text-purple-600', 'dark:text-purple-400');
                btn.classList.add('border-transparent', 'text-gray-500', 'hover:text-gray-700', 'hover:border-gray-300', 'dark:text-gray-400', 'dark:hover:text-gray-300');
            });

            const activeBtn = document.querySelector(`[data-tab="${tabName}"]`);
            activeBtn.classList.remove('border-transparent', 'text-gray-500', 'hover:text-gray-700', 'hover:border-gray-300', 'dark:text-gray-400', 'dark:hover:text-gray-300');
            activeBtn.classList.add('border-purple-500', 'text-purple-600', 'dark:text-purple-400');
        }

        // Upload Cover Image
        async function uploadCoverImage(input) {
            if (!input.files || !input.files[0]) return;

            const formData = new FormData();
            formData.append('imageFile', input.files[0]);
            formData.append('saloneId', currentSaloneId);
            formData.append('isCover', 'true');

            try {
                showLoading('Caricamento foto di copertina...');

                const response = await fetch('/Personalizzazione/UploadGalleryImage', {
                    method: 'POST',
                    body: formData,
                    headers: {
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    }
                });

                const result = await response.json();

                if (result.success) {
                    updateCoverPreview(result.imageUrl);
                    showNotification('Foto di copertina caricata con successo!', 'success');
                } else {
                    showNotification(result.message || 'Errore durante il caricamento', 'error');
                }
            } catch (error) {
                showNotification('Errore durante il caricamento', 'error');
                console.error('Error:', error);
            } finally {
                hideLoading();
                input.value = '';
            }
        }


        // Add Image to Gallery
        function addImageToGallery(imageId, imageUrl) {
            // Non aggiungere direttamente, ma ricostruisci tutta la galleria
            refreshGalleryDisplay();
        }

        // Nuova funzione per ricaricare la galleria
                async function refreshGalleryDisplay() {
            try {
                const response = await fetch(`/Personalizzazione/GetGalleryImages?saloneId=${currentSaloneId}`);
                const data = await response.json();

                if (data.success) {
                    buildGalleryGrid(data.immagini);
                }
            } catch (error) {
                console.error('Errore ricarica galleria:', error);
            }
        }

        // Load Gallery Images con debug migliorato
        async function loadGalleryImages() {
            try {
                const response = await fetch(`/Personalizzazione/GetGalleryImages?saloneId=${currentSaloneId}`);
                const data = await response.json();

                if (data.success) {
                    buildGalleryGrid(data.immagini);
                }
            } catch (error) {
                console.error('Errore caricamento galleria:', error);
                // Fallback: crea galleria vuota
                buildGalleryGrid([]);
            }
        }

        // Costruisce la griglia della galleria
        function buildGalleryGrid(immagini) {
            const galleryGrid = document.getElementById('gallery-grid');
            galleryGrid.innerHTML = '';

            // Filtra le immagini non-cover
            const galleryImages = immagini.filter(img => !img.isCover);

            // Aggiorna cover se presente
            const coverImage = immagini.find(img => img.isCover);
            if (coverImage) {
                updateCoverPreview(coverImage.url || coverImage.imageUrl);
            } else {
                resetCoverPreview();
            }

            // Aggiungi le immagini della galleria (massimo 10)
            galleryImages.slice(0, 10).forEach(img => {
                const imageDiv = document.createElement('div');
                imageDiv.className = 'relative aspect-square bg-gray-100 dark:bg-gray-700 rounded-lg overflow-hidden group';
                imageDiv.innerHTML = `
                    <img src="${img.url || img.imageUrl}" alt="Gallery" class="w-full h-full object-cover">
                    <div class="absolute inset-0 bg-black bg-opacity-50 opacity-0 group-hover:opacity-100 transition-opacity flex items-center justify-center">
                        <button onclick="deleteGalleryImage('${img.id || img.Id || img.imageId}')" class="w-8 h-8 bg-red-600 text-white rounded-full flex items-center justify-center hover:bg-red-700 transition-colors">
                            <i class="fas fa-trash text-sm"></i>
                        </button>
                    </div>
                `;
                galleryGrid.appendChild(imageDiv);
            });

            // CORREZIONE 3: Logica migliorata per gli slot vuoti
            const currentCount = galleryImages.length;
            const maxImages = 10;

            if (currentCount < maxImages) {
                // REGOLA: Se hai 3+ immagini, aggiungi sempre 1 solo slot
                // Se hai meno di 3 immagini, aggiungi fino a raggiungere almeno 4 elementi totali
                let slotsToAdd;

                if (currentCount >= 3) {
                    slotsToAdd = 1; // Sempre 1 slot se hai 3+ immagini
                } else {
                    // Se hai meno di 3 immagini, aggiungi fino ad avere 4 elementi totali
                    slotsToAdd = Math.min(4 - currentCount, maxImages - currentCount);
                }

                for (let i = 0; i < slotsToAdd; i++) {
                    addEmptySlot();
                }
            }

            // Aggiorna contatore
            updateGalleryCounter(currentCount, maxImages);
        }

        // Update Gallery Counter - VERSIONE MIGLIORATA
        function updateGalleryCounter(current = null, max = 10) {
            if (current === null) {
                current = document.querySelectorAll('#gallery-grid img').length;
            }

            const counter = document.getElementById('gallery-counter');
            counter.textContent = `${current}/${max}`;

            // Cambia colore in base al numero
            counter.className = `text-xs px-2 py-1 rounded-full ${
                current >= max ? 'bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-400' :
                current >= max * 0.8 ? 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-400' :
                'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400'
            }`;
        }

        // Upload Gallery Images - VERSIONE MIGLIORATA
        async function uploadGalleryImages(input) {
            if (!input.files || input.files.length === 0) return;

            const files = Array.from(input.files);
            const currentCount = document.querySelectorAll('#gallery-grid img').length;
            const maxImages = 10;
            const available = maxImages - currentCount;

            // Controlla se si supera il limite
            if (files.length > available) {
                showNotification(`Puoi caricare solo ${available} foto aggiuntive. Limite massimo: ${maxImages}`, 'error');
                input.value = '';
                return;
            }

            let uploadedCount = 0;
            let errorCount = 0;

            showLoading(`Caricamento ${files.length} foto...`);

            for (let file of files) {
                const formData = new FormData();
                formData.append('imageFile', file);
                formData.append('saloneId', currentSaloneId);
                formData.append('isCover', 'false');

                try {
                    const response = await fetch('/Personalizzazione/UploadGalleryImage', {
                        method: 'POST',
                        body: formData,
                        headers: {
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                        }
                    });

                    const result = await response.json();

                    if (result.success) {
                        uploadedCount++;
                    } else {
                        errorCount++;
                        console.error(`Errore con ${file.name}:`, result.message);
                    }
                } catch (error) {
                    errorCount++;
                    console.error(`Errore con ${file.name}:`, error);
                }
            }

            hideLoading();
            input.value = '';

            // Ricarica la galleria per mostrare le nuove immagini nell'ordine corretto
            await refreshGalleryDisplay();

            // Mostra risultato
            if (uploadedCount > 0 && errorCount === 0) {
                showNotification(`${uploadedCount} foto caricate con successo!`, 'success');
            } else if (uploadedCount > 0 && errorCount > 0) {
                showNotification(`${uploadedCount} foto caricate, ${errorCount} errori`, 'warning');
            } else {
                showNotification('Errore durante il caricamento delle foto', 'error');
            }
        }

        // Delete Gallery Image - VERSIONE MIGLIORATA
        async function deleteGalleryImage(id) {
            let confirmed = false;

            if (typeof Swal !== 'undefined') {
                const result = await Swal.fire({
                    title: 'Eliminare questa immagine?',
                    text: 'Questa azione non può essere annullata',
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#dc2626',
                    cancelButtonColor: '#6b7280',
                    confirmButtonText: 'Sì, elimina',
                    cancelButtonText: 'Annulla',
                    reverseButtons: true
                });
                confirmed = result.isConfirmed;
            } else {
                confirmed = confirm('Sei sicuro di voler eliminare questa immagine?');
            }

            if (!confirmed) return;

            try {
                showLoading('Eliminazione immagine...');

                const response = await fetch(`/Personalizzazione/DeleteImage/${id}`, {
                    method: 'DELETE',
                    headers: {
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    }
                });

                const result = await response.json();

                hideLoading();

                if (result.success) {
                    await refreshGalleryDisplay();
                    showNotification('Immagine eliminata con successo', 'success');
                } else {
                    showNotification(result.message || 'Errore durante l\'eliminazione', 'error');
                }
            } catch (error) {
                hideLoading();
                showNotification('Errore durante l\'eliminazione', 'error');
                console.error('Error:', error);
            }
        }

        // Add Empty Slot - VERSIONE MIGLIORATA
        function addEmptySlot() {
            const galleryGrid = document.getElementById('gallery-grid');
            const currentImages = document.querySelectorAll('#gallery-grid img').length;

            // Non aggiungere slot se abbiamo già 10 immagini
            if (currentImages >= 10) return;

            const emptyDiv = document.createElement('div');
            emptyDiv.className = 'aspect-square bg-gray-100 dark:bg-gray-700 rounded-lg border-2 border-dashed border-gray-300 dark:border-gray-600 flex items-center justify-center cursor-pointer hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors empty-slot';
            emptyDiv.innerHTML = '<i class="fas fa-plus text-gray-400 text-xl"></i>';
            emptyDiv.onclick = () => {
                // Controlla di nuovo il limite prima di aprire il file picker
                const currentCount = document.querySelectorAll('#gallery-grid img').length;
                if (currentCount >= 10) {
                    showNotification('Limite massimo di 10 foto raggiunto', 'error');
                    return;
                }
                document.getElementById('gallery-upload').click();
            };

            galleryGrid.appendChild(emptyDiv);
        }

        // Funzione di utilità per pulire slot vuoti
        function removeEmptySlots() {
            const emptySlots = document.querySelectorAll('#gallery-grid .empty-slot');
            emptySlots.forEach(slot => slot.remove());
        }

        // Select Theme
        function selectTheme(themeName, updatePreview = true) {
            // Reset all themes
            document.querySelectorAll('.theme-option').forEach(option => {
                option.classList.remove('border-purple-500', 'bg-purple-50', 'dark:bg-purple-900/20');
                option.classList.add('border-transparent', 'bg-white', 'dark:bg-gray-700');
                option.querySelector('.theme-check').classList.add('hidden');
            });

            // Select current theme
            const selectedTheme = document.querySelector(`[data-theme="${themeName}"]`);
            selectedTheme.classList.remove('border-transparent', 'bg-white', 'dark:bg-gray-700');
            selectedTheme.classList.add('border-purple-500', 'bg-purple-50', 'dark:bg-purple-900/20');
            selectedTheme.querySelector('.theme-check').classList.remove('hidden');

            // Apply theme colors
            const themeColors = {
                elegante: { primary: '#7c3aed', secondary: '#ec4899', accent: '#f59e0b' },
                professionale: { primary: '#3b82f6', secondary: '#06b6d4', accent: '#10b981' },
                naturale: { primary: '#10b981', secondary: '#059669', accent: '#84cc16' },
                energico: { primary: '#f97316', secondary: '#eab308', accent: '#ef4444' }
            };

            const colors = themeColors[themeName];
            if (colors) {
                document.getElementById('primary-color').value = colors.primary;
                document.getElementById('primary-color-text').value = colors.primary;
                document.getElementById('secondary-color').value = colors.secondary;
                document.getElementById('secondary-color-text').value = colors.secondary;
                document.getElementById('accent-color').value = colors.accent;
                document.getElementById('accent-color-text').value = colors.accent;

                if (updatePreview) {
                    updateColorPreview();
                    updateBrandColorsDisplay();
                }
            }

            currentCustomization.temaColore = themeName;
        }

        // Select Layout
        function selectLayout(layoutName, updateCustomization = true) {
            document.querySelectorAll('.layout-option').forEach(option => {
                option.classList.remove('border-purple-500', 'bg-purple-50', 'dark:bg-purple-900/20');
                option.classList.add('border-transparent', 'bg-white', 'dark:bg-gray-700');
                option.querySelector('.layout-check').classList.add('hidden');
            });

            const selectedLayout = document.querySelector(`[data-layout="${layoutName}"]`);
            selectedLayout.classList.remove('border-transparent', 'bg-white', 'dark:bg-gray-700');
            selectedLayout.classList.add('border-purple-500', 'bg-purple-50', 'dark:bg-purple-900/20');
            selectedLayout.querySelector('.layout-check').classList.remove('hidden');

            if (updateCustomization) {
                currentCustomization.layoutTipo = layoutName;
            }
        }

        // Update Custom Colors
        function updateCustomColors() {
            const primary = document.getElementById('primary-color').value;
            const secondary = document.getElementById('secondary-color').value;
            const accent = document.getElementById('accent-color').value;

            document.getElementById('primary-color-text').value = primary;
            document.getElementById('secondary-color-text').value = secondary;
            document.getElementById('accent-color-text').value = accent;

            currentCustomization.colorePrimario = primary;
            currentCustomization.coloreSecondario = secondary;
            currentCustomization.coloreAccento = accent;

            updateColorPreview();
            updateBrandColorsDisplay();
        }

        // Update Color from Text Input
        function updateColorFromText(input, colorPickerId) {
            const color = input.value;
            if (/^#[0-9A-F]{6}$/i.test(color)) {
                document.getElementById(colorPickerId).value = color;
                updateCustomColors();
            }
        }

        // Update Color Preview
        function updateColorPreview() {
            const primary = document.getElementById('primary-color').value;
            const secondary = document.getElementById('secondary-color').value;
            const accent = document.getElementById('accent-color').value;

            const previewHeader = document.getElementById('preview-header');
            const previewButton = document.getElementById('preview-button');

            if (previewHeader) {
                previewHeader.style.background = `linear-gradient(to right, ${primary}, ${secondary})`;
            }

            if (previewButton) {
                previewButton.style.backgroundColor = accent;
            }
        }

        // Update Brand Colors Display
        function updateBrandColorsDisplay() {
            const primary = document.getElementById('primary-color').value;
            const secondary = document.getElementById('secondary-color').value;
            const accent = document.getElementById('accent-color').value;

            document.getElementById('brand-primary').style.backgroundColor = primary;
            document.getElementById('brand-secondary').style.backgroundColor = secondary;
            document.getElementById('brand-accent').style.backgroundColor = accent;
        }

        // Update Section Visibility
        function updateSectionVisibility() {
            currentCustomization.mostraGalleria = document.getElementById('show-gallery').checked;
            currentCustomization.mostraTeam = document.getElementById('show-team').checked;
            currentCustomization.mostraServizi = document.getElementById('show-services').checked;
            currentCustomization.mostraRecensioni = document.getElementById('show-reviews').checked;
            currentCustomization.mostraContatti = document.getElementById('show-contacts').checked;
        }

        // Update Brand Settings
        function updateBrandSettings() {
            currentCustomization.slogan = document.getElementById('business-slogan').value;
            currentCustomization.instagramUrl = document.getElementById('instagram-url').value;
            currentCustomization.facebookUrl = document.getElementById('facebook-url').value;
            currentCustomization.tiktokUrl = document.getElementById('tiktok-url').value;

            updateBrandPreview();
        }

        // Update Brand Preview
        function updateBrandPreview() {
            const slogan = document.getElementById('business-slogan').value || 'Il tuo slogan qui';
            const primary = document.getElementById('primary-color').value;
            const secondary = document.getElementById('secondary-color').value;

            document.getElementById('brand-preview-slogan').textContent = slogan;

            const brandPreviewHeader = document.getElementById('brand-preview-header');
            if (brandPreviewHeader) {
                brandPreviewHeader.style.background = `linear-gradient(to right, ${primary}, ${secondary})`;
            }
        }

        // Upload Logo
        async function uploadLogo(input) {
            if (!input.files || !input.files[0]) return;

            const formData = new FormData();
            formData.append('logoFile', input.files[0]);
            formData.append('saloneId', currentSaloneId);

            try {
                showLoading('Caricamento logo...');

                const response = await fetch('/Personalizzazione/UploadLogo', {
                    method: 'POST',
                    body: formData,
                    headers: {
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    }
                });

                const result = await response.json();

                if (result.success) {
                    updateLogoPreview(result.logoUrl);
                    currentCustomization.logoUrl = result.logoUrl;
                    showNotification('Logo caricato con successo!', 'success');
                } else {
                    showNotification(result.message || 'Errore durante il caricamento', 'error');
                }
            } catch (error) {
                showNotification('Errore durante il caricamento', 'error');
                console.error('Error:', error);
            } finally {
                hideLoading();
                input.value = '';
            }
        }

        // Update Logo Preview
        function updateLogoPreview(logoUrl) {
            const logoPlaceholder = document.getElementById('logo-placeholder');
            const brandPreviewLogo = document.getElementById('brand-preview-logo');

            if (logoUrl) {
                logoPlaceholder.innerHTML = `
                    <img src="${logoUrl}" alt="Logo" class="w-full h-full object-contain rounded-lg">
                    <button onclick="deleteLogo()" class="absolute top-2 right-2 w-6 h-6 bg-red-600 text-white rounded-full flex items-center justify-center hover:bg-red-700 transition-colors">
                        <i class="fas fa-times text-xs"></i>
                    </button>
                `;
                logoPlaceholder.classList.remove('border-dashed');

                brandPreviewLogo.innerHTML = `<img src="${logoUrl}" alt="Logo" class="w-full h-full object-contain rounded-lg">`;
            }
        }

        // Save All Customization
        async function saveAllCustomization() {
            try {
                showLoading('Salvando personalizzazione...');

                // Prepara i dati da salvare
                const dataToSave = {
                    saloneId: currentSaloneId,
                    temaColore: currentCustomization.temaColore || 'elegante',
                    colorePrimario: document.getElementById('primary-color')?.value || '#7c3aed',
                    coloreSecondario: document.getElementById('secondary-color')?.value || '#ec4899',
                    coloreAccento: document.getElementById('accent-color')?.value || '#f59e0b',
                    layoutTipo: currentCustomization.layoutTipo || 'moderno',
                    slogan: document.getElementById('business-slogan')?.value || '',
                    instagramUrl: document.getElementById('instagram-url')?.value || '',
                    facebookUrl: document.getElementById('facebook-url')?.value || '',
                    tiktokUrl: document.getElementById('tiktok-url')?.value || '',
                    mostraGalleria: document.getElementById('show-gallery')?.checked ?? true,
                    mostraTeam: document.getElementById('show-team')?.checked ?? true,
                    mostraServizi: document.getElementById('show-services')?.checked ?? true,
                    mostraRecensioni: document.getElementById('show-reviews')?.checked ?? true,
                    mostraContatti: document.getElementById('show-contacts')?.checked ?? true
                };

                const response = await fetch('/Personalizzazione/SaveCustomization', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': getAntiForgeryToken()
                    },
                    body: JSON.stringify(dataToSave)
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const result = await response.json();

                hideLoading();

                if (result.success) {
                    // Aspetta un po' prima di mostrare il successo per evitare sovrapposizioni
                    setTimeout(() => {
                        showNotification('Personalizzazione salvata con successo!', 'success');
                    }, 600);

                    // Aggiorna la personalizzazione corrente
                    Object.assign(currentCustomization, dataToSave);
                } else {
                    showNotification(result.message || 'Errore durante il salvataggio', 'error');
                }
            } catch (error) {
                hideLoading();

                console.error('Errore salvataggio:', error);
                showNotification('Errore durante il salvataggio', 'error');
            } finally {
                hideLoading();
            }
        }

        // Utility Functions
        function showLoading(message) {
            if (typeof Swal !== 'undefined') {
                Swal.fire({
                    title: message,
                    allowOutsideClick: false,
                    allowEscapeKey: false,
                    showConfirmButton: false,
                    didOpen: () => {
                        Swal.showLoading();
                    }
                });
            } else {
                // Fallback se SweetAlert2 non è disponibile
                console.log('Loading:', message);
            }
        }

        function hideLoading() {
            if (typeof Swal !== 'undefined') {
                Swal.close();
            }
        }

        function showNotification(message, type) {
            if (typeof Swal !== 'undefined') {
                let icon, title;

                switch(type) {
                    case 'success':
                        icon = 'success';
                        title = 'Successo!';
                        break;
                    case 'warning':
                        icon = 'warning';
                        title = 'Attenzione!';
                        break;
                    case 'error':
                    default:
                        icon = 'error';
                        title = 'Errore!';
                        break;
                }

                Swal.fire({
                    icon: icon,
                    title: title,
                    text: message,
                    timer: 3000,
                    timerProgressBar: true,
                    showConfirmButton: false,
                    toast: true,
                    position: 'top-end'
                });
            } else {
                createNativeNotification(message, type);
            }
        }

        // Notifica nativa di fallback
        function createNativeNotification(message, type) {
            const notification = document.createElement('div');
            notification.className = `fixed top-4 right-4 px-6 py-3 rounded-lg shadow-lg z-50 transition-all duration-300 ${
                type === 'success'
                    ? 'bg-green-500 text-white'
                    : 'bg-red-500 text-white'
            }`;
            notification.innerHTML = `
                <div class="flex items-center space-x-2">
                    <i class="fas fa-${type === 'success' ? 'check' : 'exclamation-triangle'}"></i>
                    <span>${message}</span>
                </div>
            `;

            document.body.appendChild(notification);

            // Animazione di entrata
            setTimeout(() => {
                notification.style.transform = 'translateX(0)';
                notification.style.opacity = '1';
            }, 100);

            // Rimozione automatica
            setTimeout(() => {
                notification.style.transform = 'translateX(100%)';
                notification.style.opacity = '0';
                setTimeout(() => {
                    if (document.body.contains(notification)) {
                        document.body.removeChild(notification);
                    }
                }, 300);
            }, 3000);
        }

        // Delete Functions
        async function deleteCoverImage() {
            let confirmed = false;

            if (typeof Swal !== 'undefined') {
                const result = await Swal.fire({
                    title: 'Eliminare foto di copertina?',
                    text: 'Questa azione non può essere annullata',
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#dc2626',
                    cancelButtonColor: '#6b7280',
                    confirmButtonText: 'Sì, elimina',
                    cancelButtonText: 'Annulla',
                    reverseButtons: true
                });
                confirmed = result.isConfirmed;
            } else {
                confirmed = confirm('Sei sicuro di voler eliminare la foto di copertina?');
            }

            if (!confirmed) return;

            try {
                showLoading('Eliminazione foto di copertina...');

                // CORREZIONE 2: Ottieni le immagini per trovare la copertina
                const response = await fetch(`/Personalizzazione/GetGalleryImages?saloneId=${currentSaloneId}`);
                const data = await response.json();

                if (!data.success) {
                    throw new Error('Errore nel recupero delle immagini');
                }

                // Trova l'immagine di copertina - CORREZIONE: usa la proprietà corretta
                const coverImage = data.immagini.find(img => img.isCover === true);

                if (!coverImage) {
                    hideLoading();
                    if (typeof Swal !== 'undefined') {
                        Swal.fire({
                            icon: 'info',
                            title: 'Nessuna copertina',
                            text: 'Non c\'è alcuna foto di copertina da eliminare',
                            timer: 3000
                        });
                    } else {
                        showNotification('Nessuna foto di copertina da eliminare', 'warning');
                    }
                    return;
                }

                console.log('Cover image found:', coverImage); // Debug

                // Elimina l'immagine di copertina - CORREZIONE: usa la proprietà corretta dell'ID
                const deleteResponse = await fetch(`/Personalizzazione/DeleteImage/${coverImage.id || coverImage.Id || coverImage.imageId}`, {
                    method: 'DELETE',
                    headers: {
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    }
                });

                const deleteResult = await deleteResponse.json();

                hideLoading();

                if (deleteResult.success) {
                    resetCoverPreview();
                    showNotification('Foto di copertina eliminata con successo', 'success');
                } else {
                    showNotification(deleteResult.message || 'Errore durante l\'eliminazione', 'error');
                }
            } catch (error) {
                hideLoading();
                console.error('Error deleting cover:', error);
                showNotification('Errore durante l\'eliminazione della foto di copertina', 'error');
            }
        }

        // Funzione per resettare il preview della copertina
        function resetCoverPreview() {
            const coverPreview = document.getElementById('cover-preview');
            const coverPlaceholder = document.getElementById('cover-placeholder');

            if (coverPlaceholder) {
                coverPlaceholder.innerHTML = `
                    <div class="text-center">
                        <i class="fas fa-image text-4xl text-purple-400 dark:text-purple-600 mb-2"></i>
                        <p class="text-sm text-gray-600 dark:text-gray-400">Nessuna foto di copertina</p>
                    </div>
                `;
                coverPlaceholder.classList.add('border-dashed', 'border-purple-300', 'dark:border-purple-700');
                coverPlaceholder.classList.remove('border-solid');
            }
        }

        // Versione migliorata di updateCoverPreview per includere il pulsante di eliminazione
        function updateCoverPreview(imageUrl) {
            const coverPlaceholder = document.getElementById('cover-placeholder');

            if (imageUrl && coverPlaceholder) {
                coverPlaceholder.innerHTML = `
                    <div class="relative w-full h-full">
                        <img src="${imageUrl}" alt="Cover" class="w-full h-full object-cover rounded-lg">
                        <div class="absolute inset-0 bg-black bg-opacity-0 hover:bg-opacity-30 transition-all duration-300 rounded-lg flex items-center justify-center opacity-0 hover:opacity-100">
                            <button onclick="deleteCoverImage()" class="bg-red-600 hover:bg-red-700 text-white rounded-full p-3 transition-all duration-200 transform hover:scale-110 shadow-lg">
                                <i class="fas fa-trash text-lg"></i>
                            </button>
                        </div>
                        <!-- Piccola "X" sempre visibile nell'angolo -->
                        <button onclick="deleteCoverImage()" class="absolute top-3 right-3 w-8 h-8 bg-red-600 hover:bg-red-700 text-white rounded-full flex items-center justify-center transition-all duration-200 shadow-lg opacity-80 hover:opacity-100">
                            <i class="fas fa-times text-sm"></i>
                        </button>
                    </div>
                `;
                coverPlaceholder.classList.remove('border-dashed', 'border-purple-300', 'dark:border-purple-700');
                coverPlaceholder.classList.add('border-solid', 'border-gray-200', 'dark:border-gray-600');
            }
        }

        // DELETE logo
        async function deleteLogo() {
            let confirmed = false;

            if (typeof Swal !== 'undefined') {
                const result = await Swal.fire({
                    title: 'Eliminare il logo?',
                    text: 'Questa azione non può essere annullata',
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#dc2626',
                    cancelButtonColor: '#6b7280',
                    confirmButtonText: 'Sì, elimina',
                    cancelButtonText: 'Annulla',
                    reverseButtons: true
                });
                confirmed = result.isConfirmed;
            } else {
                confirmed = confirm('Sei sicuro di voler eliminare il logo?');
            }

            if (!confirmed) return;

            try {
                showLoading('Eliminazione logo...');

                const response = await fetch(`/Personalizzazione/DeleteLogo/${currentSaloneId}`, {
                    method: 'DELETE',
                    headers: {
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    }
                });

                if (response.ok) {
                    const result = await response.json();
                    if (result.success) {
                        resetLogoPreview();
                        currentCustomization.logoUrl = null;
                        hideLoading();
                        showNotification('Logo eliminato con successo', 'success');
                        return;
                    }
                } else {
                    hideLoading();
                    showNotification(result.message || 'Errore durante l\'eliminazione', 'error');
                }
            } catch (error) {
                hideLoading();
                showNotification('Errore durante l\'eliminazione del logo', 'error');
            }
        }

        // Funzione per resettare il logo
        function resetLogoPreview() {
            const logoPlaceholder = document.getElementById('logo-placeholder');
            const brandPreviewLogo = document.getElementById('brand-preview-logo');

            if (logoPlaceholder) {
                logoPlaceholder.innerHTML = `
                    <div class="text-center">
                        <i class="fas fa-image text-2xl text-gray-400 mb-2"></i>
                        <p class="text-sm text-gray-500 dark:text-gray-400">Nessun logo</p>
                    </div>
                `;
                logoPlaceholder.classList.add('border-dashed');
                logoPlaceholder.classList.remove('border-solid');
            }

            if (brandPreviewLogo) {
                brandPreviewLogo.innerHTML = '<i class="fas fa-cut text-white"></i>';
            }
        }
    </script>
}

<!-- Aggiungi Anti-Forgery Token -->
@Html.AntiForgeryToken()
