@model HaveASeat.Models.ApplicationUser;
@{
    Layout = "_DashboardLayout";
    ViewData["Title"] = "Profilo Partner";
}

<div class="containers mx-auto px-4 py-8 max-w-6xl">
    <!-- Header del Profilo -->
    <div class="bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-8 mb-8">
        <div class="flex flex-col md:flex-row items-center md:items-start gap-8">
            <!-- Avatar Section -->
            <div class="relative group">
                <div class="w-32 h-32 rounded-full overflow-hidden bg-gradient-to-br from-purple-500 to-pink-500 flex items-center justify-center text-white shadow-xl">
                    @if (!string.IsNullOrEmpty(Model.ImmagineUser))
                    {
                        <img src="@Model.ImmagineUser" alt="@Model.Nome @Model.Cognome" class="w-full h-full object-cover" id="profileImage">
                    }
                    else
                    {
                        <span class="text-4xl font-bold" id="profilePlaceholder">@ViewBag.UserInitials</span>
                    }
                </div>

                <!-- Overlay con opzioni -->
                <div class="absolute inset-0 bg-black bg-opacity-50 rounded-full opacity-0 group-hover:opacity-100 transition-opacity duration-300 flex items-center justify-center gap-2">
                    <button onclick="document.getElementById('imageUpload').click()"
                            class="bg-white text-gray-800 p-2 rounded-full hover:bg-gray-100 transition-colors"
                            title="Carica immagine">
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 9a2 2 0 012-2h.93a2 2 0 001.664-.89l.812-1.22A2 2 0 0110.07 4h3.86a2 2 0 011.664.89l.812 1.22A2 2 0 0018.07 7H19a2 2 0 012 2v9a2 2 0 01-2 2H5a2 2 0 01-2-2V9z"></path>
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 13a3 3 0 11-6 0 3 3 0 016 0z"></path>
                        </svg>
                    </button>
                    @if (!string.IsNullOrEmpty(Model.ImmagineUser))
                    {
                        <button onclick="showDeleteModal()"
                                class="bg-red-500 text-white p-2 rounded-full hover:bg-red-600 transition-colors"
                                title="Elimina immagine">
                            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                            </svg>
                        </button>
                    }
                </div>

                <!-- Input file nascosto -->
                <input type="file" id="imageUpload" accept="image/*" class="hidden" onchange="uploadImage(this)">
            </div>

            <!-- Info Section -->
            <div class="flex-1">
                <div class="mb-4">
                    <h1 class="text-3xl font-bold text-gray-900 dark:text-white mb-2">
                        @Model.Nome @Model.Cognome
                    </h1>
                    <p class="text-sm text-gray-500 dark:text-gray-400">Username</p>
                    <p class="text-base font-medium text-gray-900 dark:text-white">@Model.UserName</p>
                    @if (!string.IsNullOrEmpty(ViewBag.AbbonamentoNome))
                    {
                        <span class="inline-flex items-center px-3 py-1 mt-2 rounded-full text-sm font-medium bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200">
                            <svg class="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 20 20">
                                <path fill-rule="evenodd" d="M6.267 3.455a3.066 3.066 0 001.745-.723 3.066 3.066 0 013.976 0 3.066 3.066 0 001.745.723 3.066 3.066 0 012.812 2.812c.051.643.304 1.254.723 1.745a3.066 3.066 0 010 3.976 3.066 3.066 0 00-.723 1.745 3.066 3.066 0 01-2.812 2.812 3.066 3.066 0 00-1.745.723 3.066 3.066 0 01-3.976 0 3.066 3.066 0 00-1.745-.723 3.066 3.066 0 01-2.812-2.812 3.066 3.066 0 00-.723-1.745 3.066 3.066 0 010-3.976 3.066 3.066 0 00.723-1.745 3.066 3.066 0 012.812-2.812zm7.44 5.252a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
                            </svg>
                            @ViewBag.AbbonamentoNome
                        </span>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Sezioni Informazioni -->
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
        <!-- Informazioni Personali -->
        <div class="bg-white dark:bg-gray-800 rounded-xl shadow-lg p-6">
            <h2 class="text-xl font-semibold text-gray-900 dark:text-white mb-6 flex items-center">
                <svg class="w-6 h-6 mr-2 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                </svg>
                Informazioni Personali
            </h2>

            <div class="space-y-4">
                <div class="border-b border-gray-200 dark:border-gray-700 pb-4">
                    <p class="text-sm text-gray-500 dark:text-gray-400">Nome completo</p>
                    <p class="text-base font-medium text-gray-900 dark:text-white">@Model.Nome @Model.Cognome</p>
                </div>

                @if (!string.IsNullOrEmpty(Model.CodiceFiscale))
                {
                    <div class="border-b border-gray-200 dark:border-gray-700 pb-4">
                        <p class="text-sm text-gray-500 dark:text-gray-400">Codice Fiscale</p>
                        <p class="text-base font-medium text-gray-900 dark:text-white">@Model.CodiceFiscale</p>
                    </div>
                }

                @if (!string.IsNullOrEmpty(Model.Indirizzo))
                {
                    <div class="border-b border-gray-200 dark:border-gray-700 pb-4">
                        <p class="text-sm text-gray-500 dark:text-gray-400">Indirizzo</p>
                        <p class="text-base font-medium text-gray-900 dark:text-white">@Model.Indirizzo</p>
                    </div>
                }

                <div class="grid grid-cols-2 gap-4">
                    @if (!string.IsNullOrEmpty(Model.Città))
                    {
                        <div>
                            <p class="text-sm text-gray-500 dark:text-gray-400">Città</p>
                            <p class="text-base font-medium text-gray-900 dark:text-white">@Model.Città</p>
                        </div>
                    }
                    @if (!string.IsNullOrEmpty(Model.Provincia))
                    {
                        <div>
                            <p class="text-sm text-gray-500 dark:text-gray-400">Provincia</p>
                            <p class="text-base font-medium text-gray-900 dark:text-white">@Model.Provincia</p>
                        </div>
                    }
                </div>

                @if (!string.IsNullOrEmpty(Model.CAP))
                {
                    <div class="pt-4">
                        <p class="text-sm text-gray-500 dark:text-gray-400">CAP</p>
                        <p class="text-base font-medium text-gray-900 dark:text-white">@Model.CAP</p>
                    </div>
                }
            </div>
        </div>

        <!-- Informazioni di Contatto e Account -->
        <div class="bg-white dark:bg-gray-800 rounded-xl shadow-lg p-6">
            <h2 class="text-xl font-semibold text-gray-900 dark:text-white mb-6 flex items-center">
                <svg class="w-6 h-6 mr-2 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
                </svg>
                Contatti e Account
            </h2>

            <div class="space-y-4">
                <div class="border-b border-gray-200 dark:border-gray-700 pb-4">
                    <p class="text-sm text-gray-500 dark:text-gray-400">Email</p>
                    <p class="text-base font-medium text-gray-900 dark:text-white">@Model.Email</p>
                </div>

                @if (!string.IsNullOrEmpty(Model.PhoneNumber))
                {
                    <div class="border-b border-gray-200 dark:border-gray-700 pb-4">
                        <p class="text-sm text-gray-500 dark:text-gray-400">Telefono</p>
                        <p class="text-base font-medium text-gray-900 dark:text-white">+39 @Model.PhoneNumber</p>
                    </div>
                }

                <div class="border-b border-gray-200 dark:border-gray-700 pb-4">
                    <p class="text-sm text-gray-500 dark:text-gray-400">Username</p>
                    <p class="text-base font-medium text-gray-900 dark:text-white">@Model.UserName</p>
                </div>

                <div class="border-b border-gray-200 dark:border-gray-700 pb-4">
                    <p class="text-sm text-gray-500 dark:text-gray-400">Data registrazione</p>
                    <span class="inline-flex items-center px-3 py-1 mt-2 rounded-full text-sm font-medium bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200">
                        <svg class="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M6.267 3.455a3.066 3.066 0 001.745-.723 3.066 3.066 0 013.976 0 3.066 3.066 0 001.745.723 3.066 3.066 0 012.812 2.812c.051.643.304 1.254.723 1.745a3.066 3.066 0 010 3.976 3.066 3.066 0 00-.723 1.745 3.066 3.066 0 01-2.812 2.812 3.066 3.066 0 00-1.745.723 3.066 3.066 0 01-3.976 0 3.066 3.066 0 00-1.745-.723 3.066 3.066 0 01-2.812-2.812 3.066 3.066 0 00-.723-1.745 3.066 3.066 0 010-3.976 3.066 3.066 0 00.723-1.745 3.066 3.066 0 012.812-2.812zm7.44 5.252a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
                        </svg>

                        Registrato il @Model.DataRegistrazione.ToString("dd MMMM yyyy")
                    </span>
                </div>

                <div>
                    <p class="text-sm text-gray-500 dark:text-gray-400">Newsletter</p>
                    <p class="text-base font-medium text-gray-900 dark:text-white">
                        @if (Model.AcceptNewsletter)
                        {
                            <span class="flex items-center text-green-600">
                                <svg class="w-5 h-5 mr-1" fill="currentColor" viewBox="0 0 20 20">
                                    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
                                </svg>
                                Iscritto
                            </span>
                        }
                        else
                        {
                            <span class="flex items-center text-gray-500">
                                <svg class="w-5 h-5 mr-1" fill="currentColor" viewBox="0 0 20 20">
                                    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path>
                                </svg>
                                Non iscritto
                            </span>
                        }
                    </p>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal di conferma eliminazione -->
<div id="deleteModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden overflow-y-auto h-full w-full z-50">
    <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white dark:bg-gray-800">
        <div class="mt-3 text-center">
            <div class="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-red-100 dark:bg-red-900">
                <svg class="h-6 w-6 text-red-600 dark:text-red-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"></path>
                </svg>
            </div>
            <h3 class="text-lg leading-6 font-medium text-gray-900 dark:text-white mt-5">Elimina immagine profilo</h3>
            <div class="mt-2 px-7 py-3">
                <p class="text-sm text-gray-500 dark:text-gray-400">
                    Sei sicuro di voler eliminare l'immagine del profilo? L'azione non può essere annullata.
                </p>
            </div>
            <div class="items-center px-4 py-3">
                <button id="confirmDelete" class="px-4 py-2 bg-red-500 text-white text-base font-medium rounded-md w-full shadow-sm hover:bg-red-600 focus:outline-none focus:ring-2 focus:ring-red-300">
                    Elimina
                </button>
                <button onclick="closeDeleteModal()" class="mt-3 px-4 py-2 bg-gray-100 text-gray-700 text-base font-medium rounded-md w-full shadow-sm hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-gray-300 dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600">
                    Annulla
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Toast di notifica -->
<div id="toast" class="fixed bottom-4 right-4 transform translate-x-full transition-transform duration-300 z-50">
    <div class="bg-white dark:bg-gray-800 rounded-lg shadow-lg p-4 flex items-center space-x-3 min-w-[300px]">
        <div id="toastIcon"></div>
        <p id="toastMessage" class="text-sm font-medium text-gray-900 dark:text-white"></p>
    </div>
</div>
<script>
function uploadImage(input) {
    if (input.files && input.files[0]) {
        const file = input.files[0];
        const formData = new FormData();
        formData.append('profileImage', file);

        // Mostra loading
        showToast('Caricamento in corso...', 'loading');

        fetch('/Partner/UploadProfileImage', {
            method: 'POST',
            body: formData,
            headers: {
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // Aggiorna l'immagine nella pagina
                const profileImage = document.getElementById('profileImage');
                const placeholder = document.getElementById('profilePlaceholder');

                if (placeholder) {
                    // Sostituisci il placeholder con l'immagine
                    const container = placeholder.parentElement;
                    container.innerHTML = `
<img src="${data.imagePath}" alt="Profile" class="w-full h-full object-cover" id="profileImage">`;
                } else if (profileImage) {
                    // Aggiorna l'immagine esistente
                    profileImage.src = data.imagePath + '?t=' + new Date().getTime();
                }

                showToast(data.message, 'success');

                // Ricarica la pagina dopo 2 secondi per aggiornare il pulsante elimina
                setTimeout(() => location.reload(), 2000);
            } else {
                showToast(data.message, 'error');
            }
        })
        .catch(error => {
            showToast('Errore durante il caricamento', 'error');
            console.error('Error:', error);
        });
    }
}

function showDeleteModal() {
    document.getElementById('deleteModal').classList.remove('hidden');
}

function closeDeleteModal() {
    document.getElementById('deleteModal').classList.add('hidden');
}

document.getElementById('confirmDelete').addEventListener('click', function() {
    // Mostra loading
    showToast('Eliminazione in corso...', 'loading');
    closeDeleteModal();

    fetch('/Partner/DeleteProfileImage', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
        }
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            showToast(data.message, 'success');
            // Ricarica la pagina dopo 2 secondi
            setTimeout(() => location.reload(), 2000);
        } else {
            showToast(data.message, 'error');
        }
    })
    .catch(error => {
        showToast('Errore durante l\'eliminazione', 'error');
        console.error('Error:', error);
    });
});

function showToast(message, type) {
    const toast = document.getElementById('toast');
    const toastMessage = document.getElementById('toastMessage');
    const toastIcon = document.getElementById('toastIcon');

    toastMessage.textContent = message;

    // Imposta l'icona in base al tipo
    switch(type) {
        case 'success':
            toastIcon.innerHTML = `
<svg class="w-6 h-6 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
</svg>
            `;
            break;
        case 'error':
            toastIcon.innerHTML = `
<svg class="w-6 h-6 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
</svg>
            `;
            break;
        case 'loading':
            toastIcon.innerHTML = `
<svg class="animate-spin h-6 w-6 text-blue-500" fill="none" viewBox="0 0 24 24">
    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
    <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
</svg>
            `;
            break;
    }

    // Mostra il toast
    toast.classList.remove('translate-x-full');
    toast.classList.add('translate-x-0');

    // Nascondi il toast dopo 3 secondi (tranne per loading)
    if (type !== 'loading') {
        setTimeout(() => {
            toast.classList.remove('translate-x-0');
            toast.classList.add('translate-x-full');
        }, 3000);
    }
}

// Chiudi il modal cliccando fuori
window.onclick = function(event) {
    const modal = document.getElementById('deleteModal');
    if (event.target == modal) {
        closeDeleteModal();
    }
}
</script>
<script src="/js/ScriptProfilePage.js"></script>
