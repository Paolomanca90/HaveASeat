@model HaveASeat.ViewModels.SaloneDetailsViewModel

@{
    ViewData["Title"] = Model.Salone.Nome;
    var colori = Model.PersonalizzazioneColori;
    var layout = Model.LayoutPersonalizzazione;
}

@section Styles {
    <style>
        :root {
            --primary-color: @colori.ColorePrimario;
            --secondary-color: @colori.ColoreSecondario;
            --accent-color: @colori.ColoreAccento;
        }

        .salon-primary {
            color: var(--primary-color) !important;
        }

        .salon-secondary {
            color: var(--secondary-color) !important;
        }

        .salon-accent {
            color: var(--accent-color) !important;
        }

        .bg-salon-primary {
            background-color: var(--primary-color) !important;
        }

        .bg-salon-secondary {
            background-color: var(--secondary-color) !important;
        }

        .bg-salon-accent {
            background-color: var(--accent-color) !important;
        }

        .border-salon-primary {
            border-color: var(--primary-color) !important;
        }

        .border-salon-accent {
            border-color: var(--accent-color) !important;
        }

        .btn-salon-primary {
            background-color: var(--primary-color);
            border-color: var(--primary-color);
            color: white;
        }

            .btn-salon-primary:hover {
                background-color: var(--secondary-color);
                border-color: var(--secondary-color);
            }

        .btn-salon-accent {
            background-color: var(--accent-color);
            border-color: var(--accent-color);
            color: white;
        }

        .hero-gradient {
            background: linear-gradient(135deg, @colori.ColorePrimario 0%, @colori.ColoreSecondario 100%);
        }

        .service-card {
            transition: all 0.3s ease;
            border: 1px solid #e5e7eb;
        }

            .service-card:hover {
                transform: translateY(-4px);
                box-shadow: 0 10px 25px rgba(0,0,0,0.1);
                border-color: var(--primary-color);
            }

            .service-card.selected {
                border-color: var(--primary-color);
                background-color: rgba(124, 58, 237, 0.05);
            }

        .booking-summary {
            position: sticky;
            top: 120px;
        }

        .gallery-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1rem;
        }

        .gallery-item {
            aspect-ratio: 1;
            overflow: hidden;
            border-radius: 12px;
            cursor: pointer;
            transition: transform 0.3s ease;
        }

            .gallery-item:hover {
                transform: scale(1.05);
            }

        .staff-card {
            transition: all 0.3s ease;
        }

            .staff-card:hover {
                transform: translateY(-2px);
                box-shadow: 0 8px 25px rgba(0,0,0,0.1);
            }

            .staff-card.selected {
                border-color: var(--primary-color);
                background-color: rgba(124, 58, 237, 0.05);
            }

        .booking-section {
            opacity: 0.5;
            pointer-events: none;
            transition: all 0.3s ease;
        }

            .booking-section.active {
                opacity: 1;
                pointer-events: auto;
            }

        .step-indicator {
            position: relative;
        }

            .step-indicator::before {
                content: '';
                position: absolute;
                top: 35%;
                left: 0;
                right: 0;
                height: 2px;
                background: #e5e7eb;
                z-index: 1;
            }

        .step-indicator-item {
            position: relative;
            z-index: 2;
            width: 40px;
            height: 40px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            background: white;
            border: 2px solid #e5e7eb;
            transition: all 0.3s ease;
        }

            .step-indicator-item.active {
                background: var(--primary-color);
                border-color: var(--primary-color);
                color: white;
            }

            .step-indicator-item.completed {
                background: #10b981;
                border-color: #10b981;
                color: white;
            }

        .fade-in {
            animation: fadeIn 0.5s ease-in;
        }

        @@keyframes fadeIn {
            from

        {
            opacity: 0;
            transform: translateY(20px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }

        }

        .summary-card {
            background: linear-gradient(135deg, rgba(255,255,255,0.9) 0%, rgba(248,250,252,0.9) 100%);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255,255,255,0.3);
        }

        .dark .summary-card {
            background: linear-gradient(135deg, rgba(31,41,55,0.9) 0%, rgba(17,24,39,0.9) 100%);
            border: 1px solid rgba(75,85,99,0.3);
        }
    </style>
}

<!-- Header del salone con breadcrumb -->
<nav class="bg-gray-50 dark:bg-gray-800 py-4">
    <div class="container mx-auto px-4">
        <div class="flex items-center space-x-2 text-sm">
            <a href="/Search" class="text-gray-600 dark:text-gray-400 hover:text-purple-600">Ricerca</a>
            <i class="fas fa-chevron-right text-gray-400"></i>
            <a href="/Search?location=@Model.Salone.Citta" class="text-gray-600 dark:text-gray-400 hover:text-purple-600">@Model.Salone.Citta</a>
            <i class="fas fa-chevron-right text-gray-400"></i>
            <span class="salon-primary font-medium">@Model.Salone.Nome</span>
        </div>
    </div>
</nav>

<!-- Hero Section del Salone -->
<section class="relative">
    @if (Model.CoverImage != null)
    {
        <div class="h-96 bg-gray-200 relative overflow-hidden">
            <img src="@Model.CoverImage.Percorso" alt="@Model.Salone.Nome" class="w-full h-full object-cover">
            <div class="absolute inset-0 hero-gradient opacity-70"></div>
        </div>
    }
    else
    {
        <div class="h-96 hero-gradient"></div>
    }

    <!-- Overlay con informazioni principali -->
    <div class="absolute inset-0 flex items-end">
        <div class="container mx-auto px-4 pb-8">
            <div class="text-white">
                <div class="flex items-center space-x-4 mb-4">
                    @if (Model.Salone.SalonePersonalizzazione?.LogoUrl != null)
                    {
                        <img src="@Model.Salone.SalonePersonalizzazione.LogoUrl" alt="@Model.Salone.Nome" class="w-16 h-16 rounded-xl bg-white p-2 shadow-lg">
                    }
                    <div>
                        <h1 class="text-4xl font-bold mb-2">@Model.Salone.Nome</h1>
                        @if (!string.IsNullOrEmpty(Model.Salone.SalonePersonalizzazione?.Slogan))
                        {
                            <p class="text-xl opacity-90">@Model.Salone.SalonePersonalizzazione.Slogan</p>
                        }
                    </div>
                </div>

                <div class="flex items-center space-x-6 text-sm">
                    <div class="flex items-center">
                        <i class="fas fa-map-marker-alt mr-2"></i>
                        <span>@Model.Salone.Indirizzo, @Model.Salone.Citta</span>
                    </div>
                    <div class="flex items-center">
                        @if (Model.MediaVoti > 0)
                        {
                            <div class="flex items-center bg-white/20 backdrop-blur-sm rounded-lg px-3 py-1">
                                <i class="fas fa-star text-yellow-400 mr-1"></i>
                                <span class="font-semibold">@Model.VotiDisplay</span>
                                <span class="ml-1 opacity-75">(@Model.Salone.Recensioni.Count recensioni)</span>
                            </div>
                        }
                    </div>
                    <div class="flex items-center">
                        <i class="fas fa-phone mr-2"></i>
                        <a href="tel:@Model.Salone.Telefono" class="hover:underline">@Model.Salone.Telefono</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<div class="container mx-auto px-4 py-8">
    <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
        <!-- Contenuto principale - 2 colonne -->
        <div class="lg:col-span-2">

            <!-- Progress Indicator -->
            <div class="mb-8 bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm border border-gray-200 dark:border-gray-700">
                <h2 class="text-2xl font-bold text-gray-900 dark:text-white mb-6 salon-primary">
                    <i class="fas fa-calendar-check mr-3"></i>
                    Prenota il tuo Appuntamento
                </h2>

                <!-- Step Indicator -->
                <div class="step-indicator flex items-center justify-between mb-8">
                    <div class="flex flex-col items-center">
                        <div class="step-indicator-item active" id="step-1">1</div>
                        <span class="font-medium text-gray-900 dark:text-white">Servizio</span>
                    </div>
                    @if (Model.MostraSceltaDipendente)
                    {
                        <div class="flex flex-col items-center">
                            <div class="step-indicator-item" id="step-2">2</div>
                            <span class="font-medium text-gray-500 dark:text-gray-400">Professionista</span>
                        </div>
                    }
                    <div class="flex flex-col items-center">
                        <div class="step-indicator-item" id="step-@(Model.MostraSceltaDipendente ? "3" : "2")">@(Model.MostraSceltaDipendente ? "3" : "2")</div>
                        <span class="font-medium text-gray-500 dark:text-gray-400">Data e Ora</span>
                    </div>
                    <div class="flex flex-col items-center">
                        <div class="step-indicator-item" id="step-@(Model.MostraSceltaDipendente ? "4" : "3")">@(Model.MostraSceltaDipendente ? "4" : "3")</div>
                        <span class="font-medium text-gray-500 dark:text-gray-400">Conferma</span>
                    </div>
                </div>

                <!-- Booking Flow Content -->
                <div id="bookingFlow">
                    <!-- Step 1: Selezione Servizio -->
                    <div id="booking-step-1" class="booking-section active fade-in">
                        <h3 class="text-xl font-semibold text-gray-900 dark:text-white mb-6">Scegli il servizio</h3>

                        @if (Model.ServiziPerCategoria.Any())
                        {
                            @foreach (var categoria in Model.ServiziPerCategoria)
                            {
                                <div class="mb-8 last:mb-0">
                                    <h4 class="text-lg font-semibold text-gray-800 dark:text-gray-200 mb-4 border-b border-gray-200 dark:border-gray-700 pb-2">
                                        @categoria.Key
                                    </h4>

                                    <div class="grid grid-cols-1 gap-4">
                                        @foreach (var servizio in categoria.Value)
                                        {
                                            <div class="service-card bg-white dark:bg-gray-700 p-6 rounded-lg cursor-pointer"
                                                 data-service-id="@servizio.ServizioId"
                                                 data-service-name="@servizio.Nome"
                                                 data-service-price="@servizio.PrezzoEffettivo"
                                                 data-service-duration="@servizio.Durata"
                                                 onclick="selectService('@servizio.ServizioId', '@servizio.Nome', @servizio.PrezzoEffettivo, @servizio.Durata)">

                                                <div class="flex justify-between items-start">
                                                    <div class="flex-1">
                                                        <div class="flex items-center justify-between mb-3">
                                                            <h5 class="font-semibold text-lg text-gray-900 dark:text-white">@servizio.Nome</h5>
                                                            @if (servizio.IsPromotion && servizio.DataFinePromozione > DateTime.Now)
                                                            {
                                                                <span class="bg-red-500 text-white px-2 py-1 rounded-full text-xs font-medium ml-2">
                                                                    PROMO
                                                                </span>
                                                            }
                                                        </div>

                                                        @if (!string.IsNullOrEmpty(servizio.Descrizione))
                                                        {
                                                            <p class="text-gray-600 dark:text-gray-400 mb-4">@servizio.Descrizione</p>
                                                        }

                                                        <div class="flex items-center justify-between">
                                                            <div class="flex items-center space-x-4">
                                                                <div class="flex items-center space-x-2">
                                                                    @if (servizio.IsPromotion && servizio.DataFinePromozione > DateTime.Now)
                                                                    {
                                                                        <span class="text-xl font-bold salon-accent">€@servizio.PrezzoPromozione.ToString("F2")</span>
                                                                        <span class="text-sm text-gray-400 line-through">€@servizio.Prezzo.ToString("F2")</span>
                                                                    }
                                                                    else
                                                                    {
                                                                        <span class="text-xl font-bold salon-primary">€@servizio.Prezzo.ToString("F2")</span>
                                                                    }
                                                                </div>

                                                                <div class="text-sm text-gray-500 dark:text-gray-400 flex items-center">
                                                                    <i class="fas fa-clock mr-1"></i>
                                                                    @servizio.Durata min
                                                                </div>
                                                            </div>

                                                            <div class="w-6 h-6 border-2 border-gray-300 rounded-full flex items-center justify-center">
                                                                <div class="w-3 h-3 bg-salon-primary rounded-full hidden service-selected-indicator"></div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                </div>
                            }
                        }

                        <div class="flex justify-end mt-6">
                            <button id="continue-step-1" class="btn-salon-primary px-8 py-3 rounded-lg font-medium disabled:opacity-50" disabled onclick="nextStep()">
                                Continua
                                <i class="fas fa-arrow-right ml-2"></i>
                            </button>
                        </div>
                    </div>

                    <!-- Step 2: Selezione Staff (solo se abilitato) -->
                    @if (Model.MostraSceltaDipendente)
                    {
                        <div id="booking-step-2" class="booking-section">
                            <h3 class="text-xl font-semibold text-gray-900 dark:text-white mb-6">Scegli il professionista</h3>

                            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                                @foreach (var dipendente in Model.DipendenteDisponibile)
                                {
                                    <div class="staff-card p-6 border border-gray-200 dark:border-gray-700 rounded-lg cursor-pointer"
                                         data-staff-id="@dipendente.DipendenteId"
                                         data-staff-name="@dipendente.ApplicationUser.Nome @dipendente.ApplicationUser.Cognome"
                                         onclick="selectStaff('@dipendente.DipendenteId', '@dipendente.ApplicationUser.Nome @dipendente.ApplicationUser.Cognome')">

                                        <div class="flex items-center space-x-4">
                                            <div class="w-16 h-16 bg-gray-200 dark:bg-gray-700 rounded-full overflow-hidden">
                                                @if (!string.IsNullOrEmpty(dipendente.ApplicationUser.ImmagineUser))
                                                {
                                                    <img src="@dipendente.ApplicationUser.ImmagineUser" alt="@dipendente.ApplicationUser.Nome @dipendente.ApplicationUser.Cognome" class="w-full h-full object-cover">
                                                }
                                                else
                                                {
                                                    <div class="w-full h-full bg-salon-primary flex items-center justify-center text-white font-bold">
                                                        @dipendente.ApplicationUser.Nome?.FirstOrDefault()@dipendente.ApplicationUser.Cognome?.FirstOrDefault()
                                                    </div>
                                                }
                                            </div>
                                            <div class="flex-1">
                                                <h4 class="font-semibold text-gray-900 dark:text-white">
                                                    @dipendente.ApplicationUser.Nome @dipendente.ApplicationUser.Cognome
                                                </h4>
                                                @if (dipendente.ServiziOfferti.Any())
                                                {
                                                    <p class="text-sm text-gray-600 dark:text-gray-400">
                                                        Specialista in @string.Join(", ", dipendente.ServiziOfferti.Take(3).Select(s => s.Servizio.Nome))
                                                    </p>
                                                }
                                            </div>
                                            <div class="w-6 h-6 border-2 border-gray-300 rounded-full flex items-center justify-center">
                                                <div class="w-3 h-3 bg-salon-primary rounded-full hidden staff-selected-indicator"></div>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>

                            <div class="flex justify-between mt-6">
                                <button class="border-2 border-salon-primary salon-primary px-8 py-3 rounded-lg font-medium" onclick="prevStep()">
                                    <i class="fas fa-arrow-left mr-2"></i>
                                    Indietro
                                </button>
                                <button id="continue-step-2" class="btn-salon-primary px-8 py-3 rounded-lg font-medium disabled:opacity-50" disabled onclick="nextStep()">
                                    Continua
                                    <i class="fas fa-arrow-right ml-2"></i>
                                </button>
                            </div>
                        </div>
                    }

                    <!-- Step 3/2: Selezione Data e Ora -->
                    <div id="booking-step-@(Model.MostraSceltaDipendente ? "3" : "2")" class="booking-section">
                        <h3 class="text-xl font-semibold text-gray-900 dark:text-white mb-6">Scegli data e orario</h3>

                        <div class="grid grid-cols-1 gap-6">
                            <!-- Selezione Data -->
                            <div>
                                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-3">Seleziona la data</label>
                                <input type="date" id="bookingDate"
                                       min="@DateTime.Now.ToString("yyyy-MM-dd")"
                                       max="@DateTime.Now.AddMonths(2).ToString("yyyy-MM-dd")"
                                       class="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-purple-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                                       onchange="loadAvailableSlots()">
                            </div>

                            <!-- Orari Disponibili -->
                            <div id="slotsContainer" class="hidden">
                                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-3">Orari disponibili</label>
                                <div id="availableSlots" class="grid grid-cols-2 gap-2 max-h-48 overflow-y-auto">
                                    <!-- Slots will be loaded here -->
                                </div>
                            </div>
                        </div>

                        <div id="slotsLoading" class="hidden text-center py-8">
                            <i class="fas fa-spinner fa-spin text-purple-600 mr-2"></i>
                            <span class="text-gray-600 dark:text-gray-400">Caricamento orari...</span>
                        </div>

                        <div class="flex justify-between mt-6">
                            <button class="border-2 border-salon-primary salon-primary px-8 py-3 rounded-lg font-medium" onclick="prevStep()">
                                <i class="fas fa-arrow-left mr-2"></i>
                                Indietro
                            </button>
                            <button id="continue-step-@(Model.MostraSceltaDipendente ? "3" : "2")" class="btn-salon-primary px-8 py-3 rounded-lg font-medium disabled:opacity-50" disabled onclick="nextStep()">
                                Continua
                                <i class="fas fa-arrow-right ml-2"></i>
                            </button>
                        </div>
                    </div>

                    <!-- Step 4/3: Dati Cliente e Conferma -->
                    <div id="booking-step-@(Model.MostraSceltaDipendente ? "4" : "3")" class="booking-section">
                        <h3 class="text-xl font-semibold text-gray-900 dark:text-white mb-6">Conferma i tuoi dati</h3>

                        @if (User.Identity.IsAuthenticated)
                        {
                            <div class="bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 rounded-lg p-6 mb-6">
                                <div class="flex items-center text-green-800 dark:text-green-200">
                                    <i class="fas fa-check-circle mr-3 text-xl"></i>
                                    <span class="font-medium">I tuoi dati sono già salvati nel tuo profilo</span>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="space-y-4 mb-6">
                                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                                    <div>
                                        <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Nome</label>
                                        <input type="text" id="customerName" required
                                               class="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-purple-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white">
                                    </div>
                                    <div>
                                        <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Cognome</label>
                                        <input type="text" id="customerSurname" required
                                               class="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-purple-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white">
                                    </div>
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Email</label>
                                    <input type="email" id="customerEmail" required
                                           class="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-purple-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white">
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Telefono</label>
                                    <input type="tel" id="customerPhone" required
                                           class="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-purple-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white">
                                </div>
                            </div>
                        }

                        <div class="mb-6">
                            <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Note aggiuntive (opzionale)</label>
                            <textarea id="bookingNotes" rows="3"
                                      placeholder="Richieste speciali, allergie, ecc..."
                                      class="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-purple-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"></textarea>
                        </div>

                        <!-- Politiche -->
                        <div class="bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg p-4 mb-6">
                            <h4 class="font-medium text-yellow-800 dark:text-yellow-200 mb-2">Politiche di cancellazione</h4>
                            <ul class="text-sm text-yellow-700 dark:text-yellow-300 space-y-1">
                                <li>• Cancellazione gratuita fino a 24 ore prima</li>
                                <li>• Arrivo in ritardo oltre 15 minuti: appuntamento rimandato</li>
                                <li>• Pagamento al termine del servizio</li>
                            </ul>
                        </div>

                        <div class="flex justify-between">
                            <button class="border-2 border-salon-primary salon-primary px-8 py-3 rounded-lg font-medium" onclick="prevStep()">
                                <i class="fas fa-arrow-left mr-2"></i>
                                Indietro
                            </button>
                            <button id="confirmBooking" class="btn-salon-accent px-8 py-3 rounded-lg font-medium" onclick="confirmBooking()">
                                <i class="fas fa-check mr-2"></i>
                                Conferma Prenotazione
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Altre sezioni (Galleria, Team, Recensioni) -->
            @if (layout.MostraGalleria && Model.GalleryImages.Any())
            {
                <section id="galleria" class="bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm border border-gray-200 dark:border-gray-700 mb-8">
                    <h2 class="text-2xl font-bold text-gray-900 dark:text-white mb-6 salon-primary">
                        <i class="fas fa-images mr-3"></i>
                        Galleria
                    </h2>

                    <div class="gallery-grid">
                        @foreach (var immagine in Model.GalleryImages)
                        {
                            <div class="gallery-item" onclick="openGallery('@immagine.Percorso')">
                                <img src="@immagine.Percorso" alt="Galleria @Model.Salone.Nome" class="w-full h-full object-cover">
                            </div>
                        }
                    </div>
                </section>
            }

            @if (layout.MostraRecensioni && Model.RecensioniRecenti.Any())
            {
                <section id="recensioni" class="bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm border border-gray-200 dark:border-gray-700">
                    <h2 class="text-2xl font-bold text-gray-900 dark:text-white mb-6 salon-primary">
                        <i class="fas fa-star mr-3"></i>
                        Recensioni dei Clienti
                    </h2>

                    <div class="space-y-4">
                        @foreach (var recensione in Model.RecensioniRecenti)
                        {
                            <div class="border-b border-gray-200 dark:border-gray-700 pb-4 last:border-b-0">
                                <div class="flex items-start space-x-4">
                                    <div class="w-12 h-12 bg-salon-primary rounded-full flex items-center justify-center text-white font-bold">
                                        @recensione.ApplicationUser.Nome?.FirstOrDefault()@recensione.ApplicationUser.Cognome?.FirstOrDefault()
                                    </div>
                                    <div class="flex-1">
                                        <div class="flex items-center justify-between mb-2">
                                            <h4 class="font-semibold text-gray-900 dark:text-white">
                                                @recensione.ApplicationUser.Nome @recensione.ApplicationUser.Cognome
                                            </h4>
                                            <div class="flex items-center">
                                                @for (int i = 1; i <= 5; i++)
                                                {
                                                    <i class="fas fa-star @(i <= recensione.Voto ? "text-yellow-400" : "text-gray-300")"></i>
                                                }
                                            </div>
                                        </div>
                                        <p class="text-gray-600 dark:text-gray-400">@recensione.Commento</p>
                                        <p class="text-sm text-gray-500 dark:text-gray-500 mt-2">@recensione.DataCreazione.ToString("dd MMMM yyyy")</p>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </section>
            }
        </div>

        <!-- Sidebar Riepilogo - 1 colonna -->
        <div class="lg:col-span-1">
            <div class="booking-summary">
                <!-- Riepilogo Prenotazione -->
                <div class="summary-card rounded-xl shadow-lg p-6 mb-6 border border-gray-200 dark:border-gray-700">
                    <h3 class="text-xl font-bold text-gray-900 dark:text-white mb-6">
                        <i class="fas fa-receipt mr-3 salon-primary"></i>
                        Riepilogo
                    </h3>

                    <div id="summaryContent" class="space-y-4">
                        <div id="summaryEmpty" class="text-center py-8">
                            <i class="fas fa-clipboard-list text-4xl text-gray-300 mb-3"></i>
                            <p class="text-gray-500 dark:text-gray-400">Seleziona un servizio per vedere il riepilogo</p>
                        </div>

                        <div id="summaryDetails" class="hidden space-y-4">
                            <!-- Servizio -->
                            <div class="border-b border-gray-200 dark:border-gray-700 pb-4">
                                <div class="flex justify-between items-start">
                                    <div>
                                        <h4 class="font-medium text-gray-900 dark:text-white" id="summaryServiceName"></h4>
                                        <p class="text-sm text-gray-600 dark:text-gray-400">
                                            <span id="summaryServiceDuration"></span> minuti
                                        </p>
                                    </div>
                                    <div class="text-right">
                                        <p class="font-bold text-lg salon-primary" id="summaryServicePrice"></p>
                                    </div>
                                </div>
                            </div>

                            <!-- Professionista -->
                            <div id="summaryStaffSection" class="border-b border-gray-200 dark:border-gray-700 pb-4 hidden">
                                <div class="flex items-center space-x-3">
                                    <i class="fas fa-user-tie salon-primary"></i>
                                    <div>
                                        <p class="text-sm text-gray-600 dark:text-gray-400">Professionista</p>
                                        <p class="font-medium text-gray-900 dark:text-white" id="summaryStaffName"></p>
                                    </div>
                                </div>
                            </div>

                            <!-- Data e Ora -->
                            <div id="summaryDateTimeSection" class="border-b border-gray-200 dark:border-gray-700 pb-4 hidden">
                                <div class="space-y-3">
                                    <div class="flex items-center space-x-3">
                                        <i class="fas fa-calendar salon-primary"></i>
                                        <div>
                                            <p class="text-sm text-gray-600 dark:text-gray-400">Data</p>
                                            <p class="font-medium text-gray-900 dark:text-white" id="summaryDate"></p>
                                        </div>
                                    </div>
                                    <div class="flex items-center space-x-3">
                                        <i class="fas fa-clock salon-primary"></i>
                                        <div>
                                            <p class="text-sm text-gray-600 dark:text-gray-400">Orario</p>
                                            <p class="font-medium text-gray-900 dark:text-white" id="summaryTime"></p>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Totale -->
                            <div class="bg-gradient-to-r from-purple-50 to-pink-50 dark:from-purple-900/20 dark:to-pink-900/20 rounded-lg p-4">
                                <div class="flex justify-between items-center">
                                    <span class="text-lg font-semibold text-gray-900 dark:text-white">Totale</span>
                                    <span class="text-2xl font-bold salon-primary" id="summaryTotal"></span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Informazioni Salone -->
                <div class="bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm border border-gray-200 dark:border-gray-700 mb-6">
                    <h3 class="font-semibold text-gray-900 dark:text-white mb-4">
                        <i class="fas fa-info-circle mr-2 salon-primary"></i>
                        Informazioni Salone
                    </h3>
                    <div class="space-y-3">
                        <div class="flex items-start space-x-3">
                            <i class="fas fa-map-marker-alt text-salon-primary mt-1"></i>
                            <div>
                                <p class="text-sm font-medium text-gray-900 dark:text-white">Indirizzo</p>
                                <p class="text-sm text-gray-600 dark:text-gray-400">@Model.Salone.Indirizzo, @Model.Salone.Citta</p>
                            </div>
                        </div>
                        <div class="flex items-start space-x-3">
                            <i class="fas fa-phone text-salon-primary mt-1"></i>
                            <div>
                                <p class="text-sm font-medium text-gray-900 dark:text-white">Telefono</p>
                                <a href="tel:@Model.Salone.Telefono" class="text-sm text-salon-primary hover:underline">@Model.Salone.Telefono</a>
                            </div>
                        </div>
                        <div class="flex items-start space-x-3">
                            <i class="fas fa-envelope text-salon-primary mt-1"></i>
                            <div>
                                <p class="text-sm font-medium text-gray-900 dark:text-white">Email</p>
                                <a href="mailto:@Model.Salone.Email" class="text-sm text-salon-primary hover:underline">@Model.Salone.Email</a>
                            </div>
                        </div>
                    </div>

                    <div class="mt-4 pt-4 border-t border-gray-200 dark:border-gray-700">
                        <button onclick="getDirections()" class="w-full btn-salon-primary px-4 py-2 rounded-lg font-medium transition-colors">
                            <i class="fas fa-directions mr-2"></i>
                            Ottieni Indicazioni
                        </button>
                    </div>
                </div>

                <!-- Social Links -->
                @if (!string.IsNullOrEmpty(Model.Salone.SalonePersonalizzazione?.InstagramUrl) ||
                                !string.IsNullOrEmpty(Model.Salone.SalonePersonalizzazione?.FacebookUrl) ||
                                !string.IsNullOrEmpty(Model.Salone.SalonePersonalizzazione?.TiktokUrl))
                {
                    <div class="bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm border border-gray-200 dark:border-gray-700">
                        <h3 class="font-semibold text-gray-900 dark:text-white mb-4">
                            <i class="fas fa-share-alt mr-2 salon-primary"></i>
                            Seguici sui social
                        </h3>
                        <div class="flex space-x-3">
                            @if (!string.IsNullOrEmpty(Model.Salone.SalonePersonalizzazione?.InstagramUrl))
                            {
                                <a href="@Model.Salone.SalonePersonalizzazione.InstagramUrl" target="_blank"
                                   class="w-10 h-10 bg-salon-primary rounded-lg flex items-center justify-center text-white hover:bg-salon-secondary transition-colors">
                                    <i class="fab fa-instagram"></i>
                                </a>
                            }
                            @if (!string.IsNullOrEmpty(Model.Salone.SalonePersonalizzazione?.FacebookUrl))
                            {
                                <a href="@Model.Salone.SalonePersonalizzazione.FacebookUrl" target="_blank"
                                   class="w-10 h-10 bg-salon-primary rounded-lg flex items-center justify-center text-white hover:bg-salon-secondary transition-colors">
                                    <i class="fab fa-facebook"></i>
                                </a>
                            }
                            @if (!string.IsNullOrEmpty(Model.Salone.SalonePersonalizzazione?.TiktokUrl))
                            {
                                <a href="@Model.Salone.SalonePersonalizzazione.TiktokUrl" target="_blank"
                                   class="w-10 h-10 bg-salon-primary rounded-lg flex items-center justify-center text-white hover:bg-salon-secondary transition-colors">
                                    <i class="fab fa-tiktok"></i>
                                </a>
                            }
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<!-- Modal per Galleria Immagini -->
<div id="galleryModal" class="fixed inset-0 bg-black bg-opacity-75 z-50 hidden flex items-center justify-center p-4" onclick="closeGallery()">
    <div class="max-w-4xl max-h-full relative">
        <img id="galleryImage" src="" alt="" class="max-w-full max-h-full object-contain">
        <button onclick="closeGallery()" class="absolute top-4 right-4 text-white text-2xl hover:text-gray-300">
            <i class="fas fa-times"></i>
        </button>
        <div class="absolute bottom-4 left-1/2 transform -translate-x-1/2 text-white text-center">
            <p class="bg-black bg-opacity-50 px-4 py-2 rounded-lg">@Model.Salone.Nome</p>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Stato della prenotazione
        let bookingState = {
            currentStep: 1,
            saloneId: '@Model.Salone.SaloneId',
            servizioId: null,
            serviceName: '',
            servicePrice: 0,
            serviceDuration: 0,
            dipendenteId: null,
            staffName: '',
            selectedDate: '',
            selectedTimeSlot: null,
            slotTime: '',
            showStaffSelection: @Model.MostraSceltaDipendente.ToString().ToLower(),
            maxSteps: '@Model.MostraSceltaDipendente' == 'True' ? 4 : 3
        };

        // Inizializzazione
        document.addEventListener('DOMContentLoaded', function() {
            console.log('Booking widget initialized with state:', bookingState);

            // Imposta data minima a domani
            const dateInput = document.getElementById('bookingDate');
            if (dateInput) {
                const tomorrow = new Date();
                tomorrow.setDate(tomorrow.getDate() + 1);
                dateInput.min = tomorrow.toISOString().split('T')[0];
                dateInput.value = tomorrow.toISOString().split('T')[0];
            }

            // Event listeners per dati cliente
            const customerInputs = ['customerName', 'customerSurname', 'customerEmail', 'customerPhone'];
            customerInputs.forEach(inputId => {
                const input = document.getElementById(inputId);
                if (input) {
                    input.addEventListener('input', updateContinueButton);
                }
            });
        });

        // Selezione servizio
        function selectService(servizioId, serviceName, price, duration) {
            console.log('Selecting service:', { servizioId, serviceName, price, duration });

            // Rimuovi selezione precedente
            document.querySelectorAll('.service-card').forEach(card => {
                card.classList.remove('selected');
                card.querySelector('.service-selected-indicator').classList.add('hidden');
            });

            // Seleziona il servizio corrente
            const selectedCard = document.querySelector(`[data-service-id="${servizioId}"]`);
            if (selectedCard) {
                selectedCard.classList.add('selected');
                selectedCard.querySelector('.service-selected-indicator').classList.remove('hidden');
            }

            // Aggiorna lo stato
            bookingState.servizioId = servizioId;
            bookingState.serviceName = serviceName;
            bookingState.servicePrice = price;
            bookingState.serviceDuration = duration;

            // Reset selezioni successive
            resetSubsequentSelections();

            // Aggiorna UI
            updateSummary();
            updateContinueButton();
        }

        // Selezione staff
        function selectStaff(dipendenteId, staffName) {
            console.log('Selecting staff:', { dipendenteId, staffName });

            // Rimuovi selezione precedente
            document.querySelectorAll('.staff-card').forEach(card => {
                card.classList.remove('selected');
                card.querySelector('.staff-selected-indicator').classList.add('hidden');
            });

            // Seleziona il staff corrente
            const selectedCard = document.querySelector(`[data-staff-id="${dipendenteId}"]`);
            if (selectedCard) {
                selectedCard.classList.add('selected');
                selectedCard.querySelector('.staff-selected-indicator').classList.remove('hidden');
            }

            // Aggiorna lo stato
            bookingState.dipendenteId = dipendenteId;
            bookingState.staffName = staffName;

            // Reset selezioni successive
            bookingState.selectedTimeSlot = null;
            bookingState.slotTime = '';
            bookingState.selectedDate = '';

            // Aggiorna UI
            updateSummary();
            updateContinueButton();

            // Ricarica gli slot se la data è già selezionata
            if (bookingState.selectedDate) {
                loadAvailableSlots();
            }
        }

        // Caricamento slot disponibili
        function loadAvailableSlots() {
            const date = document.getElementById('bookingDate').value;
            if (!date) return;

            console.log('Loading slots for:', {
                date,
                saloneId: bookingState.saloneId,
                servizioId: bookingState.servizioId,
                dipendenteId: bookingState.dipendenteId
            });

            bookingState.selectedDate = date;
            bookingState.selectedTimeSlot = null;
            bookingState.slotTime = '';

            const slotsContainer = document.getElementById('slotsContainer');
            const slotsGrid = document.getElementById('availableSlots');
            const loadingIndicator = document.getElementById('slotsLoading');

            // Mostra loading
            if (loadingIndicator) {
                loadingIndicator.classList.remove('hidden');
            }
            if (slotsContainer) {
                slotsContainer.classList.add('hidden');
            }

            // Costruisci URL con tutti i parametri necessari
            let url = `/Search/GetAvailableSlots?saloneId=${bookingState.saloneId}&data=${date}`;

            if (bookingState.servizioId) {
                url += `&servizioId=${bookingState.servizioId}`;
            }

            if (bookingState.dipendenteId) {
                url += `&dipendenteId=${bookingState.dipendenteId}`;
            }

            console.log('Fetching slots from:', url);

            // Chiamata AJAX per caricare gli slot
            fetch(url)
                .then(response => response.json())
                .then(data => {
                    console.log('Slots response:', data);

                    // Nascondi loading
                    if (loadingIndicator) {
                        loadingIndicator.classList.add('hidden');
                    }

                    if (data.success && data.slots && data.slots.length > 0) {
                        slotsGrid.innerHTML = data.slots.map(slot => `
                            <button onclick="selectSlot('${slot.slotId}', '${slot.display}')"
                                    class="slot-option p-3 text-sm border border-gray-300 dark:border-gray-600 rounded-lg hover:border-salon-primary transition-colors bg-white dark:bg-gray-800 hover:bg-purple-50 dark:hover:bg-purple-900/20"
                                    data-slot-id="${slot.slotId}"
                                    data-time="${slot.display}">
                                <div class="font-medium">${slot.display}</div>
                                <div class="text-xs text-gray-500 mt-1">${slot.serviceDurationMinutes || bookingState.serviceDuration} min</div>
                            </button>
                        `).join('');

                        slotsContainer.classList.remove('hidden');
                    } else {
                        slotsGrid.innerHTML = `
                            <div class="col-span-2 text-center py-8">
                                <i class="fas fa-calendar-times text-4xl text-gray-300 mb-3"></i>
                                <div class="text-gray-500 dark:text-gray-400">
                                    <div class="font-medium mb-1">Nessun orario disponibile</div>
                                    <div class="text-sm">Prova una data diversa</div>
                                </div>
                            </div>
                        `;
                        slotsContainer.classList.remove('hidden');
                    }

                    updateContinueButton();
                })
                .catch(error => {
                    console.error('Errore caricamento slot:', error);

                    // Nascondi loading
                    if (loadingIndicator) {
                        loadingIndicator.classList.add('hidden');
                    }

                    slotsGrid.innerHTML = `
                        <div class="col-span-2 text-center py-8">
                            <i class="fas fa-exclamation-triangle text-4xl text-red-300 mb-3"></i>
                            <div class="text-red-500 dark:text-red-400">
                                <div class="font-medium mb-1">Errore nel caricamento</div>
                                <div class="text-sm">Riprova o contatta il supporto</div>
                            </div>
                        </div>
                    `;
                    slotsContainer.classList.remove('hidden');
                });
        }

        // Selezione slot
        function selectSlot(slotId, slotTime) {
            bookingState.selectedTimeSlot = slotId;
            bookingState.slotTime = slotTime;

            console.log('Slot selected:', { slotId, slotTime });

            // Evidenzia lo slot selezionato
            document.querySelectorAll('.slot-option').forEach(el => {
                el.classList.remove('border-salon-primary', 'bg-purple-50', 'dark:bg-purple-900/20');
                el.classList.add('border-gray-300', 'dark:border-gray-600');
            });

            const selectedSlot = event.target.closest('.slot-option');
            if (selectedSlot) {
                selectedSlot.classList.remove('border-gray-300', 'dark:border-gray-600');
                selectedSlot.classList.add('border-salon-primary', 'bg-purple-50', 'dark:bg-purple-900/20');
            }

            updateSummary();
            updateContinueButton();
        }

        // Navigazione tra i passi
        function nextStep() {
            if (!canProceed()) {
                console.log('Cannot proceed to next step. Current state:', bookingState);
                return;
            }

            // Nascondi step corrente
            document.getElementById(`booking-step-${bookingState.currentStep}`).classList.remove('active');
            document.getElementById(`booking-step-${bookingState.currentStep}`).classList.add('hidden');

            // Vai al prossimo step
            bookingState.currentStep++;

            // Salta lo step del personale se non abilitato
            if (bookingState.currentStep === 2 && !bookingState.showStaffSelection) {
                bookingState.currentStep = 3;
            }

            // Mostra nuovo step
            document.getElementById(`booking-step-${bookingState.currentStep}`).classList.remove('hidden');
            document.getElementById(`booking-step-${bookingState.currentStep}`).classList.add('active', 'fade-in');

            updateStepIndicator();
            updateContinueButton();
        }

        function prevStep() {
            // Nascondi step corrente
            document.getElementById(`booking-step-${bookingState.currentStep}`).classList.remove('active');
            document.getElementById(`booking-step-${bookingState.currentStep}`).classList.add('hidden');

            // Vai al step precedente
            bookingState.currentStep--;

            // Salta lo step del personale se non abilitato
            if (bookingState.currentStep === 2 && !bookingState.showStaffSelection) {
                bookingState.currentStep = 1;
            }

            // Mostra step precedente
            document.getElementById(`booking-step-${bookingState.currentStep}`).classList.remove('hidden');
            document.getElementById(`booking-step-${bookingState.currentStep}`).classList.add('active', 'fade-in');

            updateStepIndicator();
            updateContinueButton();
        }

        // Verifica se si può procedere
        function canProceed() {
            switch (bookingState.currentStep) {
                case 1:
                    return bookingState.servizioId !== null;
                case 2:
                    if (!bookingState.showStaffSelection) return true;
                    return bookingState.dipendenteId !== null;
                case 3:
                    const step3Check = bookingState.selectedDate !== '' && bookingState.selectedTimeSlot !== null;
                    return bookingState.showStaffSelection ? step3Check : step3Check;
                case 4:
                    if (@User.Identity.IsAuthenticated.ToString().ToLower()) {
                        return true;
                    } else {
                        const name = document.getElementById('customerName')?.value;
                        const surname = document.getElementById('customerSurname')?.value;
                        const email = document.getElementById('customerEmail')?.value;
                        const phone = document.getElementById('customerPhone')?.value;
                        return name && surname && email && phone;
                    }
                default:
                    return false;
            }
        }

        // Aggiorna gli indicatori di step
        function updateStepIndicator() {
            for (let i = 1; i <= bookingState.maxSteps; i++) {
                const stepElement = document.getElementById(`step-${i}`);
                if (!stepElement) continue;

                stepElement.classList.remove('active', 'completed');

                if (i < bookingState.currentStep) {
                    stepElement.classList.add('completed');
                } else if (i === bookingState.currentStep) {
                    stepElement.classList.add('active');
                }
            }
        }

        // Aggiorna pulsante continua
        function updateContinueButton() {
            const canContinue = canProceed();
            const currentStepButton = document.getElementById(`continue-step-${bookingState.currentStep}`);

            if (currentStepButton) {
                currentStepButton.disabled = !canContinue;
            }
        }

        // Aggiorna il riepilogo
        function updateSummary() {
            const summaryEmpty = document.getElementById('summaryEmpty');
            const summaryDetails = document.getElementById('summaryDetails');

            if (!bookingState.servizioId) {
                summaryEmpty.classList.remove('hidden');
                summaryDetails.classList.add('hidden');
                return;
            }

            summaryEmpty.classList.add('hidden');
            summaryDetails.classList.remove('hidden');

            // Aggiorna i dettagli
            document.getElementById('summaryServiceName').textContent = bookingState.serviceName;
            document.getElementById('summaryServiceDuration').textContent = bookingState.serviceDuration;
            document.getElementById('summaryServicePrice').textContent = `€${bookingState.servicePrice.toFixed(2)}`;
            document.getElementById('summaryTotal').textContent = `€${bookingState.servicePrice.toFixed(2)}`;

            // Staff section
            const staffSection = document.getElementById('summaryStaffSection');
            if (bookingState.showStaffSelection) {
                if (bookingState.staffName) {
                    document.getElementById('summaryStaffName').textContent = bookingState.staffName;
                    staffSection.classList.remove('hidden');
                } else {
                    staffSection.classList.add('hidden');
                }
            }

            // Date/Time section
            const dateTimeSection = document.getElementById('summaryDateTimeSection');
            if (bookingState.selectedDate && bookingState.slotTime) {
                const date = new Date(bookingState.selectedDate);
                document.getElementById('summaryDate').textContent = date.toLocaleDateString('it-IT', {
                    weekday: 'long',
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric'
                });
                document.getElementById('summaryTime').textContent = bookingState.slotTime;
                dateTimeSection.classList.remove('hidden');
            } else {
                dateTimeSection.classList.add('hidden');
            }
        }

        // Reset selezioni successive
        function resetSubsequentSelections() {
            bookingState.dipendenteId = null;
            bookingState.staffName = '';
            bookingState.selectedTimeSlot = null;
            bookingState.slotTime = '';
            bookingState.selectedDate = '';

            // Reset UI staff
            document.querySelectorAll('.staff-card').forEach(card => {
                card.classList.remove('selected');
                card.querySelector('.staff-selected-indicator').classList.add('hidden');
            });

            // Reset UI slots
            document.querySelectorAll('.slot-option').forEach(el => {
                el.classList.remove('border-salon-primary', 'bg-purple-50', 'dark:bg-purple-900/20');
            });
        }

        // Conferma prenotazione
        function confirmBooking() {
            if (!canProceed()) {
                Swal.fire('Attenzione', 'Completa tutti i campi richiesti', 'warning');
                return;
            }

            const bookingData = {
                saloneId: bookingState.saloneId,
                servizioId: bookingState.servizioId,
                dipendenteId: bookingState.dipendenteId,
                data: bookingState.selectedDate,
                timeSlot: bookingState.slotTime,
                note: document.getElementById('bookingNotes')?.value || ''
            };

            // Aggiungi dati cliente se non autenticato
            if (!@User.Identity.IsAuthenticated.ToString().ToLower()) {
                bookingData.nome = document.getElementById('customerName').value;
                bookingData.cognome = document.getElementById('customerSurname').value;
                bookingData.email = document.getElementById('customerEmail').value;
                bookingData.telefono = document.getElementById('customerPhone').value;
            }

            console.log('Sending booking request:', bookingData);

            // Disabilita il pulsante
            const confirmBtn = document.getElementById('confirmBooking');
            confirmBtn.disabled = true;
            confirmBtn.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i>Prenotando...';

            // Invia la prenotazione
            fetch('/Search/CreateBooking', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
                },
                body: JSON.stringify(bookingData)
            })
            .then(response => response.json())
            .then(data => {
                console.log('Booking response:', data);

                if (data.success) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Prenotazione Confermata!',
                        html: `
                            <div class="text-left space-y-3">
                                <div class="bg-green-50 p-4 rounded-lg">
                                    <p class="font-medium text-green-800 mb-2">Dettagli della prenotazione:</p>
                                    <ul class="text-sm text-green-700 space-y-1">
                                        <li><strong>Servizio:</strong> ${bookingState.serviceName}</li>
                                        <li><strong>Data:</strong> ${document.getElementById('summaryDate')?.textContent || bookingState.selectedDate}</li>
                                        <li><strong>Orario:</strong> ${bookingState.slotTime}</li>
                                        <li><strong>Presso:</strong> @Model.Salone.Nome</li>
                                        ${bookingState.staffName ? `<li><strong>Con:</strong> ${bookingState.staffName}</li>` : ''}
                                    </ul>
                                </div>
                                <p class="text-sm text-gray-600 mt-4">
                                    <i class="fas fa-envelope mr-2"></i>
                                    Riceverai una conferma via email con tutti i dettagli.
                                </p>
                            </div>
                        `,
                        confirmButtonText: 'Perfetto!',
                        confirmButtonColor: getComputedStyle(document.documentElement).getPropertyValue('--primary-color') || '#7c3aed',
                        allowOutsideClick: false
                    }).then(() => {
                        if (data.redirectUrl) {
                            window.location.href = data.redirectUrl;
                        } else {
                            window.location.reload();
                        }
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Errore nella prenotazione',
                        text: data.message || 'Si è verificato un errore. Riprova.',
                        confirmButtonColor: '#ef4444'
                    });

                    // Riabilita il pulsante
                    confirmBtn.disabled = false;
                    confirmBtn.innerHTML = '<i class="fas fa-check mr-2"></i>Conferma Prenotazione';
                }
            })
            .catch(error => {
                console.error('Errore prenotazione:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Errore di rete',
                    text: 'Verifica la connessione e riprova.',
                    confirmButtonColor: '#ef4444'
                });

                // Riabilita il pulsante
                confirmBtn.disabled = false;
                confirmBtn.innerHTML = '<i class="fas fa-check mr-2"></i>Conferma Prenotazione';
            });
        }

        // Funzioni per la galleria
        function openGallery(imageSrc) {
            const modal = document.getElementById('galleryModal');
            const image = document.getElementById('galleryImage');
            if (modal && image) {
                image.src = imageSrc;
                modal.classList.remove('hidden');
            }
        }

        function closeGallery() {
            const modal = document.getElementById('galleryModal');
            if (modal) {
                modal.classList.add('hidden');
            }
        }

        // Indicazioni stradali
        function getDirections() {
            const address = encodeURIComponent('@Model.Salone.Indirizzo, @Model.Salone.Citta');
            window.open(`https://www.google.com/maps/dir/?api=1&destination=${address}`, '_blank');
        }

        // Scroll automatico al completamento di ogni step
        function scrollToBooking() {
            document.querySelector('#bookingFlow').scrollIntoView({
                behavior: 'smooth',
                block: 'start'
            });
        }

        // Override delle funzioni per includere scroll
        const originalNextStep = nextStep;
        nextStep = function() {
            originalNextStep();
            setTimeout(scrollToBooking, 300);
        };

        const originalPrevStep = prevStep;
        prevStep = function() {
            originalPrevStep();
            setTimeout(scrollToBooking, 300);
        };

        // Responsive behavior
        function handleResponsive() {
            const isMobile = window.innerWidth < 1024;
            const summaryContainer = document.querySelector('.booking-summary').parentElement;
            const bookingContainer = document.querySelector('#bookingFlow').parentElement;

            if (isMobile) {
                // Su mobile, sposta il riepilogo dopo il booking flow
                if (summaryContainer && bookingContainer) {
                    summaryContainer.classList.remove('lg:col-span-1');
                    summaryContainer.classList.add('lg:col-span-2');
                    bookingContainer.parentElement.appendChild(summaryContainer);
                }
            }
        }

        // Event listeners
        window.addEventListener('resize', handleResponsive);
        document.addEventListener('DOMContentLoaded', handleResponsive);

        // Auto-scroll al widget se c'è l'hash #prenota
        if (window.location.hash === '#prenota') {
            setTimeout(() => {
                document.getElementById('bookingFlow')?.scrollIntoView({ behavior: 'smooth' });
            }, 500);
        }

        // Inizializza lo step indicator
        updateStepIndicator();
    </script>
}