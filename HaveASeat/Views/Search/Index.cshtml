@model HaveASeat.ViewModels.SearchResultsViewModel
@{
    ViewData["Title"] = "Trova il tuo salone";
}

@section Styles{
    <style>
        .search-filters {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        }
        
        .salon-card {
            transition: all 0.3s ease;
            transform: translateY(0);
        }
        
        .salon-card:hover {
            transform: translateY(-8px);
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
        }
        
        .loading-skeleton {
            background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
            background-size: 200% 100%;
            animation: loading 1.5s infinite;
        }
        
        @@keyframes loading {
            0% { background-position: 200% 0; }
            100% { background-position: -200% 0; }
        }
        
        .filter-chip {
            transition: all 0.2s ease;
        }
        
        .filter-chip:hover {
            transform: translateY(-2px);
        }
    </style>
}

<!-- Hero Search Section -->
<section class="search-filters text-white py-12">
    <div class="container mx-auto px-4">
        <div class="max-w-4xl mx-auto">
            <h1 class="text-3xl md:text-4xl font-bold text-center mb-2">Trova il tuo salone perfetto</h1>
            <p class="text-lg text-center mb-8 opacity-90">Scopri i migliori saloni di bellezza nella tua zona</p>
            
            <!-- Search Form -->
            <form id="searchForm" class="bg-white rounded-2xl p-6 shadow-xl">
                <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
                    <div class="md:col-span-2">
                        <label class="block text-sm font-medium text-gray-700 mb-2">Cosa stai cercando?</label>
                        <div class="relative">
                            <input type="text" 
                                   id="searchQuery" 
                                   name="q" 
                                   value="@Model.SearchQuery"
                                   class="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent text-gray-900" 
                                   placeholder="Servizio, salone, trattamento...">
                            <i class="fas fa-search absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400"></i>
                        </div>
                        <div id="searchSuggestions" class="absolute z-10 w-full bg-white border border-gray-200 rounded-lg shadow-lg mt-1 hidden"></div>
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Dove?</label>
                        <div class="relative">
                            <input type="text" 
                                   id="locationInput" 
                                   name="location" 
                                   value="@Model.Location"
                                   class="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent text-gray-900" 
                                   placeholder="Città, provincia...">
                            <i class="fas fa-map-marker-alt absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400"></i>
                        </div>
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Quando?</label>
                        <input type="date" 
                               id="dateInput" 
                               name="data" 
                               value="@(Model.DataSelezionata?.ToString("yyyy-MM-dd") ?? DateTime.Now.AddDays(1).ToString("yyyy-MM-dd"))"
                               min="@DateTime.Now.ToString("yyyy-MM-dd")"
                               class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent text-gray-900">
                    </div>
                </div>
                
                <div class="flex flex-col sm:flex-row justify-between items-center mt-6">
                    <button type="submit" class="w-full sm:w-auto bg-purple-600 hover:bg-purple-700 text-white px-8 py-3 rounded-lg font-medium transition-colors flex items-center justify-center">
                        <i class="fas fa-search mr-2"></i>
                        Cerca Saloni
                    </button>
                    
                    <div class="mt-4 sm:mt-0">
                        <button type="button" id="toggleFilters" class="text-purple-600 hover:text-purple-700 font-medium">
                            <i class="fas fa-filter mr-2"></i>
                            Filtri Avanzati
                        </button>
                    </div>
                </div>
                
                <!-- Advanced Filters -->
                <div id="advancedFilters" class="mt-6 pt-6 border-t border-gray-200 hidden">
                    <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Categoria</label>
                            <select name="categoria" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent text-gray-900">
                                <option value="">Tutte le categorie</option>
                                @foreach (var categoria in Model.Categorie)
                                {
                                    <option value="@categoria.Nome" selected="@(categoria.Nome == Model.CategoriaSelezionata)">
                                        @categoria.Nome
                                    </option>
                                }
                            </select>
                        </div>
                        
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Valutazione minima</label>
                            <select name="rating" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent text-gray-900">
                                <option value="">Qualsiasi valutazione</option>
                                <option value="4">4+ stelle</option>
                                <option value="3">3+ stelle</option>
                                <option value="2">2+ stelle</option>
                            </select>
                        </div>
                        
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Prezzo massimo</label>
                            <select name="prezzo" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent text-gray-900">
                                <option value="">Qualsiasi prezzo</option>
                                <option value="50">Fino a €50</option>
                                <option value="100">Fino a €100</option>
                                <option value="200">Fino a €200</option>
                            </select>
                        </div>
                    </div>
                </div>
            </form>
        </div>
    </div>
</section>

<!-- Results Section -->
<section class="py-12 bg-gray-50 dark:bg-gray-900">
    <div class="container mx-auto px-4">
        
        <!-- Results Header -->
        <div class="flex flex-col lg:flex-row justify-between items-start lg:items-center mb-8">
            <div>
                <h2 class="text-2xl font-bold text-gray-900 dark:text-white mb-2">
                    @if (!string.IsNullOrEmpty(Model.SearchQuery))
                    {
                        <span>Risultati per "@Model.SearchQuery"</span>
                    }
                    else
                    {
                        <span>Saloni disponibili</span>
                    }
                    @if (!string.IsNullOrEmpty(Model.Location))
                    {
                        <span class="text-gray-600 dark:text-gray-400"> in @Model.Location</span>
                    }
                </h2>
                <p class="text-gray-600 dark:text-gray-400">@Model.ResultsText trovati</p>
            </div>
            
            <div class="flex items-center space-x-4 mt-4 lg:mt-0">
                <label class="text-sm font-medium text-gray-700 dark:text-gray-300">Ordina per:</label>
                <select id="sortSelect" class="px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent bg-white dark:bg-gray-800 text-gray-900 dark:text-white">
                    <option value="rating">Valutazione più alta</option>
                    <option value="distance">Distanza</option>
                    <option value="price_low">Prezzo: dal più basso</option>
                    <option value="price_high">Prezzo: dal più alto</option>
                    <option value="newest">Più recenti</option>
                </select>
            </div>
        </div>
        
        <!-- Quick Filters -->
        @if (Model.HasResults)
        {
            <div class="flex flex-wrap gap-3 mb-8">
                <button class="filter-chip px-4 py-2 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-full text-sm font-medium text-gray-700 dark:text-gray-300 hover:bg-purple-50 dark:hover:bg-purple-900/20 hover:border-purple-300 dark:hover:border-purple-600 hover:text-purple-700 dark:hover:text-purple-400">
                    <i class="fas fa-star text-yellow-400 mr-2"></i>
                    Con promozioni
                </button>
                <button class="filter-chip px-4 py-2 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-full text-sm font-medium text-gray-700 dark:text-gray-300 hover:bg-purple-50 dark:hover:bg-purple-900/20 hover:border-purple-300 dark:hover:border-purple-600 hover:text-purple-700 dark:hover:text-purple-400">
                    <i class="fas fa-clock mr-2"></i>
                    Disponibile oggi
                </button>
                <button class="filter-chip px-4 py-2 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-full text-sm font-medium text-gray-700 dark:text-gray-300 hover:bg-purple-50 dark:hover:bg-purple-900/20 hover:border-purple-300 dark:hover:border-purple-600 hover:text-purple-700 dark:hover:text-purple-400">
                    <i class="fas fa-user-friends mr-2"></i>
                    Scelta dipendente
                </button>
            </div>
        }
        
        <!-- Results Grid -->
        <div id="resultsContainer">
            @if (Model.HasResults)
            {
                @await Html.PartialAsync("_SearchResults", Model)
            }
            else
            {
                @await Html.PartialAsync("_NoResults")
            }
        </div>
        
        <!-- Pagination -->
        @if (Model.TotalPages > 1)
        {
            <div class="flex justify-center mt-12">
                <nav class="flex items-center space-x-2">
                    @if (Model.CurrentPage > 1)
                    {
                        <a href="?q=@Model.SearchQuery&location=@Model.Location&categoria=@Model.CategoriaSelezionata&page=@(Model.CurrentPage - 1)" 
                           class="px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-800">
                            <i class="fas fa-chevron-left"></i>
                        </a>
                    }
                    
                    @for (int i = Math.Max(1, Model.CurrentPage - 2); i <= Math.Min(Model.TotalPages, Model.CurrentPage + 2); i++)
                    {
                        <a href="?q=@Model.SearchQuery&location=@Model.Location&categoria=@Model.CategoriaSelezionata&page=@i" 
                           class="px-4 py-2 border @(i == Model.CurrentPage ? "bg-purple-600 border-purple-600 text-white" : "border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-800") rounded-lg">
                            @i
                        </a>
                    }
                    
                    @if (Model.CurrentPage < Model.TotalPages)
                    {
                        <a href="?q=@Model.SearchQuery&location=@Model.Location&categoria=@Model.CategoriaSelezionata&page=@(Model.CurrentPage + 1)" 
                           class="px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-800">
                            <i class="fas fa-chevron-right"></i>
                        </a>
                    }
                </nav>
            </div>
        }
    </div>
</section>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Toggle advanced filters
            const toggleFilters = document.getElementById('toggleFilters');
            const advancedFilters = document.getElementById('advancedFilters');
            
            toggleFilters.addEventListener('click', function() {
                advancedFilters.classList.toggle('hidden');
                const icon = this.querySelector('i');
                icon.classList.toggle('fa-filter');
                icon.classList.toggle('fa-times');
            });
            
            // Search suggestions
            const searchInput = document.getElementById('searchQuery');
            const suggestionsContainer = document.getElementById('searchSuggestions');
            let searchTimeout;
            
            searchInput.addEventListener('input', function() {
                clearTimeout(searchTimeout);
                const query = this.value.trim();
                
                if (query.length < 2) {
                    suggestionsContainer.classList.add('hidden');
                    return;
                }
                
                searchTimeout = setTimeout(() => {
                    fetch(`/Search/Suggestions?q=${encodeURIComponent(query)}`)
                        .then(response => response.json())
                        .then(data => {
                            showSuggestions(data.suggestions);
                        });
                }, 300);
            });
            
            function showSuggestions(suggestions) {
                if (suggestions.length === 0) {
                    suggestionsContainer.classList.add('hidden');
                    return;
                }
                
                suggestionsContainer.innerHTML = suggestions.map(suggestion => `
                    <div class="p-3 hover:bg-gray-50 cursor-pointer border-b border-gray-100 last:border-b-0" onclick="selectSuggestion('${suggestion.nome}', '${suggestion.id}')">
                        <div class="flex items-center">
                            <i class="fas ${suggestion.tipo === 'salone' ? 'fa-store' : 'fa-cut'} text-gray-400 mr-3"></i>
                            <div>
                                <div class="font-medium text-gray-900">${suggestion.nome}</div>
                                <div class="text-sm text-gray-500">${suggestion.location}</div>
                            </div>
                        </div>
                    </div>
                `).join('');
                
                suggestionsContainer.classList.remove('hidden');
            }
            
            window.selectSuggestion = function(nome, id) {
                searchInput.value = nome;
                suggestionsContainer.classList.add('hidden');
            };
            
            // Hide suggestions when clicking outside
            document.addEventListener('click', function(e) {
                if (!searchInput.contains(e.target) && !suggestionsContainer.contains(e.target)) {
                    suggestionsContainer.classList.add('hidden');
                }
            });
            
            // Sort functionality
            const sortSelect = document.getElementById('sortSelect');
            sortSelect.addEventListener('change', function() {
                showLoading();
                const url = new URL(window.location);
                url.searchParams.set('sort', this.value);
                url.searchParams.set('page', '1');
                window.location.href = url.toString();
            });
            
            // Filter chips functionality
            const filterChips = document.querySelectorAll('.filter-chip');
            filterChips.forEach(chip => {
                chip.addEventListener('click', function() {
                    this.classList.toggle('bg-purple-100');
                    this.classList.toggle('border-purple-300');
                    this.classList.toggle('text-purple-700');
                    // Apply filter logic here
                });
            });
            
            function showLoading() {
                const container = document.getElementById('resultsContainer');
                container.innerHTML = `
                    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                        ${Array(6).fill().map(() => `
                            <div class="bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 overflow-hidden">
                                <div class="loading-skeleton h-48"></div>
                                <div class="p-6">
                                    <div class="loading-skeleton h-6 mb-2 rounded"></div>
                                    <div class="loading-skeleton h-4 mb-4 rounded w-3/4"></div>
                                    <div class="loading-skeleton h-4 rounded w-1/2"></div>
                                </div>
                            </div>
                        `).join('')}
                    </div>
                `;
            }
        });
    </script>
}