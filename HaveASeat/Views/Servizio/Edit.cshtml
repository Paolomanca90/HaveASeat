@model HaveASeat.Models.Servizio

@{
    Layout = "_DashboardLayout";
    var salone = ViewBag.Salone as HaveASeat.Models.Salone;
}

<!-- Header -->
<div class="flex flex-col lg:flex-row lg:items-center justify-between mb-8 space-y-4 lg:space-y-0">
    <div class="flex items-center space-x-4">
        <a href="@Url.Action("Index", new { saloneId = salone?.SaloneId })" class="inline-flex items-center justify-center w-10 h-10 bg-gray-100 dark:bg-gray-700 rounded-lg hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors duration-200">
            <i class="fas fa-arrow-left text-gray-600 dark:text-gray-300"></i>
        </a>
        <div>
            <h1 class="text-3xl font-bold text-gray-900 dark:text-gray-100">Modifica Servizio</h1>
            <p class="text-gray-600 dark:text-gray-400 mt-1">Aggiorna i dati di <strong>@Model.Nome</strong></p>
        </div>
    </div>

    <div class="flex items-center space-x-3">
        <a href="@Url.Action("Details", new { id = Model.ServizioId })" class="inline-flex items-center px-4 py-2 border border-gray-300 dark:border-gray-600 text-sm font-medium rounded-lg text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-800 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors duration-200">
            <i class="fas fa-eye mr-2"></i>
            Visualizza
        </a>
    </div>
</div>

<!-- Form Card -->
<div class="max-w-4xl mx-auto">
    <div class="bg-white dark:bg-gray-800 rounded-2xl shadow-xl p-8 border border-gray-200 dark:border-gray-700">
        <form method="post" id="editServizioForm" class="space-y-8">
            @Html.AntiForgeryToken()

            @if (!ViewData.ModelState.IsValid)
            {
                <div class="alert alert-error">
                    <i class="fas fa-exclamation-circle mr-2"></i>
                    Correggi gli errori evidenziati
                </div>
            }

            <!-- Informazioni Base -->
            <div class="space-y-6">
                <div class="flex items-center mb-6 pb-4 border-b border-gray-200 dark:border-gray-700">
                    <div class="w-10 h-10 bg-blue-100 dark:bg-blue-900/30 rounded-lg flex items-center justify-center mr-3">
                        <i class="fas fa-cut text-blue-600 dark:text-blue-400"></i>
                    </div>
                    <div>
                        <h2 class="text-xl font-bold text-gray-900 dark:text-gray-100">Informazioni Servizio</h2>
                        <p class="text-sm text-gray-600 dark:text-gray-400">Aggiorna i dati del servizio</p>
                    </div>
                </div>

                <div class="grid grid-cols-1 gap-6">
                    <div class="form-control">
                        <label asp-for="Nome" class="label">
                            <span class="label-text font-medium text-gray-700 dark:text-gray-300">Nome Servizio *</span>
                        </label>
                        <input asp-for="Nome"
                               class="input input-bordered w-full focus:border-blue-500 focus:ring-2 focus:ring-blue-200 dark:bg-gray-700 dark:text-gray-100 transition-all duration-200"
                               placeholder="Es. Taglio e Piega" />
                        <span asp-validation-for="Nome" class="label-text-alt text-error mt-1"></span>
                    </div>

                    <div class="form-control">
                        <label asp-for="Descrizione" class="label">
                            <span class="label-text font-medium text-gray-700 dark:text-gray-300">Descrizione</span>
                        </label>
                        <textarea asp-for="Descrizione"
                                  class="textarea textarea-bordered h-24 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 dark:bg-gray-700 dark:text-gray-100 transition-all duration-200"
                                  placeholder="Descrizione dettagliata del servizio..."></textarea>
                        <span asp-validation-for="Descrizione" class="label-text-alt text-error mt-1"></span>
                    </div>
                </div>

                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div class="form-control">
                        <label asp-for="Prezzo" class="label">
                            <span class="label-text font-medium text-gray-700 dark:text-gray-300">Prezzo (€) *</span>
                        </label>
                        <div class="relative">
                            <span class="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500">€</span>
                            <input asp-for="Prezzo"
                                   type="number"
                                   step="0.01"
                                   min="0"
                                   class="input input-bordered w-full pl-8 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 dark:bg-gray-700 dark:text-gray-100 transition-all duration-200"
                                   placeholder="25.00" />
                        </div>
                        <span asp-validation-for="Prezzo" class="label-text-alt text-error mt-1"></span>
                    </div>

                    <div class="form-control">
                        <label asp-for="Durata" class="label">
                            <span class="label-text font-medium text-gray-700 dark:text-gray-300">Durata (minuti) *</span>
                        </label>
                        <div class="relative">
                            <input asp-for="Durata"
                                   type="number"
                                   min="1"
                                   class="input input-bordered w-full pr-12 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 dark:bg-gray-700 dark:text-gray-100 transition-all duration-200"
                                   placeholder="60" />
                            <span class="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-500">min</span>
                        </div>
                        <span asp-validation-for="Durata" class="label-text-alt text-error mt-1"></span>
                    </div>
                </div>
            </div>

            <!-- Promozione -->
            <div class="space-y-6">
                <div class="flex items-center mb-6 pb-4 border-b border-gray-200 dark:border-gray-700">
                    <div class="w-10 h-10 bg-orange-100 dark:bg-orange-900/30 rounded-lg flex items-center justify-center mr-3">
                        <i class="fas fa-tag text-orange-600 dark:text-orange-400"></i>
                    </div>
                    <div>
                        <h2 class="text-xl font-bold text-gray-900 dark:text-gray-100">Promozione</h2>
                        <p class="text-sm text-gray-600 dark:text-gray-400">Gestisci la promozione per questo servizio</p>
                    </div>
                </div>

                <div class="form-control">
                    <label class="label cursor-pointer justify-start">
                        <input asp-for="IsPromotion"
                               type="checkbox"
                               class="checkbox checkbox-primary mr-3"
                               onchange="togglePromoFields()" />
                        <span class="label-text font-medium text-gray-700 dark:text-gray-300">Servizio in promozione</span>
                    </label>
                </div>

                <div id="promo-fields" class="@(!Model.IsPromotion ? "hidden" : "") space-y-4">
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div class="form-control">
                            <label asp-for="DataInizioPromozione" class="label">
                                <span class="label-text font-medium text-gray-700 dark:text-gray-300">Data Inizio</span>
                            </label>
                            <input asp-for="DataInizioPromozione"
                                   type="date"
                                   class="input input-bordered w-full focus:border-orange-500 focus:ring-2 focus:ring-orange-200 dark:bg-gray-700 dark:text-gray-100 transition-all duration-200" />
                            <span asp-validation-for="DataInizioPromozione" class="label-text-alt text-error mt-1"></span>
                        </div>

                        <div class="form-control">
                            <label asp-for="DataFinePromozione" class="label">
                                <span class="label-text font-medium text-gray-700 dark:text-gray-300">Data Fine</span>
                            </label>
                            <input asp-for="DataFinePromozione"
                                   type="date"
                                   class="input input-bordered w-full focus:border-orange-500 focus:ring-2 focus:ring-orange-200 dark:bg-gray-700 dark:text-gray-100 transition-all duration-200" />
                            <span asp-validation-for="DataFinePromozione" class="label-text-alt text-error mt-1"></span>
                        </div>
                    </div>

                    @if (Model.IsPromotion && Model.DataFinePromozione > DateTime.Now)
                    {
                        <div class="bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 rounded-lg p-4">
                            <div class="flex items-start space-x-3">
                                <i class="fas fa-check-circle text-green-500 mt-0.5"></i>
                                <div>
                                    <p class="text-green-800 dark:text-green-200 text-sm font-medium">Promozione Attiva</p>
                                    <p class="text-green-700 dark:text-green-300 text-xs mt-1">
                                        La promozione è attualmente attiva e scadrà il @Model.DataFinePromozione.ToString("dd/MM/yyyy").
                                    </p>
                                </div>
                            </div>
                        </div>
                    }
                    else if (Model.IsPromotion)
                    {
                        <div class="bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg p-4">
                            <div class="flex items-start space-x-3">
                                <i class="fas fa-exclamation-triangle text-yellow-500 mt-0.5"></i>
                                <div>
                                    <p class="text-yellow-800 dark:text-yellow-200 text-sm font-medium">Promozione Scaduta</p>
                                    <p class="text-yellow-700 dark:text-yellow-300 text-xs mt-1">
                                        La promozione è scaduta il @Model.DataFinePromozione.ToString("dd/MM/yyyy"). Aggiorna le date per riattivarla.
                                    </p>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>

            <!-- Informazioni Aggiuntive -->
            <div class="bg-gradient-to-r from-gray-50 to-gray-100 dark:from-gray-700/50 dark:to-gray-800/50 border border-gray-200 dark:border-gray-600 rounded-lg p-6">
                <div class="flex items-center mb-4">
                    <div class="w-8 h-8 bg-gray-200 dark:bg-gray-600 rounded-lg flex items-center justify-center mr-3">
                        <i class="fas fa-info-circle text-gray-500 dark:text-gray-400"></i>
                    </div>
                    <h3 class="text-lg font-semibold text-gray-900 dark:text-gray-100">Informazioni Servizio</h3>
                </div>
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 text-sm">
                    <div class="bg-white dark:bg-gray-800 p-3 rounded-lg border border-gray-200 dark:border-gray-700">
                        <div class="flex items-center space-x-2">
                            <i class="fas fa-store text-purple-500"></i>
                            <span class="font-medium text-gray-700 dark:text-gray-300">Salone</span>
                        </div>
                        <span class="text-gray-600 dark:text-gray-400 mt-1 block">@salone?.Nome</span>
                    </div>
                    <div class="bg-white dark:bg-gray-800 p-3 rounded-lg border border-gray-200 dark:border-gray-700">
                        <div class="flex items-center space-x-2">
                            <i class="fas fa-users text-blue-500"></i>
                            <span class="font-medium text-gray-700 dark:text-gray-300">Staff Assegnato</span>
                        </div>
                        <span class="text-gray-600 dark:text-gray-400 mt-1 block">@Model.DipendenteServizi.Count membri</span>
                    </div>
                    <div class="bg-white dark:bg-gray-800 p-3 rounded-lg border border-gray-200 dark:border-gray-700">
                        <div class="flex items-center space-x-2">
                            <i class="fas fa-euro-sign text-green-500"></i>
                            <span class="font-medium text-gray-700 dark:text-gray-300">Prezzo/Ora</span>
                        </div>
                        <span class="text-gray-600 dark:text-gray-400 mt-1 block">€@((Model.Prezzo / Model.Durata * 60).ToString("F2"))/h</span>
                    </div>
                    <div class="bg-white dark:bg-gray-800 p-3 rounded-lg border border-gray-200 dark:border-gray-700">
                        <div class="flex items-center space-x-2">
                            <i class="fas fa-tag text-orange-500"></i>
                            <span class="font-medium text-gray-700 dark:text-gray-300">Stato</span>
                        </div>
                        <span class="text-gray-600 dark:text-gray-400 mt-1 block">@(Model.IsPromotion ? "In Promo" : "Standard")</span>
                    </div>
                </div>
            </div>

            <!-- Submit Buttons -->
            <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between pt-6 border-t border-gray-200 dark:border-gray-700 space-y-3 sm:space-y-0">
                <div class="flex items-center space-x-3">
                    <a href="@Url.Action("Index", new { saloneId = salone?.SaloneId })" class="inline-flex items-center px-4 py-2 border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 font-medium rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors duration-200">
                        <i class="fas fa-times mr-2"></i>
                        Annulla
                    </a>

                    <button type="button" onclick="confirmDelete()" class="inline-flex items-center px-4 py-2 border border-red-300 dark:border-red-600 text-red-700 dark:text-red-400 font-medium rounded-lg hover:bg-red-50 dark:hover:bg-red-900/20 transition-colors duration-200">
                        <i class="fas fa-trash mr-2"></i>
                        Elimina Servizio
                    </button>
                </div>

                <button type="submit" class="inline-flex items-center px-6 py-3 bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white font-medium rounded-lg transition-all duration-200 transform hover:scale-105 shadow-lg hover:shadow-xl">
                    <i class="fas fa-save mr-2"></i>
                    Salva Modifiche
                </button>
            </div>
        </form>
    </div>
</div>

<!-- Loading Overlay -->
<div id="loadingOverlay" class="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center hidden">
    <div class="bg-white dark:bg-gray-800 rounded-lg p-6 text-center">
        <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
        <p class="text-gray-700 dark:text-gray-300">Salvando modifiche...</p>
    </div>
</div>

<script>
    function togglePromoFields() {
        const checkbox = document.querySelector('input[name="IsPromotion"]');
        const promoFields = document.getElementById('promo-fields');

        if (checkbox.checked) {
            promoFields.classList.remove('hidden');
            // Imposta date di default se non sono già impostate
            const startDate = document.querySelector('input[name="DataInizioPromozione"]');
            const endDate = document.querySelector('input[name="DataFinePromozione"]');

            if (!startDate.value) {
                startDate.value = new Date().toISOString().split('T')[0];
            }
            if (!endDate.value) {
                const futureDate = new Date();
                futureDate.setDate(futureDate.getDate() + 30);
                endDate.value = futureDate.toISOString().split('T')[0];
            }
        } else {
            promoFields.classList.add('hidden');
        }
    }

    // Conferma eliminazione con SweetAlert
    function confirmDelete() {
        Swal.fire({
            title: '🗑️ Eliminare il servizio?',
            html: `
                <div class="text-left space-y-3">
                    <div class="bg-red-50 border border-red-200 rounded-lg p-3">
                        <p class="text-red-800 font-medium">⚠️ Stai per eliminare <strong>@Model.Nome</strong></p>
                    </div>
                    <p class="text-gray-600">Il servizio sarà rimosso da:</p>
                    <ul class="text-sm text-gray-500 space-y-1">
                        <li>• Catalogo servizi del salone</li>
                        <li>• Assegnazioni dello staff</li>
                        <li>• Sistema di prenotazioni</li>
                        <li>• Le prenotazioni esistenti rimarranno valide</li>
                    </ul>
                </div>
            `,
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: '<i class="fas fa-trash mr-2"></i>Elimina definitivamente',
            cancelButtonText: 'Annulla',
            confirmButtonColor: '#ef4444',
            cancelButtonColor: '#6b7280',
            reverseButtons: true,
            preConfirm: () => {
                // Mostra loading
                Swal.fire({
                    title: 'Eliminazione in corso...',
                    text: 'Attendere prego',
                    allowOutsideClick: false,
                    showConfirmButton: false,
                    willOpen: () => {
                        Swal.showLoading();
                    }
                });

                // Redirect alla pagina di eliminazione
                window.location.href = '/Servizio/Delete/@Model.ServizioId';
            }
        });
    }

    // Validazione form client-side
    function validateForm() {
        let isValid = true;

        // Validazione nome
        const nome = document.querySelector('input[name="Nome"]');
        if (nome.value.trim().length < 2) {
            nome.classList.add('border-red-500');
            isValid = false;
        } else {
            nome.classList.remove('border-red-500');
        }

        // Validazione prezzo
        const prezzo = document.querySelector('input[name="Prezzo"]');
        if (!prezzo.value || parseFloat(prezzo.value) <= 0) {
            prezzo.classList.add('border-red-500');
            isValid = false;
        } else {
            prezzo.classList.remove('border-red-500');
        }

        // Validazione durata
        const durata = document.querySelector('input[name="Durata"]');
        if (!durata.value || parseInt(durata.value) <= 0) {
            durata.classList.add('border-red-500');
            isValid = false;
        } else {
            durata.classList.remove('border-red-500');
        }

        // Validazione date promozione se attivata
        const isPromotion = document.querySelector('input[name="IsPromotion"]').checked;
        if (isPromotion) {
            const startDate = document.querySelector('input[name="DataInizioPromozione"]');
            const endDate = document.querySelector('input[name="DataFinePromozione"]');

            if (startDate.value && endDate.value && new Date(startDate.value) >= new Date(endDate.value)) {
                endDate.classList.add('border-red-500');
                isValid = false;
                Swal.fire({
                    icon: 'error',
                    title: 'Date non valide',
                    text: 'La data di fine promozione deve essere successiva alla data di inizio.',
                    confirmButtonColor: '#3B82F6'
                });
            } else {
                endDate.classList.remove('border-red-500');
            }
        }

        return isValid;
    }

    // Calcolo dinamico prezzo orario
    function updatePricePerHour() {
        const prezzo = document.querySelector('input[name="Prezzo"]');
        const durata = document.querySelector('input[name="Durata"]');
        const priceDisplay = document.querySelector('.price-per-hour');

        if (prezzo.value && durata.value && parseFloat(durata.value) > 0) {
            const prezzoOrario = (parseFloat(prezzo.value) / parseFloat(durata.value) * 60);
            if (priceDisplay) {
                priceDisplay.textContent = `€${prezzoOrario.toFixed(2)}/h`;
            }
        }
    }

    // Inizializzazione
    document.addEventListener('DOMContentLoaded', function() {
        // Auto-focus primo campo
        const firstInput = document.querySelector('input[name="Nome"]');
        if (firstInput) firstInput.focus();

        // Gestione submit con validazione
        const form = document.getElementById('editServizioForm');
        const submitBtn = form.querySelector('button[type="submit"]');

        form.addEventListener('submit', function(e) {
            e.preventDefault();

            // Validazione client-side
            if (!validateForm()) {
                Swal.fire({
                    icon: 'error',
                    title: 'Errore di validazione',
                    text: 'Correggi i campi evidenziati prima di continuare',
                    confirmButtonColor: '#3B82F6'
                });
                return;
            }

            // Mostra loading overlay
            document.getElementById('loadingOverlay').classList.remove('hidden');

            // Disabilita button
            submitBtn.disabled = true;
            submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i>Salvando...';

            // Submit del form
            setTimeout(() => {
                form.submit();
            }, 500);
        });

        // Validazione in tempo reale
        ['Nome', 'Prezzo', 'Durata'].forEach(fieldName => {
            const field = document.querySelector(`input[name="${fieldName}"]`);
            if (field) {
                field.addEventListener('input', function() {
                    this.classList.remove('border-red-500');
                    updatePricePerHour();
                });
            }
        });

        // Validazione date promozione
        ['DataInizioPromozione', 'DataFinePromozione'].forEach(fieldName => {
            const field = document.querySelector(`input[name="${fieldName}"]`);
            if (field) {
                field.addEventListener('change', function() {
                    this.classList.remove('border-red-500');
                });
            }
        });

        // Auto-dismiss degli alert dopo 5 secondi
        setTimeout(function() {
            const alerts = document.querySelectorAll('.alert');
            alerts.forEach(alert => {
                alert.classList.add('opacity-0', '-translate-y-4');
                setTimeout(() => alert.remove(), 300);
            });
        }, 5000);

        // Inizializza le date di promozione se già selezionata
        togglePromoFields();

        // Calcola prezzo orario iniziale
        updatePricePerHour();
    });
</script>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
}