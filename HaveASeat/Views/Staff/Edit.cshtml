@model HaveASeat.Models.Dipendente

@{
    Layout = "_DashboardLayout";
    var servizi = ViewBag.Servizi as List<HaveASeat.Models.Servizio>;
    var serviziAssegnati = ViewBag.ServiziAssegnati as List<Guid>;
}

<!-- Header -->
<div class="flex flex-col lg:flex-row lg:items-center justify-between mb-8 space-y-4 lg:space-y-0">
    <div class="flex items-center space-x-4">
        <a href="/Staff/Details/@Model.DipendenteId" class="inline-flex items-center justify-center w-10 h-10 bg-gray-100 dark:bg-gray-700 rounded-lg hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors duration-200">
            <i class="fas fa-arrow-left text-gray-600 dark:text-gray-300"></i>
        </a>
        <div>
            <h1 class="text-3xl font-bold text-gray-900 dark:text-gray-100">Modifica Staff</h1>
            <p class="text-gray-600 dark:text-gray-400 mt-1">Aggiorna i dati di @Model.ApplicationUser.Nome @Model.ApplicationUser.Cognome</p>
        </div>
    </div>

    <div class="flex items-center space-x-3">
        <a href="/Staff/Details/@Model.DipendenteId" class="inline-flex items-center px-4 py-2 border border-gray-300 dark:border-gray-600 text-sm font-medium rounded-lg text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-800 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors duration-200">
            <i class="fas fa-eye mr-2"></i>
            Visualizza
        </a>
    </div>
</div>

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success mb-6 transition-all duration-300 ease-in-out opacity-100" id="successAlert">
        <i class="fas fa-check-circle mr-2"></i>
        @TempData["SuccessMessage"]
    </div>
}

@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-error mb-6 transition-all duration-300 ease-in-out opacity-100" id="errorAlert">
        <i class="fas fa-exclamation-circle mr-2"></i>
        @TempData["ErrorMessage"]
    </div>
}

<!-- Form Card -->
<div class="max-w-4xl mx-auto">
    <div class="bg-white dark:bg-gray-800 rounded-2xl shadow-xl p-8 border border-gray-200 dark:border-gray-700">
        <form method="post" id="editStaffForm" class="space-y-8">
            @Html.AntiForgeryToken()

            @if (!ViewData.ModelState.IsValid)
            {
                <div class="alert alert-error">
                    <i class="fas fa-exclamation-circle mr-2"></i>
                    Correggi gli errori evidenziati
                </div>
            }

            <!-- Informazioni Personali -->
            <div class="space-y-6">
                <div class="flex items-center mb-6 pb-4 border-b border-gray-200 dark:border-gray-700">
                    <div class="w-10 h-10 bg-blue-100 dark:bg-blue-900/30 rounded-lg flex items-center justify-center mr-3">
                        <i class="fas fa-user text-blue-600 dark:text-blue-400"></i>
                    </div>
                    <div>
                        <h2 class="text-xl font-bold text-gray-900 dark:text-gray-100">Informazioni Personali</h2>
                        <p class="text-sm text-gray-600 dark:text-gray-400">Aggiorna i dati del membro del team</p>
                    </div>
                </div>

                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div class="form-control">
                        <label class="label">
                            <span class="label-text font-medium text-gray-700 dark:text-gray-300">Nome *</span>
                        </label>
                        <input name="nome"
                               value="@Model.ApplicationUser.Nome"
                               class="input input-bordered w-full focus:border-blue-500 focus:ring-2 focus:ring-blue-200 dark:bg-gray-700 dark:text-gray-100 transition-all duration-200"
                               placeholder="Mario"
                               required />
                        <span class="label-text-alt text-error mt-1 hidden" id="nome-error"></span>
                    </div>

                    <div class="form-control">
                        <label class="label">
                            <span class="label-text font-medium text-gray-700 dark:text-gray-300">Cognome *</span>
                        </label>
                        <input name="cognome"
                               value="@Model.ApplicationUser.Cognome"
                               class="input input-bordered w-full focus:border-blue-500 focus:ring-2 focus:ring-blue-200 dark:bg-gray-700 dark:text-gray-100 transition-all duration-200"
                               placeholder="Rossi"
                               required />
                        <span class="label-text-alt text-error mt-1 hidden" id="cognome-error"></span>
                    </div>
                </div>

                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div class="form-control">
                        <label class="label">
                            <span class="label-text font-medium text-gray-700 dark:text-gray-300">Email</span>
                        </label>
                        <input type="email"
                               value="@Model.ApplicationUser.Email"
                               class="input input-bordered w-full bg-gray-100 dark:bg-gray-600 text-gray-500 dark:text-gray-400 cursor-not-allowed"
                               readonly />
                        <div class="label">
                            <span class="label-text-alt text-gray-500">L'email non può essere modificata</span>
                        </div>
                    </div>

                    <div class="form-control">
                        <label class="label">
                            <span class="label-text font-medium text-gray-700 dark:text-gray-300">Telefono</span>
                        </label>
                        <input name="telefono"
                               value="@Model.ApplicationUser.PhoneNumber"
                               type="tel"
                               class="input input-bordered w-full focus:border-blue-500 focus:ring-2 focus:ring-blue-200 dark:bg-gray-700 dark:text-gray-100 transition-all duration-200"
                               placeholder="+39 333 123 4567" />
                        <span class="label-text-alt text-error mt-1 hidden" id="telefono-error"></span>
                    </div>
                </div>
            </div>

            <!-- Servizi Assegnati -->
            <div class="space-y-6">
                <div class="flex items-center mb-6 pb-4 border-b border-gray-200 dark:border-gray-700">
                    <div class="w-10 h-10 bg-green-100 dark:bg-green-900/30 rounded-lg flex items-center justify-center mr-3">
                        <i class="fas fa-cut text-green-600 dark:text-green-400"></i>
                    </div>
                    <div>
                        <h2 class="text-xl font-bold text-gray-900 dark:text-gray-100">Servizi Assegnati</h2>
                        <p class="text-sm text-gray-600 dark:text-gray-400">Modifica i servizi che il membro può offrire</p>
                    </div>
                </div>

                @if (servizi != null && servizi.Any())
                {
                    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                        @foreach (var servizio in servizi)
                        {
                            <div class="form-control">
                                <label class="service-checkbox label cursor-pointer justify-start p-4 border border-gray-200 dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700/50 transition-all duration-200 @(serviziAssegnati != null && serviziAssegnati.Contains(servizio.ServizioId) ? "bg-blue-50 dark:bg-blue-900/20 border-blue-300 dark:border-blue-700" : "")">
                                    <input type="checkbox"
                                           name="serviziIds"
                                           value="@servizio.ServizioId"
                                           class="checkbox checkbox-primary mr-3"
                                    @(serviziAssegnati != null && serviziAssegnati.Contains(servizio.ServizioId) ? "checked" : "") />
                                    <div class="flex-1">
                                        <span class="label-text font-medium text-gray-900 dark:text-gray-100 block">@servizio.Nome</span>
                                        <div class="text-sm text-gray-500 dark:text-gray-400 flex items-center space-x-3 mt-1">
                                            <span class="flex items-center">
                                                <i class="fas fa-euro-sign text-xs mr-1"></i>
                                                @servizio.Prezzo.ToString("F2")
                                            </span>
                                            <span class="flex items-center">
                                                <i class="fas fa-clock text-xs mr-1"></i>
                                                @servizio.Durata min
                                            </span>
                                        </div>
                                        @if (!string.IsNullOrEmpty(servizio.Descrizione))
                                        {
                                            <div class="text-xs text-gray-400 dark:text-gray-500 mt-2 line-clamp-2">
                                                @servizio.Descrizione
                                            </div>
                                        }
                                    </div>
                                </label>
                            </div>
                        }
                    </div>

                    <div class="bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-4">
                        <div class="flex items-start space-x-3">
                            <i class="fas fa-info-circle text-blue-500 mt-0.5"></i>
                            <div>
                                <p class="text-blue-800 dark:text-blue-200 text-sm font-medium">Nota Importante</p>
                                <p class="text-blue-700 dark:text-blue-300 text-xs mt-1">
                                    Seleziona solo i servizi che questo membro del team è qualificato ad offrire.
                                    Le modifiche saranno effettive immediatamente e influenzeranno le prenotazioni future.
                                </p>
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    <div class="text-center py-12 bg-gray-50 dark:bg-gray-700/50 rounded-lg border-2 border-dashed border-gray-300 dark:border-gray-600">
                        <div class="w-16 h-16 mx-auto mb-4 bg-yellow-100 dark:bg-yellow-900/30 rounded-full flex items-center justify-center">
                            <i class="fas fa-exclamation-triangle text-2xl text-yellow-500"></i>
                        </div>
                        <h3 class="text-lg font-semibold text-gray-900 dark:text-gray-100 mb-2">Nessun servizio disponibile</h3>
                        <p class="text-gray-600 dark:text-gray-400 mb-6 max-w-md mx-auto">
                            Prima di assegnare servizi, devi configurare almeno un servizio per @Model.Salone.Nome
                        </p>
                        <a href="/Partner/Servizi?saloneId=@Model.SaloneId" class="inline-flex items-center px-4 py-2 bg-yellow-600 hover:bg-yellow-700 text-white text-sm font-medium rounded-lg transition-colors duration-200">
                            <i class="fas fa-plus mr-2"></i>
                            Configura Servizi
                        </a>
                    </div>
                }
            </div>

            <!-- Informazioni Aggiuntive -->
            <div class="bg-gradient-to-r from-gray-50 to-gray-100 dark:from-gray-700/50 dark:to-gray-800/50 border border-gray-200 dark:border-gray-600 rounded-lg p-6">
                <div class="flex items-center mb-4">
                    <div class="w-8 h-8 bg-gray-200 dark:bg-gray-600 rounded-lg flex items-center justify-center mr-3">
                        <i class="fas fa-info-circle text-gray-500 dark:text-gray-400"></i>
                    </div>
                    <h3 class="text-lg font-semibold text-gray-900 dark:text-gray-100">Informazioni Account</h3>
                </div>
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 text-sm">
                    <div class="bg-white dark:bg-gray-800 p-3 rounded-lg border border-gray-200 dark:border-gray-700">
                        <div class="flex items-center space-x-2">
                            <i class="fas fa-calendar-plus text-blue-500"></i>
                            <span class="font-medium text-gray-700 dark:text-gray-300">Membro dal</span>
                        </div>
                        <span class="text-gray-600 dark:text-gray-400 mt-1 block">@Model.DataCreazione.ToString("dd/MM/yyyy")</span>
                    </div>
                    <div class="bg-white dark:bg-gray-800 p-3 rounded-lg border border-gray-200 dark:border-gray-700">
                        <div class="flex items-center space-x-2">
                            <i class="fas fa-store text-purple-500"></i>
                            <span class="font-medium text-gray-700 dark:text-gray-300">Salone</span>
                        </div>
                        <span class="text-gray-600 dark:text-gray-400 mt-1 block">@Model.Salone.Nome</span>
                    </div>
                    <div class="bg-white dark:bg-gray-800 p-3 rounded-lg border border-gray-200 dark:border-gray-700">
                        <div class="flex items-center space-x-2">
                            <i class="fas fa-calendar-check text-green-500"></i>
                            <span class="font-medium text-gray-700 dark:text-gray-300">Appuntamenti</span>
                        </div>
                        <span class="text-gray-600 dark:text-gray-400 mt-1 block">@Model.Appuntamenti.Count totali</span>
                    </div>
                    <div class="bg-white dark:bg-gray-800 p-3 rounded-lg border border-gray-200 dark:border-gray-700">
                        <div class="flex items-center space-x-2">
                            <i class="fas fa-star text-orange-500"></i>
                            <span class="font-medium text-gray-700 dark:text-gray-300">Recensioni</span>
                        </div>
                        <span class="text-gray-600 dark:text-gray-400 mt-1 block">@Model.Recensioni.Count ricevute</span>
                    </div>
                </div>
            </div>

            <!-- Submit Buttons -->
            <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between pt-6 border-t border-gray-200 dark:border-gray-700 space-y-3 sm:space-y-0">
                <div class="flex items-center space-x-3">
                    <a href="/Staff/Details/@Model.DipendenteId" class="inline-flex items-center px-4 py-2 border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 font-medium rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors duration-200">
                        <i class="fas fa-times mr-2"></i>
                        Annulla
                    </a>

                    <button type="button" onclick="confirmDelete()" class="inline-flex items-center px-4 py-2 border border-red-300 dark:border-red-600 text-red-700 dark:text-red-400 font-medium rounded-lg hover:bg-red-50 dark:hover:bg-red-900/20 transition-colors duration-200">
                        <i class="fas fa-trash mr-2"></i>
                        Rimuovi Staff
                    </button>
                </div>

                <button type="submit" class="inline-flex items-center px-6 py-3 bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white font-medium rounded-lg transition-all duration-200 transform hover:scale-105 shadow-lg hover:shadow-xl">
                    <i class="fas fa-save mr-2"></i>
                    Salva Modifiche
                </button>
            </div>
        </form>
    </div>
</div>

<!-- Loading Overlay -->
<div id="loadingOverlay" class="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center hidden">
    <div class="bg-white dark:bg-gray-800 rounded-lg p-6 text-center">
        <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
        <p class="text-gray-700 dark:text-gray-300">Salvando modifiche...</p>
    </div>
</div>

<script>
    // Conferma eliminazione con SweetAlert
    function confirmDelete() {
        Swal.fire({
            title: '🗑️ Rimuovere dal team?',
            html: `
                <div class="text-left space-y-3">
                    <div class="bg-red-50 border border-red-200 rounded-lg p-3">
                        <p class="text-red-800 font-medium">⚠️ Stai per rimuovere <strong>@Model.ApplicationUser.Nome @Model.ApplicationUser.Cognome</strong> dal team</p>
                    </div>
                    <p class="text-gray-600">Il membro dello staff:</p>
                    <ul class="text-sm text-gray-500 space-y-1">
                        <li>• Non potrà più accedere alla gestione</li>
                        <li>• Gli appuntamenti esistenti rimarranno validi</li>
                        <li>• I servizi assegnati verranno rimossi</li>
                        <li>• Le recensioni ricevute saranno mantenute</li>
                    </ul>
                </div>
            `,
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: '<i class="fas fa-trash mr-2"></i>Rimuovi definitivamente',
            cancelButtonText: 'Annulla',
            confirmButtonColor: '#ef4444',
            cancelButtonColor: '#6b7280',
            reverseButtons: true,
            preConfirm: () => {
                // Mostra loading
                Swal.fire({
                    title: 'Rimozione in corso...',
                    text: 'Attendere prego',
                    allowOutsideClick: false,
                    showConfirmButton: false,
                    willOpen: () => {
                        Swal.showLoading();
                    }
                });

                // Redirect alla pagina di eliminazione
                window.location.href = '/Staff/Delete/@Model.DipendenteId';
            }
        });
    }

    // Gestione highlight servizi selezionati
    function updateServiceHighlight(checkbox) {
        const label = checkbox.closest('label');
        if (checkbox.checked) {
            label.classList.add('bg-blue-50', 'dark:bg-blue-900/20', 'border-blue-300', 'dark:border-blue-700', 'shadow-sm');
        } else {
            label.classList.remove('bg-blue-50', 'dark:bg-blue-900/20', 'border-blue-300', 'dark:border-blue-700', 'shadow-sm');
        }
    }

    // Validazione form client-side
    function validateForm() {
        let isValid = true;

        // Validazione nome
        const nome = document.querySelector('input[name="nome"]');
        const nomeError = document.getElementById('nome-error');
        if (nome.value.trim().length < 2) {
            nomeError.textContent = 'Il nome deve contenere almeno 2 caratteri';
            nomeError.classList.remove('hidden');
            nome.classList.add('border-red-500');
            isValid = false;
        } else {
            nomeError.classList.add('hidden');
            nome.classList.remove('border-red-500');
        }

        // Validazione cognome
        const cognome = document.querySelector('input[name="cognome"]');
        const cognomeError = document.getElementById('cognome-error');
        if (cognome.value.trim().length < 2) {
            cognomeError.textContent = 'Il cognome deve contenere almeno 2 caratteri';
            cognomeError.classList.remove('hidden');
            cognome.classList.add('border-red-500');
            isValid = false;
        } else {
            cognomeError.classList.add('hidden');
            cognome.classList.remove('border-red-500');
        }

        // Validazione telefono (opzionale ma se presente deve essere valido)
        const telefono = document.querySelector('input[name="telefono"]');
        const telefonoError = document.getElementById('telefono-error');
        if (telefono.value.trim() && !/^[\+]?[\d\s\-\(\)]+$/.test(telefono.value)) {
            telefonoError.textContent = 'Inserisci un numero di telefono valido';
            telefonoError.classList.remove('hidden');
            telefono.classList.add('border-red-500');
            isValid = false;
        } else {
            telefonoError.classList.add('hidden');
            telefono.classList.remove('border-red-500');
        }

        return isValid;
    }

    // Auto-dismiss degli alert
    function dismissAlerts() {
        setTimeout(function() {
            const alerts = document.querySelectorAll('.alert');
            alerts.forEach(alert => {
                alert.classList.add('opacity-0', '-translate-y-4');
                setTimeout(() => alert.remove(), 300);
            });
        }, 5000);
    }

    // Inizializzazione
    document.addEventListener('DOMContentLoaded', function() {
        // Highlight servizi già selezionati
        const checkboxes = document.querySelectorAll('input[name="serviziIds"]');
        checkboxes.forEach(checkbox => {
            checkbox.addEventListener('change', function() {
                updateServiceHighlight(this);
            });
        });

        // Validazione form al submit
        const form = document.getElementById('editStaffForm');
        form.addEventListener('submit', function(e) {
            if (!validateForm()) {
                e.preventDefault();
                Swal.fire({
                    icon: 'error',
                    title: 'Errori nel form',
                    text: 'Correggi gli errori evidenziati prima di continuare',
                    confirmButtonColor: '#3b82f6'
                });
                return false;
            }

            // Mostra loading overlay
            document.getElementById('loadingOverlay').classList.remove('hidden');
        });

        // Validazione in tempo reale
        document.querySelector('input[name="nome"]').addEventListener('blur', validateForm);
        document.querySelector('input[name="cognome"]').addEventListener('blur', validateForm);
        document.querySelector('input[name="telefono"]').addEventListener('blur', validateForm);

        // Auto-dismiss alerts
        dismissAlerts();
    });

    // Conta servizi selezionati
    function updateServiceCount() {
        const checkedServices = document.querySelectorAll('input[name="serviziIds"]:checked').length;
        const serviceCountElement = document.getElementById('serviceCount');
        if (serviceCountElement) {
            serviceCountElement.textContent = checkedServices;
        }
    }

    // Aggiungi contatore servizi
    document.addEventListener('change', function(e) {
        if (e.target.name === 'serviziIds') {
            updateServiceCount();
        }
    });
</script>